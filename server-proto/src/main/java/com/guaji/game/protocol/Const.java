// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Const.proto

package com.guaji.game.protocol;

public final class Const {
  private Const() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code itemType}
   *
   * <pre>
   * 数据类型定义
   * </pre>
   */
  public enum itemType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PLAYER_ATTR = 1;</code>
     *
     * <pre>
     * 玩家属性
     * </pre>
     */
    PLAYER_ATTR(0, 1),
    /**
     * <code>SKIN = 2;</code>
     *
     * <pre>
     * 角色皮膚
     * </pre>
     */
    SKIN(1, 2),
    /**
     * <code>TOOL = 3;</code>
     *
     * <pre>
     * 道具
     * </pre>
     */
    TOOL(2, 3),
    /**
     * <code>EQUIP = 4;</code>
     *
     * <pre>
     * 装备
     * </pre>
     */
    EQUIP(3, 4),
    /**
     * <code>SKILL = 5;</code>
     *
     * <pre>
     * 技能
     * </pre>
     */
    SKILL(4, 5),
    /**
     * <code>ELEMENT = 6;</code>
     *
     * <pre>
     * 元素
     * </pre>
     */
    ELEMENT(5, 6),
    /**
     * <code>SOUL = 7;</code>
     *
     * <pre>
     * 魂魄(佣兵)
     * </pre>
     */
    SOUL(6, 7),
    /**
     * <code>AVATAR = 8;</code>
     *
     * <pre>
     * 主角Avatar
     * </pre>
     */
    AVATAR(7, 8),
    /**
     * <code>BADGE = 9;</code>
     *
     * <pre>
     * 徽章
     * </pre>
     */
    BADGE(8, 9),
    ;

    /**
     * <code>PLAYER_ATTR = 1;</code>
     *
     * <pre>
     * 玩家属性
     * </pre>
     */
    public static final int PLAYER_ATTR_VALUE = 1;
    /**
     * <code>SKIN = 2;</code>
     *
     * <pre>
     * 角色皮膚
     * </pre>
     */
    public static final int SKIN_VALUE = 2;
    /**
     * <code>TOOL = 3;</code>
     *
     * <pre>
     * 道具
     * </pre>
     */
    public static final int TOOL_VALUE = 3;
    /**
     * <code>EQUIP = 4;</code>
     *
     * <pre>
     * 装备
     * </pre>
     */
    public static final int EQUIP_VALUE = 4;
    /**
     * <code>SKILL = 5;</code>
     *
     * <pre>
     * 技能
     * </pre>
     */
    public static final int SKILL_VALUE = 5;
    /**
     * <code>ELEMENT = 6;</code>
     *
     * <pre>
     * 元素
     * </pre>
     */
    public static final int ELEMENT_VALUE = 6;
    /**
     * <code>SOUL = 7;</code>
     *
     * <pre>
     * 魂魄(佣兵)
     * </pre>
     */
    public static final int SOUL_VALUE = 7;
    /**
     * <code>AVATAR = 8;</code>
     *
     * <pre>
     * 主角Avatar
     * </pre>
     */
    public static final int AVATAR_VALUE = 8;
    /**
     * <code>BADGE = 9;</code>
     *
     * <pre>
     * 徽章
     * </pre>
     */
    public static final int BADGE_VALUE = 9;


    public final int getNumber() { return value; }

    public static itemType valueOf(int value) {
      switch (value) {
        case 1: return PLAYER_ATTR;
        case 2: return SKIN;
        case 3: return TOOL;
        case 4: return EQUIP;
        case 5: return SKILL;
        case 6: return ELEMENT;
        case 7: return SOUL;
        case 8: return AVATAR;
        case 9: return BADGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<itemType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<itemType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<itemType>() {
            public itemType findValueByNumber(int number) {
              return itemType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(0);
    }

    private static final itemType[] VALUES = values();

    public static itemType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private itemType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:itemType)
  }

  /**
   * Protobuf enum {@code playerAttr}
   *
   * <pre>
   * 玩家属性类型定义
   * </pre>
   */
  public enum playerAttr
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>GOLD = 1001;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    GOLD(0, 1001),
    /**
     * <code>COIN = 1002;</code>
     *
     * <pre>
     * 金币
     * </pre>
     */
    COIN(1, 1002),
    /**
     * <code>LEVEL = 1003;</code>
     *
     * <pre>
     * 等级
     * </pre>
     */
    LEVEL(2, 1003),
    /**
     * <code>EXP = 1004;</code>
     *
     * <pre>
     * 经验
     * </pre>
     */
    EXP(3, 1004),
    /**
     * <code>VIPLEVEL = 1005;</code>
     *
     * <pre>
     * vip等级
     * </pre>
     */
    VIPLEVEL(4, 1005),
    /**
     * <code>SMELT_VALUE = 1006;</code>
     *
     * <pre>
     * 熔炼值
     * </pre>
     */
    SMELT_VALUE(5, 1006),
    /**
     * <code>CONTRIBUTION = 1007;</code>
     *
     * <pre>
     *贡献值
     * </pre>
     */
    CONTRIBUTION(6, 1007),
    /**
     * <code>ALLIANCE_EXP = 1008;</code>
     *
     * <pre>
     *公会经验
     * </pre>
     */
    ALLIANCE_EXP(7, 1008),
    /**
     * <code>BOSS_TIMES = 1009;</code>
     *
     * <pre>
     * boss挑战次数
     * </pre>
     */
    BOSS_TIMES(8, 1009),
    /**
     * <code>HONOR_VALUE = 1010;</code>
     *
     * <pre>
     * 荣誉值
     * </pre>
     */
    HONOR_VALUE(9, 1010),
    /**
     * <code>REPUTATION_VALUE = 1011;</code>
     *
     * <pre>
     * 声望值
     * </pre>
     */
    REPUTATION_VALUE(10, 1011),
    /**
     * <code>ELITE_MAP_TIMES = 1012;</code>
     *
     * <pre>
     * 精英副本调整次数
     * </pre>
     */
    ELITE_MAP_TIMES(11, 1012),
    /**
     * <code>MULTI_ELITE_SCORE = 1013;</code>
     *
     * <pre>
     * 多人副本积分(改了)
     * </pre>
     */
    MULTI_ELITE_SCORE(12, 1013),
    /**
     * <code>GOLD_BEAN = 1014;</code>
     *
     * <pre>
     *YAYA金豆
     * </pre>
     */
    GOLD_BEAN(13, 1014),
    /**
     * <code>CROSS_COIN = 1015;</code>
     *
     * <pre>
     * 跨服获取的货币
     * </pre>
     */
    CROSS_COIN(14, 1015),
    /**
     * <code>MULTI_ELITE_TIMES = 1016;</code>
     *
     * <pre>
     *多人副本挑戰次數
     * </pre>
     */
    MULTI_ELITE_TIMES(15, 1016),
    /**
     * <code>CRYSTAL_VALUE = 1020;</code>
     *
     * <pre>
     *水晶
     * </pre>
     */
    CRYSTAL_VALUE(16, 1020),
    /**
     * <code>ALLIANCE_VITALITY = 2001;</code>
     *
     * <pre>
     * 公会元气
     * </pre>
     */
    ALLIANCE_VITALITY(17, 2001),
    /**
     * <code>FASTFIGHT_TIMES = 9999;</code>
     *
     * <pre>
     * 快速战斗次数
     * </pre>
     */
    FASTFIGHT_TIMES(18, 9999),
    /**
     * <code>ROLE_SOUL = 1021;</code>
     *
     * <pre>
     * 佣兵魂魄
     * </pre>
     */
    ROLE_SOUL(19, 1021),
    /**
     * <code>BIG_MEDICALKIT = 1022;</code>
     *
     * <pre>
     * 18路诸侯药箱
     * </pre>
     */
    BIG_MEDICALKIT(20, 1022),
    /**
     * <code>MIDLE_MEDICALKIT = 1023;</code>
     */
    MIDLE_MEDICALKIT(21, 1023),
    /**
     * <code>SMALL_MEDICALKIT = 1024;</code>
     */
    SMALL_MEDICALKIT(22, 1024),
    /**
     * <code>FRIENDSHIP_VALUE = 1025;</code>
     *
     * <pre>
     * 友情值
     * </pre>
     */
    FRIENDSHIP_VALUE(23, 1025),
    /**
     * <code>VIPPOINT_VALUE = 1026;</code>
     *
     * <pre>
     * VIP點數
     * </pre>
     */
    VIPPOINT_VALUE(24, 1026),
    ;

    /**
     * <code>GOLD = 1001;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    public static final int GOLD_VALUE = 1001;
    /**
     * <code>COIN = 1002;</code>
     *
     * <pre>
     * 金币
     * </pre>
     */
    public static final int COIN_VALUE = 1002;
    /**
     * <code>LEVEL = 1003;</code>
     *
     * <pre>
     * 等级
     * </pre>
     */
    public static final int LEVEL_VALUE = 1003;
    /**
     * <code>EXP = 1004;</code>
     *
     * <pre>
     * 经验
     * </pre>
     */
    public static final int EXP_VALUE = 1004;
    /**
     * <code>VIPLEVEL = 1005;</code>
     *
     * <pre>
     * vip等级
     * </pre>
     */
    public static final int VIPLEVEL_VALUE = 1005;
    /**
     * <code>SMELT_VALUE = 1006;</code>
     *
     * <pre>
     * 熔炼值
     * </pre>
     */
    public static final int SMELT_VALUE_VALUE = 1006;
    /**
     * <code>CONTRIBUTION = 1007;</code>
     *
     * <pre>
     *贡献值
     * </pre>
     */
    public static final int CONTRIBUTION_VALUE = 1007;
    /**
     * <code>ALLIANCE_EXP = 1008;</code>
     *
     * <pre>
     *公会经验
     * </pre>
     */
    public static final int ALLIANCE_EXP_VALUE = 1008;
    /**
     * <code>BOSS_TIMES = 1009;</code>
     *
     * <pre>
     * boss挑战次数
     * </pre>
     */
    public static final int BOSS_TIMES_VALUE = 1009;
    /**
     * <code>HONOR_VALUE = 1010;</code>
     *
     * <pre>
     * 荣誉值
     * </pre>
     */
    public static final int HONOR_VALUE_VALUE = 1010;
    /**
     * <code>REPUTATION_VALUE = 1011;</code>
     *
     * <pre>
     * 声望值
     * </pre>
     */
    public static final int REPUTATION_VALUE_VALUE = 1011;
    /**
     * <code>ELITE_MAP_TIMES = 1012;</code>
     *
     * <pre>
     * 精英副本调整次数
     * </pre>
     */
    public static final int ELITE_MAP_TIMES_VALUE = 1012;
    /**
     * <code>MULTI_ELITE_SCORE = 1013;</code>
     *
     * <pre>
     * 多人副本积分(改了)
     * </pre>
     */
    public static final int MULTI_ELITE_SCORE_VALUE = 1013;
    /**
     * <code>GOLD_BEAN = 1014;</code>
     *
     * <pre>
     *YAYA金豆
     * </pre>
     */
    public static final int GOLD_BEAN_VALUE = 1014;
    /**
     * <code>CROSS_COIN = 1015;</code>
     *
     * <pre>
     * 跨服获取的货币
     * </pre>
     */
    public static final int CROSS_COIN_VALUE = 1015;
    /**
     * <code>MULTI_ELITE_TIMES = 1016;</code>
     *
     * <pre>
     *多人副本挑戰次數
     * </pre>
     */
    public static final int MULTI_ELITE_TIMES_VALUE = 1016;
    /**
     * <code>CRYSTAL_VALUE = 1020;</code>
     *
     * <pre>
     *水晶
     * </pre>
     */
    public static final int CRYSTAL_VALUE_VALUE = 1020;
    /**
     * <code>ALLIANCE_VITALITY = 2001;</code>
     *
     * <pre>
     * 公会元气
     * </pre>
     */
    public static final int ALLIANCE_VITALITY_VALUE = 2001;
    /**
     * <code>FASTFIGHT_TIMES = 9999;</code>
     *
     * <pre>
     * 快速战斗次数
     * </pre>
     */
    public static final int FASTFIGHT_TIMES_VALUE = 9999;
    /**
     * <code>ROLE_SOUL = 1021;</code>
     *
     * <pre>
     * 佣兵魂魄
     * </pre>
     */
    public static final int ROLE_SOUL_VALUE = 1021;
    /**
     * <code>BIG_MEDICALKIT = 1022;</code>
     *
     * <pre>
     * 18路诸侯药箱
     * </pre>
     */
    public static final int BIG_MEDICALKIT_VALUE = 1022;
    /**
     * <code>MIDLE_MEDICALKIT = 1023;</code>
     */
    public static final int MIDLE_MEDICALKIT_VALUE = 1023;
    /**
     * <code>SMALL_MEDICALKIT = 1024;</code>
     */
    public static final int SMALL_MEDICALKIT_VALUE = 1024;
    /**
     * <code>FRIENDSHIP_VALUE = 1025;</code>
     *
     * <pre>
     * 友情值
     * </pre>
     */
    public static final int FRIENDSHIP_VALUE_VALUE = 1025;
    /**
     * <code>VIPPOINT_VALUE = 1026;</code>
     *
     * <pre>
     * VIP點數
     * </pre>
     */
    public static final int VIPPOINT_VALUE_VALUE = 1026;


    public final int getNumber() { return value; }

    public static playerAttr valueOf(int value) {
      switch (value) {
        case 1001: return GOLD;
        case 1002: return COIN;
        case 1003: return LEVEL;
        case 1004: return EXP;
        case 1005: return VIPLEVEL;
        case 1006: return SMELT_VALUE;
        case 1007: return CONTRIBUTION;
        case 1008: return ALLIANCE_EXP;
        case 1009: return BOSS_TIMES;
        case 1010: return HONOR_VALUE;
        case 1011: return REPUTATION_VALUE;
        case 1012: return ELITE_MAP_TIMES;
        case 1013: return MULTI_ELITE_SCORE;
        case 1014: return GOLD_BEAN;
        case 1015: return CROSS_COIN;
        case 1016: return MULTI_ELITE_TIMES;
        case 1020: return CRYSTAL_VALUE;
        case 2001: return ALLIANCE_VITALITY;
        case 9999: return FASTFIGHT_TIMES;
        case 1021: return ROLE_SOUL;
        case 1022: return BIG_MEDICALKIT;
        case 1023: return MIDLE_MEDICALKIT;
        case 1024: return SMALL_MEDICALKIT;
        case 1025: return FRIENDSHIP_VALUE;
        case 1026: return VIPPOINT_VALUE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<playerAttr>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<playerAttr>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<playerAttr>() {
            public playerAttr findValueByNumber(int number) {
              return playerAttr.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(1);
    }

    private static final playerAttr[] VALUES = values();

    public static playerAttr valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private playerAttr(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:playerAttr)
  }

  /**
   * Protobuf enum {@code roleType}
   *
   * <pre>
   * 角色类型
   * </pre>
   */
  public enum roleType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MAIN_ROLE = 1;</code>
     *
     * <pre>
     * 主角
     * </pre>
     */
    MAIN_ROLE(0, 1),
    /**
     * <code>MERCENARY = 2;</code>
     *
     * <pre>
     * 佣兵
     * </pre>
     */
    MERCENARY(1, 2),
    /**
     * <code>MONSTER = 3;</code>
     *
     * <pre>
     * 怪物
     * </pre>
     */
    MONSTER(2, 3),
    /**
     * <code>RETINUE = 4;</code>
     *
     * <pre>
     * 隨從(免費英雄)
     * </pre>
     */
    RETINUE(3, 4),
    /**
     * <code>WORLDBOSS = 5;</code>
     *
     * <pre>
     * WorldBoss()
     * </pre>
     */
    WORLDBOSS(4, 5),
    ;

    /**
     * <code>MAIN_ROLE = 1;</code>
     *
     * <pre>
     * 主角
     * </pre>
     */
    public static final int MAIN_ROLE_VALUE = 1;
    /**
     * <code>MERCENARY = 2;</code>
     *
     * <pre>
     * 佣兵
     * </pre>
     */
    public static final int MERCENARY_VALUE = 2;
    /**
     * <code>MONSTER = 3;</code>
     *
     * <pre>
     * 怪物
     * </pre>
     */
    public static final int MONSTER_VALUE = 3;
    /**
     * <code>RETINUE = 4;</code>
     *
     * <pre>
     * 隨從(免費英雄)
     * </pre>
     */
    public static final int RETINUE_VALUE = 4;
    /**
     * <code>WORLDBOSS = 5;</code>
     *
     * <pre>
     * WorldBoss()
     * </pre>
     */
    public static final int WORLDBOSS_VALUE = 5;


    public final int getNumber() { return value; }

    public static roleType valueOf(int value) {
      switch (value) {
        case 1: return MAIN_ROLE;
        case 2: return MERCENARY;
        case 3: return MONSTER;
        case 4: return RETINUE;
        case 5: return WORLDBOSS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<roleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<roleType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<roleType>() {
            public roleType findValueByNumber(int number) {
              return roleType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(2);
    }

    private static final roleType[] VALUES = values();

    public static roleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private roleType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:roleType)
  }

  /**
   * Protobuf enum {@code chatType}
   *
   * <pre>
   * 聊天类型
   * </pre>
   */
  public enum chatType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CHAT_WORLD = 0;</code>
     *
     * <pre>
     * 世界个人聊天
     * </pre>
     */
    CHAT_WORLD(0, 0),
    /**
     * <code>CHAT_ALLIANCE = 1;</code>
     *
     * <pre>
     * 公会个人聊天
     * </pre>
     */
    CHAT_ALLIANCE(1, 1),
    /**
     * <code>CHAT_BROADCAST = 2;</code>
     *
     * <pre>
     * 世界系统广播
     * </pre>
     */
    CHAT_BROADCAST(2, 2),
    /**
     * <code>WORLD_BROADCAST = 3;</code>
     *
     * <pre>
     * 主页（跑马灯）系统广播
     * </pre>
     */
    WORLD_BROADCAST(3, 3),
    /**
     * <code>CHAT_PERSONAL = 4;</code>
     *
     * <pre>
     * 个人聊天
     * </pre>
     */
    CHAT_PERSONAL(4, 4),
    /**
     * <code>CHAT_ALLIANCE_SYSTEM = 5;</code>
     *
     * <pre>
     * 公会系统广播
     * </pre>
     */
    CHAT_ALLIANCE_SYSTEM(5, 5),
    /**
     * <code>CHAT_PERSONAL_SYSTEM = 6;</code>
     *
     * <pre>
     *私聊系统提示
     * </pre>
     */
    CHAT_PERSONAL_SYSTEM(6, 6),
    /**
     * <code>CHAT_CROSS_PVP = 7;</code>
     *
     * <pre>
     *跨服聊天
     * </pre>
     */
    CHAT_CROSS_PVP(7, 7),
    ;

    /**
     * <code>CHAT_WORLD = 0;</code>
     *
     * <pre>
     * 世界个人聊天
     * </pre>
     */
    public static final int CHAT_WORLD_VALUE = 0;
    /**
     * <code>CHAT_ALLIANCE = 1;</code>
     *
     * <pre>
     * 公会个人聊天
     * </pre>
     */
    public static final int CHAT_ALLIANCE_VALUE = 1;
    /**
     * <code>CHAT_BROADCAST = 2;</code>
     *
     * <pre>
     * 世界系统广播
     * </pre>
     */
    public static final int CHAT_BROADCAST_VALUE = 2;
    /**
     * <code>WORLD_BROADCAST = 3;</code>
     *
     * <pre>
     * 主页（跑马灯）系统广播
     * </pre>
     */
    public static final int WORLD_BROADCAST_VALUE = 3;
    /**
     * <code>CHAT_PERSONAL = 4;</code>
     *
     * <pre>
     * 个人聊天
     * </pre>
     */
    public static final int CHAT_PERSONAL_VALUE = 4;
    /**
     * <code>CHAT_ALLIANCE_SYSTEM = 5;</code>
     *
     * <pre>
     * 公会系统广播
     * </pre>
     */
    public static final int CHAT_ALLIANCE_SYSTEM_VALUE = 5;
    /**
     * <code>CHAT_PERSONAL_SYSTEM = 6;</code>
     *
     * <pre>
     *私聊系统提示
     * </pre>
     */
    public static final int CHAT_PERSONAL_SYSTEM_VALUE = 6;
    /**
     * <code>CHAT_CROSS_PVP = 7;</code>
     *
     * <pre>
     *跨服聊天
     * </pre>
     */
    public static final int CHAT_CROSS_PVP_VALUE = 7;


    public final int getNumber() { return value; }

    public static chatType valueOf(int value) {
      switch (value) {
        case 0: return CHAT_WORLD;
        case 1: return CHAT_ALLIANCE;
        case 2: return CHAT_BROADCAST;
        case 3: return WORLD_BROADCAST;
        case 4: return CHAT_PERSONAL;
        case 5: return CHAT_ALLIANCE_SYSTEM;
        case 6: return CHAT_PERSONAL_SYSTEM;
        case 7: return CHAT_CROSS_PVP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<chatType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<chatType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<chatType>() {
            public chatType findValueByNumber(int number) {
              return chatType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(3);
    }

    private static final chatType[] VALUES = values();

    public static chatType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private chatType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:chatType)
  }

  /**
   * Protobuf enum {@code toolType}
   *
   * <pre>
   * 物品类型定义
   * </pre>
   */
  public enum toolType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NORMAL = 0;</code>
     *
     * <pre>
     * 普通类型
     * </pre>
     */
    NORMAL(0, 0),
    /**
     * <code>FRAGMENT = 1;</code>
     *
     * <pre>
     * 碎片
     * </pre>
     */
    FRAGMENT(1, 1),
    /**
     * <code>GEM = 2;</code>
     *
     * <pre>
     * 宝石
     * </pre>
     */
    GEM(2, 2),
    /**
     * <code>HAMMER = 3;</code>
     *
     * <pre>
     * 锤子
     * </pre>
     */
    HAMMER(3, 3),
    /**
     * <code>TREASURE = 4;</code>
     *
     * <pre>
     * 宝箱
     * </pre>
     */
    TREASURE(4, 4),
    /**
     * <code>KEY = 5;</code>
     *
     * <pre>
     * 钥匙
     * </pre>
     */
    KEY(5, 5),
    /**
     * <code>ELITE = 6;</code>
     *
     * <pre>
     * 精华
     * </pre>
     */
    ELITE(6, 6),
    /**
     * <code>GIFT = 7;</code>
     *
     * <pre>
     * 礼包
     * </pre>
     */
    GIFT(7, 7),
    /**
     * <code>GEM_PACKAGE = 8;</code>
     *
     * <pre>
     * 宝石袋
     * </pre>
     */
    GEM_PACKAGE(8, 8),
    /**
     * <code>WORDS_EXCHANGE_NORMAL = 9;</code>
     *
     * <pre>
     * 文字兑换
     * </pre>
     */
    WORDS_EXCHANGE_NORMAL(9, 9),
    /**
     * <code>WORDS_EXCHANGE_SPECIAL = 10;</code>
     *
     * <pre>
     * 公测文字兑换
     * </pre>
     */
    WORDS_EXCHANGE_SPECIAL(10, 10),
    /**
     * <code>BOSS_CHALLENGE_TIMES = 11;</code>
     *
     * <pre>
     * boss挑战次数
     * </pre>
     */
    BOSS_CHALLENGE_TIMES(11, 11),
    /**
     * <code>LUCK_TREASURE = 12;</code>
     *
     * <pre>
     * 幸运宝箱
     * </pre>
     */
    LUCK_TREASURE(12, 12),
    /**
     * <code>SOUL_STONE = 13;</code>
     *
     * <pre>
     * 魂石
     * </pre>
     */
    SOUL_STONE(13, 13),
    /**
     * <code>ELITE_MAP_BOOK = 14;</code>
     *
     * <pre>
     * 精英副本调整次数
     * </pre>
     */
    ELITE_MAP_BOOK(14, 14),
    /**
     * <code>ALLOANCE_VITALITY_PILL = 15;</code>
     *
     * <pre>
     * 魔兽元气丹
     * </pre>
     */
    ALLOANCE_VITALITY_PILL(15, 15),
    /**
     * <code>GOODS_COMPOUND = 16;</code>
     *
     * <pre>
     *专精符文合成
     * </pre>
     */
    GOODS_COMPOUND(16, 16),
    /**
     * <code>COMMON_GODLY_EXP = 17;</code>
     *
     * <pre>
     * 普通神器经验石
     * </pre>
     */
    COMMON_GODLY_EXP(17, 17),
    /**
     * <code>REPUTATION_GODLY_EXP = 18;</code>
     *
     * <pre>
     * 声望神器经验石
     * </pre>
     */
    REPUTATION_GODLY_EXP(18, 18),
    /**
     * <code>SUIT_FRAGMENT = 19;</code>
     *
     * <pre>
     * 套装碎片合成
     * </pre>
     */
    SUIT_FRAGMENT(19, 19),
    /**
     * <code>EQUIP_EXCHANGE = 20;</code>
     *
     * <pre>
     * 装备兑换道具
     * </pre>
     */
    EQUIP_EXCHANGE(20, 20),
    /**
     * <code>ELEMENT_EXCHANGE = 21;</code>
     *
     * <pre>
     * 元素兑换道具
     * </pre>
     */
    ELEMENT_EXCHANGE(21, 21),
    /**
     * <code>HERO_TOKEN = 22;</code>
     *
     * <pre>
     * 英雄令
     * </pre>
     */
    HERO_TOKEN(22, 22),
    /**
     * <code>FEATHER = 23;</code>
     *
     * <pre>
     * 羽毛
     * </pre>
     */
    FEATHER(23, 23),
    /**
     * <code>ELEMENT_FRAGMENT = 24;</code>
     *
     * <pre>
     * 元素印记碎片
     * </pre>
     */
    ELEMENT_FRAGMENT(24, 24),
    /**
     * <code>EXPEDITION_ARMORY_ITEM = 25;</code>
     *
     * <pre>
     * 远征物资
     * </pre>
     */
    EXPEDITION_ARMORY_ITEM(25, 25),
    /**
     * <code>HOUR_PLACENENT_CARD = 26;</code>
     *
     * <pre>
     * 小时卡
     * </pre>
     */
    HOUR_PLACENENT_CARD(26, 26),
    /**
     * <code>EXP_REEL = 27;</code>
     *
     * <pre>
     * 经验卷轴
     * </pre>
     */
    EXP_REEL(27, 27),
    /**
     * <code>TREASURE_SELITEM = 28;</code>
     *
     * <pre>
     * 开宝箱随机选取
     * </pre>
     */
    TREASURE_SELITEM(28, 28),
    /**
     * <code>GEM_VOLUME = 35;</code>
     *
     * <pre>
     * 宝石卷
     * </pre>
     */
    GEM_VOLUME(29, 35),
    /**
     * <code>SUIT_DRAWING = 36;</code>
     *
     * <pre>
     *装备图纸
     * </pre>
     */
    SUIT_DRAWING(30, 36),
    /**
     * <code>AVATAR_GIFT = 37;</code>
     *
     * <pre>
     *主角Avatar
     * </pre>
     */
    AVATAR_GIFT(31, 37),
    /**
     * <code>MULTIELITE_CHALLENGE_TIMES = 38;</code>
     *
     * <pre>
     * 多人副本挑战次数
     * </pre>
     */
    MULTIELITE_CHALLENGE_TIMES(32, 38),
    /**
     * <code>QUICK_GOLD = 39;</code>
     *
     * <pre>
     * 快速金幣收益
     * </pre>
     */
    QUICK_GOLD(33, 39),
    /**
     * <code>QUICK_EXP = 40;</code>
     *
     * <pre>
     * 快速經驗收益
     * </pre>
     */
    QUICK_EXP(34, 40),
    /**
     * <code>QUICK_STONE = 41;</code>
     *
     * <pre>
     * 快速突破石收益
     * </pre>
     */
    QUICK_STONE(35, 41),
    /**
     * <code>FAKE_ITEMS = 99;</code>
     *
     * <pre>
     * 假道具(client 顯示用)
     * </pre>
     */
    FAKE_ITEMS(36, 99),
    /**
     * <code>RECYCLE_SEVEN_ITEM = 100;</code>
     *
     * <pre>
     *回收道具七夕
     * </pre>
     */
    RECYCLE_SEVEN_ITEM(37, 100),
    /**
     * <code>FASTFIGHT_TIMES_BOOK = 101;</code>
     *
     * <pre>
     * 快速战斗次数
     * </pre>
     */
    FASTFIGHT_TIMES_BOOK(38, 101),
    ;

    /**
     * <code>NORMAL = 0;</code>
     *
     * <pre>
     * 普通类型
     * </pre>
     */
    public static final int NORMAL_VALUE = 0;
    /**
     * <code>FRAGMENT = 1;</code>
     *
     * <pre>
     * 碎片
     * </pre>
     */
    public static final int FRAGMENT_VALUE = 1;
    /**
     * <code>GEM = 2;</code>
     *
     * <pre>
     * 宝石
     * </pre>
     */
    public static final int GEM_VALUE = 2;
    /**
     * <code>HAMMER = 3;</code>
     *
     * <pre>
     * 锤子
     * </pre>
     */
    public static final int HAMMER_VALUE = 3;
    /**
     * <code>TREASURE = 4;</code>
     *
     * <pre>
     * 宝箱
     * </pre>
     */
    public static final int TREASURE_VALUE = 4;
    /**
     * <code>KEY = 5;</code>
     *
     * <pre>
     * 钥匙
     * </pre>
     */
    public static final int KEY_VALUE = 5;
    /**
     * <code>ELITE = 6;</code>
     *
     * <pre>
     * 精华
     * </pre>
     */
    public static final int ELITE_VALUE = 6;
    /**
     * <code>GIFT = 7;</code>
     *
     * <pre>
     * 礼包
     * </pre>
     */
    public static final int GIFT_VALUE = 7;
    /**
     * <code>GEM_PACKAGE = 8;</code>
     *
     * <pre>
     * 宝石袋
     * </pre>
     */
    public static final int GEM_PACKAGE_VALUE = 8;
    /**
     * <code>WORDS_EXCHANGE_NORMAL = 9;</code>
     *
     * <pre>
     * 文字兑换
     * </pre>
     */
    public static final int WORDS_EXCHANGE_NORMAL_VALUE = 9;
    /**
     * <code>WORDS_EXCHANGE_SPECIAL = 10;</code>
     *
     * <pre>
     * 公测文字兑换
     * </pre>
     */
    public static final int WORDS_EXCHANGE_SPECIAL_VALUE = 10;
    /**
     * <code>BOSS_CHALLENGE_TIMES = 11;</code>
     *
     * <pre>
     * boss挑战次数
     * </pre>
     */
    public static final int BOSS_CHALLENGE_TIMES_VALUE = 11;
    /**
     * <code>LUCK_TREASURE = 12;</code>
     *
     * <pre>
     * 幸运宝箱
     * </pre>
     */
    public static final int LUCK_TREASURE_VALUE = 12;
    /**
     * <code>SOUL_STONE = 13;</code>
     *
     * <pre>
     * 魂石
     * </pre>
     */
    public static final int SOUL_STONE_VALUE = 13;
    /**
     * <code>ELITE_MAP_BOOK = 14;</code>
     *
     * <pre>
     * 精英副本调整次数
     * </pre>
     */
    public static final int ELITE_MAP_BOOK_VALUE = 14;
    /**
     * <code>ALLOANCE_VITALITY_PILL = 15;</code>
     *
     * <pre>
     * 魔兽元气丹
     * </pre>
     */
    public static final int ALLOANCE_VITALITY_PILL_VALUE = 15;
    /**
     * <code>GOODS_COMPOUND = 16;</code>
     *
     * <pre>
     *专精符文合成
     * </pre>
     */
    public static final int GOODS_COMPOUND_VALUE = 16;
    /**
     * <code>COMMON_GODLY_EXP = 17;</code>
     *
     * <pre>
     * 普通神器经验石
     * </pre>
     */
    public static final int COMMON_GODLY_EXP_VALUE = 17;
    /**
     * <code>REPUTATION_GODLY_EXP = 18;</code>
     *
     * <pre>
     * 声望神器经验石
     * </pre>
     */
    public static final int REPUTATION_GODLY_EXP_VALUE = 18;
    /**
     * <code>SUIT_FRAGMENT = 19;</code>
     *
     * <pre>
     * 套装碎片合成
     * </pre>
     */
    public static final int SUIT_FRAGMENT_VALUE = 19;
    /**
     * <code>EQUIP_EXCHANGE = 20;</code>
     *
     * <pre>
     * 装备兑换道具
     * </pre>
     */
    public static final int EQUIP_EXCHANGE_VALUE = 20;
    /**
     * <code>ELEMENT_EXCHANGE = 21;</code>
     *
     * <pre>
     * 元素兑换道具
     * </pre>
     */
    public static final int ELEMENT_EXCHANGE_VALUE = 21;
    /**
     * <code>HERO_TOKEN = 22;</code>
     *
     * <pre>
     * 英雄令
     * </pre>
     */
    public static final int HERO_TOKEN_VALUE = 22;
    /**
     * <code>FEATHER = 23;</code>
     *
     * <pre>
     * 羽毛
     * </pre>
     */
    public static final int FEATHER_VALUE = 23;
    /**
     * <code>ELEMENT_FRAGMENT = 24;</code>
     *
     * <pre>
     * 元素印记碎片
     * </pre>
     */
    public static final int ELEMENT_FRAGMENT_VALUE = 24;
    /**
     * <code>EXPEDITION_ARMORY_ITEM = 25;</code>
     *
     * <pre>
     * 远征物资
     * </pre>
     */
    public static final int EXPEDITION_ARMORY_ITEM_VALUE = 25;
    /**
     * <code>HOUR_PLACENENT_CARD = 26;</code>
     *
     * <pre>
     * 小时卡
     * </pre>
     */
    public static final int HOUR_PLACENENT_CARD_VALUE = 26;
    /**
     * <code>EXP_REEL = 27;</code>
     *
     * <pre>
     * 经验卷轴
     * </pre>
     */
    public static final int EXP_REEL_VALUE = 27;
    /**
     * <code>TREASURE_SELITEM = 28;</code>
     *
     * <pre>
     * 开宝箱随机选取
     * </pre>
     */
    public static final int TREASURE_SELITEM_VALUE = 28;
    /**
     * <code>GEM_VOLUME = 35;</code>
     *
     * <pre>
     * 宝石卷
     * </pre>
     */
    public static final int GEM_VOLUME_VALUE = 35;
    /**
     * <code>SUIT_DRAWING = 36;</code>
     *
     * <pre>
     *装备图纸
     * </pre>
     */
    public static final int SUIT_DRAWING_VALUE = 36;
    /**
     * <code>AVATAR_GIFT = 37;</code>
     *
     * <pre>
     *主角Avatar
     * </pre>
     */
    public static final int AVATAR_GIFT_VALUE = 37;
    /**
     * <code>MULTIELITE_CHALLENGE_TIMES = 38;</code>
     *
     * <pre>
     * 多人副本挑战次数
     * </pre>
     */
    public static final int MULTIELITE_CHALLENGE_TIMES_VALUE = 38;
    /**
     * <code>QUICK_GOLD = 39;</code>
     *
     * <pre>
     * 快速金幣收益
     * </pre>
     */
    public static final int QUICK_GOLD_VALUE = 39;
    /**
     * <code>QUICK_EXP = 40;</code>
     *
     * <pre>
     * 快速經驗收益
     * </pre>
     */
    public static final int QUICK_EXP_VALUE = 40;
    /**
     * <code>QUICK_STONE = 41;</code>
     *
     * <pre>
     * 快速突破石收益
     * </pre>
     */
    public static final int QUICK_STONE_VALUE = 41;
    /**
     * <code>FAKE_ITEMS = 99;</code>
     *
     * <pre>
     * 假道具(client 顯示用)
     * </pre>
     */
    public static final int FAKE_ITEMS_VALUE = 99;
    /**
     * <code>RECYCLE_SEVEN_ITEM = 100;</code>
     *
     * <pre>
     *回收道具七夕
     * </pre>
     */
    public static final int RECYCLE_SEVEN_ITEM_VALUE = 100;
    /**
     * <code>FASTFIGHT_TIMES_BOOK = 101;</code>
     *
     * <pre>
     * 快速战斗次数
     * </pre>
     */
    public static final int FASTFIGHT_TIMES_BOOK_VALUE = 101;


    public final int getNumber() { return value; }

    public static toolType valueOf(int value) {
      switch (value) {
        case 0: return NORMAL;
        case 1: return FRAGMENT;
        case 2: return GEM;
        case 3: return HAMMER;
        case 4: return TREASURE;
        case 5: return KEY;
        case 6: return ELITE;
        case 7: return GIFT;
        case 8: return GEM_PACKAGE;
        case 9: return WORDS_EXCHANGE_NORMAL;
        case 10: return WORDS_EXCHANGE_SPECIAL;
        case 11: return BOSS_CHALLENGE_TIMES;
        case 12: return LUCK_TREASURE;
        case 13: return SOUL_STONE;
        case 14: return ELITE_MAP_BOOK;
        case 15: return ALLOANCE_VITALITY_PILL;
        case 16: return GOODS_COMPOUND;
        case 17: return COMMON_GODLY_EXP;
        case 18: return REPUTATION_GODLY_EXP;
        case 19: return SUIT_FRAGMENT;
        case 20: return EQUIP_EXCHANGE;
        case 21: return ELEMENT_EXCHANGE;
        case 22: return HERO_TOKEN;
        case 23: return FEATHER;
        case 24: return ELEMENT_FRAGMENT;
        case 25: return EXPEDITION_ARMORY_ITEM;
        case 26: return HOUR_PLACENENT_CARD;
        case 27: return EXP_REEL;
        case 28: return TREASURE_SELITEM;
        case 35: return GEM_VOLUME;
        case 36: return SUIT_DRAWING;
        case 37: return AVATAR_GIFT;
        case 38: return MULTIELITE_CHALLENGE_TIMES;
        case 39: return QUICK_GOLD;
        case 40: return QUICK_EXP;
        case 41: return QUICK_STONE;
        case 99: return FAKE_ITEMS;
        case 100: return RECYCLE_SEVEN_ITEM;
        case 101: return FASTFIGHT_TIMES_BOOK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<toolType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<toolType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<toolType>() {
            public toolType findValueByNumber(int number) {
              return toolType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(4);
    }

    private static final toolType[] VALUES = values();

    public static toolType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private toolType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:toolType)
  }

  /**
   * Protobuf enum {@code equipPart}
   *
   * <pre>
   * 装备部位定义
   * </pre>
   */
  public enum equipPart
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HELMET = 1;</code>
     *
     * <pre>
     * 头盔
     * </pre>
     */
    HELMET(0, 1),
    /**
     * <code>RING = 2;</code>
     *
     * <pre>
     * 戒子
     * </pre>
     */
    RING(1, 2),
    /**
     * <code>BELT = 3;</code>
     *
     * <pre>
     * 腰带
     * </pre>
     */
    BELT(2, 3),
    /**
     * <code>CUIRASS = 4;</code>
     *
     * <pre>
     * 胸甲
     * </pre>
     */
    CUIRASS(3, 4),
    /**
     * <code>WEAPON1 = 5;</code>
     *
     * <pre>
     * 主手武器
     * </pre>
     */
    WEAPON1(4, 5),
    /**
     * <code>WEAPON2 = 6;</code>
     *
     * <pre>
     * 副手武器
     * </pre>
     */
    WEAPON2(5, 6),
    /**
     * <code>LEGGUARD = 7;</code>
     *
     * <pre>
     * 护腿
     * </pre>
     */
    LEGGUARD(6, 7),
    /**
     * <code>SHOES = 8;</code>
     *
     * <pre>
     * 鞋子
     * </pre>
     */
    SHOES(7, 8),
    /**
     * <code>GLOVE = 9;</code>
     *
     * <pre>
     * 手套
     * </pre>
     */
    GLOVE(8, 9),
    /**
     * <code>NECKLACE = 10;</code>
     *
     * <pre>
     * 项链
     * </pre>
     */
    NECKLACE(9, 10),
    ;

    /**
     * <code>HELMET = 1;</code>
     *
     * <pre>
     * 头盔
     * </pre>
     */
    public static final int HELMET_VALUE = 1;
    /**
     * <code>RING = 2;</code>
     *
     * <pre>
     * 戒子
     * </pre>
     */
    public static final int RING_VALUE = 2;
    /**
     * <code>BELT = 3;</code>
     *
     * <pre>
     * 腰带
     * </pre>
     */
    public static final int BELT_VALUE = 3;
    /**
     * <code>CUIRASS = 4;</code>
     *
     * <pre>
     * 胸甲
     * </pre>
     */
    public static final int CUIRASS_VALUE = 4;
    /**
     * <code>WEAPON1 = 5;</code>
     *
     * <pre>
     * 主手武器
     * </pre>
     */
    public static final int WEAPON1_VALUE = 5;
    /**
     * <code>WEAPON2 = 6;</code>
     *
     * <pre>
     * 副手武器
     * </pre>
     */
    public static final int WEAPON2_VALUE = 6;
    /**
     * <code>LEGGUARD = 7;</code>
     *
     * <pre>
     * 护腿
     * </pre>
     */
    public static final int LEGGUARD_VALUE = 7;
    /**
     * <code>SHOES = 8;</code>
     *
     * <pre>
     * 鞋子
     * </pre>
     */
    public static final int SHOES_VALUE = 8;
    /**
     * <code>GLOVE = 9;</code>
     *
     * <pre>
     * 手套
     * </pre>
     */
    public static final int GLOVE_VALUE = 9;
    /**
     * <code>NECKLACE = 10;</code>
     *
     * <pre>
     * 项链
     * </pre>
     */
    public static final int NECKLACE_VALUE = 10;


    public final int getNumber() { return value; }

    public static equipPart valueOf(int value) {
      switch (value) {
        case 1: return HELMET;
        case 2: return RING;
        case 3: return BELT;
        case 4: return CUIRASS;
        case 5: return WEAPON1;
        case 6: return WEAPON2;
        case 7: return LEGGUARD;
        case 8: return SHOES;
        case 9: return GLOVE;
        case 10: return NECKLACE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<equipPart>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<equipPart>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<equipPart>() {
            public equipPart findValueByNumber(int number) {
              return equipPart.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(5);
    }

    private static final equipPart[] VALUES = values();

    public static equipPart valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private equipPart(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:equipPart)
  }

  /**
   * Protobuf enum {@code equipQuality}
   *
   * <pre>
   * 装备品质
   * </pre>
   */
  public enum equipQuality
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WHITE = 1;</code>
     *
     * <pre>
     * 白
     * </pre>
     */
    WHITE(0, 1),
    /**
     * <code>GREEN = 2;</code>
     *
     * <pre>
     * 绿
     * </pre>
     */
    GREEN(1, 2),
    /**
     * <code>BLUE = 3;</code>
     *
     * <pre>
     * 蓝
     * </pre>
     */
    BLUE(2, 3),
    /**
     * <code>PURPLE = 4;</code>
     *
     * <pre>
     * 紫
     * </pre>
     */
    PURPLE(3, 4),
    /**
     * <code>ORANGE = 5;</code>
     *
     * <pre>
     * 橙
     * </pre>
     */
    ORANGE(4, 5),
    /**
     * <code>RED = 6;</code>
     *
     * <pre>
     * 紅
     * </pre>
     */
    RED(5, 6),
    ;

    /**
     * <code>WHITE = 1;</code>
     *
     * <pre>
     * 白
     * </pre>
     */
    public static final int WHITE_VALUE = 1;
    /**
     * <code>GREEN = 2;</code>
     *
     * <pre>
     * 绿
     * </pre>
     */
    public static final int GREEN_VALUE = 2;
    /**
     * <code>BLUE = 3;</code>
     *
     * <pre>
     * 蓝
     * </pre>
     */
    public static final int BLUE_VALUE = 3;
    /**
     * <code>PURPLE = 4;</code>
     *
     * <pre>
     * 紫
     * </pre>
     */
    public static final int PURPLE_VALUE = 4;
    /**
     * <code>ORANGE = 5;</code>
     *
     * <pre>
     * 橙
     * </pre>
     */
    public static final int ORANGE_VALUE = 5;
    /**
     * <code>RED = 6;</code>
     *
     * <pre>
     * 紅
     * </pre>
     */
    public static final int RED_VALUE = 6;


    public final int getNumber() { return value; }

    public static equipQuality valueOf(int value) {
      switch (value) {
        case 1: return WHITE;
        case 2: return GREEN;
        case 3: return BLUE;
        case 4: return PURPLE;
        case 5: return ORANGE;
        case 6: return RED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<equipQuality>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<equipQuality>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<equipQuality>() {
            public equipQuality findValueByNumber(int number) {
              return equipQuality.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(6);
    }

    private static final equipQuality[] VALUES = values();

    public static equipQuality valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private equipQuality(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:equipQuality)
  }

  /**
   * Protobuf enum {@code equipAutoSell}
   *
   * <pre>
   * 装备自动售出
   * </pre>
   */
  public enum equipAutoSell
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>AUTO_SELL_WHITE = 1;</code>
     *
     * <pre>
     * 白装自动售出
     * </pre>
     */
    AUTO_SELL_WHITE(0, 1),
    /**
     * <code>AUTO_SELL_GREEN = 2;</code>
     *
     * <pre>
     * 绿装自动售出
     * </pre>
     */
    AUTO_SELL_GREEN(1, 2),
    /**
     * <code>AUTO_SELL_BLUE = 4;</code>
     *
     * <pre>
     * 蓝装自动售出
     * </pre>
     */
    AUTO_SELL_BLUE(2, 4),
    /**
     * <code>AUTO_SELL_PURPLE = 8;</code>
     *
     * <pre>
     * 紫装自动售出
     * </pre>
     */
    AUTO_SELL_PURPLE(3, 8),
    /**
     * <code>AUTO_SELL_DIFF_PROF = 16;</code>
     *
     * <pre>
     * 非本职业
     * </pre>
     */
    AUTO_SELL_DIFF_PROF(4, 16),
    ;

    /**
     * <code>AUTO_SELL_WHITE = 1;</code>
     *
     * <pre>
     * 白装自动售出
     * </pre>
     */
    public static final int AUTO_SELL_WHITE_VALUE = 1;
    /**
     * <code>AUTO_SELL_GREEN = 2;</code>
     *
     * <pre>
     * 绿装自动售出
     * </pre>
     */
    public static final int AUTO_SELL_GREEN_VALUE = 2;
    /**
     * <code>AUTO_SELL_BLUE = 4;</code>
     *
     * <pre>
     * 蓝装自动售出
     * </pre>
     */
    public static final int AUTO_SELL_BLUE_VALUE = 4;
    /**
     * <code>AUTO_SELL_PURPLE = 8;</code>
     *
     * <pre>
     * 紫装自动售出
     * </pre>
     */
    public static final int AUTO_SELL_PURPLE_VALUE = 8;
    /**
     * <code>AUTO_SELL_DIFF_PROF = 16;</code>
     *
     * <pre>
     * 非本职业
     * </pre>
     */
    public static final int AUTO_SELL_DIFF_PROF_VALUE = 16;


    public final int getNumber() { return value; }

    public static equipAutoSell valueOf(int value) {
      switch (value) {
        case 1: return AUTO_SELL_WHITE;
        case 2: return AUTO_SELL_GREEN;
        case 4: return AUTO_SELL_BLUE;
        case 8: return AUTO_SELL_PURPLE;
        case 16: return AUTO_SELL_DIFF_PROF;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<equipAutoSell>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<equipAutoSell>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<equipAutoSell>() {
            public equipAutoSell findValueByNumber(int number) {
              return equipAutoSell.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(7);
    }

    private static final equipAutoSell[] VALUES = values();

    public static equipAutoSell valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private equipAutoSell(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:equipAutoSell)
  }

  /**
   * Protobuf enum {@code elementQuality}
   *
   * <pre>
   * 装备品质
   * </pre>
   */
  public enum elementQuality
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ELEMENT_WHITE = 1;</code>
     *
     * <pre>
     * 白
     * </pre>
     */
    ELEMENT_WHITE(0, 1),
    /**
     * <code>ELEMENT_GREEN = 2;</code>
     *
     * <pre>
     * 绿
     * </pre>
     */
    ELEMENT_GREEN(1, 2),
    /**
     * <code>ELEMENT_BLUE = 3;</code>
     *
     * <pre>
     * 蓝
     * </pre>
     */
    ELEMENT_BLUE(2, 3),
    /**
     * <code>ELEMENT_PURPLE = 4;</code>
     *
     * <pre>
     * 紫
     * </pre>
     */
    ELEMENT_PURPLE(3, 4),
    /**
     * <code>ELEMENT_ORANGE = 5;</code>
     *
     * <pre>
     * 橙
     * </pre>
     */
    ELEMENT_ORANGE(4, 5),
    /**
     * <code>ELEMENT_RED = 6;</code>
     *
     * <pre>
     * 紅
     * </pre>
     */
    ELEMENT_RED(5, 6),
    ;

    /**
     * <code>ELEMENT_WHITE = 1;</code>
     *
     * <pre>
     * 白
     * </pre>
     */
    public static final int ELEMENT_WHITE_VALUE = 1;
    /**
     * <code>ELEMENT_GREEN = 2;</code>
     *
     * <pre>
     * 绿
     * </pre>
     */
    public static final int ELEMENT_GREEN_VALUE = 2;
    /**
     * <code>ELEMENT_BLUE = 3;</code>
     *
     * <pre>
     * 蓝
     * </pre>
     */
    public static final int ELEMENT_BLUE_VALUE = 3;
    /**
     * <code>ELEMENT_PURPLE = 4;</code>
     *
     * <pre>
     * 紫
     * </pre>
     */
    public static final int ELEMENT_PURPLE_VALUE = 4;
    /**
     * <code>ELEMENT_ORANGE = 5;</code>
     *
     * <pre>
     * 橙
     * </pre>
     */
    public static final int ELEMENT_ORANGE_VALUE = 5;
    /**
     * <code>ELEMENT_RED = 6;</code>
     *
     * <pre>
     * 紅
     * </pre>
     */
    public static final int ELEMENT_RED_VALUE = 6;


    public final int getNumber() { return value; }

    public static elementQuality valueOf(int value) {
      switch (value) {
        case 1: return ELEMENT_WHITE;
        case 2: return ELEMENT_GREEN;
        case 3: return ELEMENT_BLUE;
        case 4: return ELEMENT_PURPLE;
        case 5: return ELEMENT_ORANGE;
        case 6: return ELEMENT_RED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<elementQuality>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<elementQuality>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<elementQuality>() {
            public elementQuality findValueByNumber(int number) {
              return elementQuality.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(8);
    }

    private static final elementQuality[] VALUES = values();

    public static elementQuality valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private elementQuality(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:elementQuality)
  }

  /**
   * Protobuf enum {@code elementAutoSell}
   *
   * <pre>
   * 装备自动售出
   * </pre>
   */
  public enum elementAutoSell
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>AUTO_SELL_ELEMENT_WHITE = 1;</code>
     *
     * <pre>
     * 白装自动售出
     * </pre>
     */
    AUTO_SELL_ELEMENT_WHITE(0, 1),
    /**
     * <code>AUTO_SELL_ELEMENT_GREEN = 2;</code>
     *
     * <pre>
     * 绿装自动售出
     * </pre>
     */
    AUTO_SELL_ELEMENT_GREEN(1, 2),
    /**
     * <code>AUTO_SELL_ELEMENT_BLUE = 4;</code>
     *
     * <pre>
     * 蓝装自动售出
     * </pre>
     */
    AUTO_SELL_ELEMENT_BLUE(2, 4),
    /**
     * <code>AUTO_SELL_ELEMENT_PURPLE = 8;</code>
     *
     * <pre>
     * 紫装自动售出
     * </pre>
     */
    AUTO_SELL_ELEMENT_PURPLE(3, 8),
    /**
     * <code>AUTO_SELL_ELEMENT_DIFF_PROF = 16;</code>
     *
     * <pre>
     * 非本职业
     * </pre>
     */
    AUTO_SELL_ELEMENT_DIFF_PROF(4, 16),
    ;

    /**
     * <code>AUTO_SELL_ELEMENT_WHITE = 1;</code>
     *
     * <pre>
     * 白装自动售出
     * </pre>
     */
    public static final int AUTO_SELL_ELEMENT_WHITE_VALUE = 1;
    /**
     * <code>AUTO_SELL_ELEMENT_GREEN = 2;</code>
     *
     * <pre>
     * 绿装自动售出
     * </pre>
     */
    public static final int AUTO_SELL_ELEMENT_GREEN_VALUE = 2;
    /**
     * <code>AUTO_SELL_ELEMENT_BLUE = 4;</code>
     *
     * <pre>
     * 蓝装自动售出
     * </pre>
     */
    public static final int AUTO_SELL_ELEMENT_BLUE_VALUE = 4;
    /**
     * <code>AUTO_SELL_ELEMENT_PURPLE = 8;</code>
     *
     * <pre>
     * 紫装自动售出
     * </pre>
     */
    public static final int AUTO_SELL_ELEMENT_PURPLE_VALUE = 8;
    /**
     * <code>AUTO_SELL_ELEMENT_DIFF_PROF = 16;</code>
     *
     * <pre>
     * 非本职业
     * </pre>
     */
    public static final int AUTO_SELL_ELEMENT_DIFF_PROF_VALUE = 16;


    public final int getNumber() { return value; }

    public static elementAutoSell valueOf(int value) {
      switch (value) {
        case 1: return AUTO_SELL_ELEMENT_WHITE;
        case 2: return AUTO_SELL_ELEMENT_GREEN;
        case 4: return AUTO_SELL_ELEMENT_BLUE;
        case 8: return AUTO_SELL_ELEMENT_PURPLE;
        case 16: return AUTO_SELL_ELEMENT_DIFF_PROF;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<elementAutoSell>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<elementAutoSell>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<elementAutoSell>() {
            public elementAutoSell findValueByNumber(int number) {
              return elementAutoSell.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(9);
    }

    private static final elementAutoSell[] VALUES = values();

    public static elementAutoSell valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private elementAutoSell(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:elementAutoSell)
  }

  /**
   * Protobuf enum {@code prof}
   *
   * <pre>
   * 职业类型定义
   * </pre>
   */
  public enum prof
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WARRIOR = 10;</code>
     *
     * <pre>
     * 戰士
     * </pre>
     */
    WARRIOR(0, 10),
    /**
     * <code>MAGICIAN = 20;</code>
     *
     * <pre>
     * 法師
     * </pre>
     */
    MAGICIAN(1, 20),
    /**
     * <code>ACOLYTE = 30;</code>
     *
     * <pre>
     * 恃從
     * </pre>
     */
    ACOLYTE(2, 30),
    /**
     * <code>THIEF = 40;</code>
     *
     * <pre>
     * 小偷
     * </pre>
     */
    THIEF(3, 40),
    /**
     * <code>ARCHER = 50;</code>
     *
     * <pre>
     * 弓手
     * </pre>
     */
    ARCHER(4, 50),
    /**
     * <code>MERCENARY_WARRIOR = 1;</code>
     *
     * <pre>
     * 佣兵战士
     * </pre>
     */
    MERCENARY_WARRIOR(5, 1),
    /**
     * <code>MERCENARY_HUNTER = 2;</code>
     *
     * <pre>
     * 佣兵猎人
     * </pre>
     */
    MERCENARY_HUNTER(6, 2),
    /**
     * <code>MERCENARY_MAGIC = 3;</code>
     *
     * <pre>
     * 佣兵法师
     * </pre>
     */
    MERCENARY_MAGIC(7, 3),
    /**
     * <code>MONSTER_WARRIOR = 2001;</code>
     *
     * <pre>
     * 怪物战士
     * </pre>
     */
    MONSTER_WARRIOR(8, 2001),
    /**
     * <code>MONSTER_HUNTER = 2002;</code>
     *
     * <pre>
     * 怪物猎人
     * </pre>
     */
    MONSTER_HUNTER(9, 2002),
    /**
     * <code>MONSTER_MAGIC = 2003;</code>
     *
     * <pre>
     * 怪物法师
     * </pre>
     */
    MONSTER_MAGIC(10, 2003),
    ;

    /**
     * <code>WARRIOR = 10;</code>
     *
     * <pre>
     * 戰士
     * </pre>
     */
    public static final int WARRIOR_VALUE = 10;
    /**
     * <code>MAGICIAN = 20;</code>
     *
     * <pre>
     * 法師
     * </pre>
     */
    public static final int MAGICIAN_VALUE = 20;
    /**
     * <code>ACOLYTE = 30;</code>
     *
     * <pre>
     * 恃從
     * </pre>
     */
    public static final int ACOLYTE_VALUE = 30;
    /**
     * <code>THIEF = 40;</code>
     *
     * <pre>
     * 小偷
     * </pre>
     */
    public static final int THIEF_VALUE = 40;
    /**
     * <code>ARCHER = 50;</code>
     *
     * <pre>
     * 弓手
     * </pre>
     */
    public static final int ARCHER_VALUE = 50;
    /**
     * <code>MERCENARY_WARRIOR = 1;</code>
     *
     * <pre>
     * 佣兵战士
     * </pre>
     */
    public static final int MERCENARY_WARRIOR_VALUE = 1;
    /**
     * <code>MERCENARY_HUNTER = 2;</code>
     *
     * <pre>
     * 佣兵猎人
     * </pre>
     */
    public static final int MERCENARY_HUNTER_VALUE = 2;
    /**
     * <code>MERCENARY_MAGIC = 3;</code>
     *
     * <pre>
     * 佣兵法师
     * </pre>
     */
    public static final int MERCENARY_MAGIC_VALUE = 3;
    /**
     * <code>MONSTER_WARRIOR = 2001;</code>
     *
     * <pre>
     * 怪物战士
     * </pre>
     */
    public static final int MONSTER_WARRIOR_VALUE = 2001;
    /**
     * <code>MONSTER_HUNTER = 2002;</code>
     *
     * <pre>
     * 怪物猎人
     * </pre>
     */
    public static final int MONSTER_HUNTER_VALUE = 2002;
    /**
     * <code>MONSTER_MAGIC = 2003;</code>
     *
     * <pre>
     * 怪物法师
     * </pre>
     */
    public static final int MONSTER_MAGIC_VALUE = 2003;


    public final int getNumber() { return value; }

    public static prof valueOf(int value) {
      switch (value) {
        case 10: return WARRIOR;
        case 20: return MAGICIAN;
        case 30: return ACOLYTE;
        case 40: return THIEF;
        case 50: return ARCHER;
        case 1: return MERCENARY_WARRIOR;
        case 2: return MERCENARY_HUNTER;
        case 3: return MERCENARY_MAGIC;
        case 2001: return MONSTER_WARRIOR;
        case 2002: return MONSTER_HUNTER;
        case 2003: return MONSTER_MAGIC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<prof>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<prof>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<prof>() {
            public prof findValueByNumber(int number) {
              return prof.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(10);
    }

    private static final prof[] VALUES = values();

    public static prof valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private prof(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:prof)
  }

  /**
   * Protobuf enum {@code attrCond}
   *
   * <pre>
   * 神器开启条件类型定义
   * </pre>
   */
  public enum attrCond
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ALL_EQUIP_INTENSIFY_1 = 1;</code>
     *
     * <pre>
     * 全身装备强化+1
     * </pre>
     */
    ALL_EQUIP_INTENSIFY_1(0, 1),
    /**
     * <code>ALL_EQUIP_INTENSIFY_2 = 2;</code>
     *
     * <pre>
     * 全身装备强化+2
     * </pre>
     */
    ALL_EQUIP_INTENSIFY_2(1, 2),
    /**
     * <code>ALL_EQUIP_INTENSIFY_3 = 3;</code>
     *
     * <pre>
     * 全身装备强化+3
     * </pre>
     */
    ALL_EQUIP_INTENSIFY_3(2, 3),
    ;

    /**
     * <code>ALL_EQUIP_INTENSIFY_1 = 1;</code>
     *
     * <pre>
     * 全身装备强化+1
     * </pre>
     */
    public static final int ALL_EQUIP_INTENSIFY_1_VALUE = 1;
    /**
     * <code>ALL_EQUIP_INTENSIFY_2 = 2;</code>
     *
     * <pre>
     * 全身装备强化+2
     * </pre>
     */
    public static final int ALL_EQUIP_INTENSIFY_2_VALUE = 2;
    /**
     * <code>ALL_EQUIP_INTENSIFY_3 = 3;</code>
     *
     * <pre>
     * 全身装备强化+3
     * </pre>
     */
    public static final int ALL_EQUIP_INTENSIFY_3_VALUE = 3;


    public final int getNumber() { return value; }

    public static attrCond valueOf(int value) {
      switch (value) {
        case 1: return ALL_EQUIP_INTENSIFY_1;
        case 2: return ALL_EQUIP_INTENSIFY_2;
        case 3: return ALL_EQUIP_INTENSIFY_3;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<attrCond>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<attrCond>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<attrCond>() {
            public attrCond findValueByNumber(int number) {
              return attrCond.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(11);
    }

    private static final attrCond[] VALUES = values();

    public static attrCond valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private attrCond(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:attrCond)
  }

  /**
   * Protobuf enum {@code equipAttrGrade}
   *
   * <pre>
   * 装备属性类型
   * </pre>
   */
  public enum equipAttrGrade
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PRIMARY_ATTR = 1;</code>
     *
     * <pre>
     * 主属性
     * </pre>
     */
    PRIMARY_ATTR(0, 1),
    /**
     * <code>SECONDARY_ATTR = 2;</code>
     *
     * <pre>
     * 副属性
     * </pre>
     */
    SECONDARY_ATTR(1, 2),
    /**
     * <code>GODLY_ATTR = 3;</code>
     *
     * <pre>
     * 神器属性
     * </pre>
     */
    GODLY_ATTR(2, 3),
    ;

    /**
     * <code>PRIMARY_ATTR = 1;</code>
     *
     * <pre>
     * 主属性
     * </pre>
     */
    public static final int PRIMARY_ATTR_VALUE = 1;
    /**
     * <code>SECONDARY_ATTR = 2;</code>
     *
     * <pre>
     * 副属性
     * </pre>
     */
    public static final int SECONDARY_ATTR_VALUE = 2;
    /**
     * <code>GODLY_ATTR = 3;</code>
     *
     * <pre>
     * 神器属性
     * </pre>
     */
    public static final int GODLY_ATTR_VALUE = 3;


    public final int getNumber() { return value; }

    public static equipAttrGrade valueOf(int value) {
      switch (value) {
        case 1: return PRIMARY_ATTR;
        case 2: return SECONDARY_ATTR;
        case 3: return GODLY_ATTR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<equipAttrGrade>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<equipAttrGrade>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<equipAttrGrade>() {
            public equipAttrGrade findValueByNumber(int number) {
              return equipAttrGrade.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(12);
    }

    private static final equipAttrGrade[] VALUES = values();

    public static equipAttrGrade valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private equipAttrGrade(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:equipAttrGrade)
  }

  /**
   * Protobuf enum {@code attr}
   *
   * <pre>
   * 属性类型定义
   * </pre>
   */
  public enum attr
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>STRENGHT = 1;</code>
     *
     * <pre>
     * 力量
     * </pre>
     */
    STRENGHT(0, 1),
    /**
     * <code>AGILITY = 2;</code>
     *
     * <pre>
     * 敏捷
     * </pre>
     */
    AGILITY(1, 2),
    /**
     * <code>INTELLECT = 3;</code>
     *
     * <pre>
     * 智力
     * </pre>
     */
    INTELLECT(2, 3),
    /**
     * <code>STAMINA = 4;</code>
     *
     * <pre>
     * 耐力
     * </pre>
     */
    STAMINA(3, 4),
    /**
     * <code>HP = 101;</code>
     *
     * <pre>
     * 生命值
     * </pre>
     */
    HP(4, 101),
    /**
     * <code>MP = 102;</code>
     *
     * <pre>
     * 魔法值
     * </pre>
     */
    MP(5, 102),
    /**
     * <code>MINDMG = 103;</code>
     *
     * <pre>
     * 最小伤害
     * </pre>
     */
    MINDMG(6, 103),
    /**
     * <code>MAXDMG = 104;</code>
     *
     * <pre>
     * 最大伤害
     * </pre>
     */
    MAXDMG(7, 104),
    /**
     * <code>ARMOR = 105;</code>
     *
     * <pre>
     * 护甲
     * </pre>
     */
    ARMOR(8, 105),
    /**
     * <code>PHYDEF = 106;</code>
     *
     * <pre>
     * 物抗
     * </pre>
     */
    PHYDEF(9, 106),
    /**
     * <code>MAGDEF = 107;</code>
     *
     * <pre>
     * 魔抗
     * </pre>
     */
    MAGDEF(10, 107),
    /**
     * <code>CRITICAL = 108;</code>
     *
     * <pre>
     * 暴击
     * </pre>
     */
    CRITICAL(11, 108),
    /**
     * <code>HIT = 109;</code>
     *
     * <pre>
     * 命中
     * </pre>
     */
    HIT(12, 109),
    /**
     * <code>DODGE = 110;</code>
     *
     * <pre>
     * 闪避
     * </pre>
     */
    DODGE(13, 110),
    /**
     * <code>RESILIENCE = 111;</code>
     *
     * <pre>
     * 韧性
     * </pre>
     */
    RESILIENCE(14, 111),
    /**
     * <code>RECOVERMP = 112;</code>
     *
     * <pre>
     * 回魔
     * </pre>
     */
    RECOVERMP(15, 112),
    /**
     * <code>ATTACK_attr = 113;</code>
     *
     * <pre>
     * 物攻
     * </pre>
     */
    ATTACK_attr(16, 113),
    /**
     * <code>MAGIC_attr = 114;</code>
     *
     * <pre>
     * 魔攻
     * </pre>
     */
    MAGIC_attr(17, 114),
    /**
     * <code>BUFF_COIN_DROP = 1001;</code>
     *
     * <pre>
     * 金币掉落
     * </pre>
     */
    BUFF_COIN_DROP(18, 1001),
    /**
     * <code>BUFF_EXP_DROP = 1002;</code>
     *
     * <pre>
     * 经验掉落
     * </pre>
     */
    BUFF_EXP_DROP(19, 1002),
    /**
     * <code>BUFF_EQUIP_DROP = 1003;</code>
     *
     * <pre>
     * 装备掉落
     * </pre>
     */
    BUFF_EQUIP_DROP(20, 1003),
    /**
     * <code>BUFF_MAX_HP = 1004;</code>
     *
     * <pre>
     * 最高生命值
     * </pre>
     */
    BUFF_MAX_HP(21, 1004),
    /**
     * <code>BUFF_AVOID_CONTROL = 1005;</code>
     *
     * <pre>
     * 免控
     * </pre>
     */
    BUFF_AVOID_CONTROL(22, 1005),
    /**
     * <code>BUFF_REVERSE_DAMAGE = 1006;</code>
     *
     * <pre>
     * 反伤
     * </pre>
     */
    BUFF_REVERSE_DAMAGE(23, 1006),
    /**
     * <code>BUFF_AVOID_ARMOR = 1007;</code>
     *
     * <pre>
     * 破甲
     * 20140917修改 护甲穿透等级
     * </pre>
     */
    BUFF_AVOID_ARMOR(24, 1007),
    /**
     * <code>BUFF_SUCK_BLOOD = 1008;</code>
     *
     * <pre>
     * 吸血
     * </pre>
     */
    BUFF_SUCK_BLOOD(25, 1008),
    /**
     * <code>BUFF_RETURN_BLOOD = 1009;</code>
     *
     * <pre>
     * 回血
     * </pre>
     */
    BUFF_RETURN_BLOOD(26, 1009),
    /**
     * <code>BUFF_CRITICAL_DAMAGE = 1010;</code>
     *
     * <pre>
     * 暴击伤害
     * </pre>
     */
    BUFF_CRITICAL_DAMAGE(27, 1010),
    /**
     * <code>BUFF_PHYDEF_ADD = 2001;</code>
     *
     * <pre>
     * 物抗值加成(1)
     * </pre>
     */
    BUFF_PHYDEF_ADD(28, 2001),
    /**
     * <code>BUFF_MAGDEF_ADD = 2002;</code>
     *
     * <pre>
     * 魔法抗性值(10)
     * </pre>
     */
    BUFF_MAGDEF_ADD(29, 2002),
    /**
     * <code>BUFF_PHYDEF_PENETRATE = 2103;</code>
     *
     * <pre>
     * 物抗穿透等级(7)
     * </pre>
     */
    BUFF_PHYDEF_PENETRATE(30, 2103),
    /**
     * <code>BUFF_MAGDEF_PENETRATE = 2104;</code>
     *
     * <pre>
     * 魔抗穿透等级(2)
     * </pre>
     */
    BUFF_MAGDEF_PENETRATE(31, 2104),
    /**
     * <code>BUFF_CRITICAL_ADD = 2005;</code>
     *
     * <pre>
     * 暴击值加成(9)
     * </pre>
     */
    BUFF_CRITICAL_ADD(32, 2005),
    /**
     * <code>BUFF_RESILIENCE_ADD = 2006;</code>
     *
     * <pre>
     * 韧性值加成(3)
     * </pre>
     */
    BUFF_RESILIENCE_ADD(33, 2006),
    /**
     * <code>BUFF_DODGE_ADD = 2007;</code>
     *
     * <pre>
     * 闪避值加成(8)
     * </pre>
     */
    BUFF_DODGE_ADD(34, 2007),
    /**
     * <code>BUFF_ARMOR_ADD = 2008;</code>
     *
     * <pre>
     * 护甲值加成(4)
     * </pre>
     */
    BUFF_ARMOR_ADD(35, 2008),
    /**
     * <code>BUFF_SKILL_DAMAGE_ADD = 2009;</code>
     *
     * <pre>
     * 技能伤害(5)
     * </pre>
     */
    BUFF_SKILL_DAMAGE_ADD(36, 2009),
    /**
     * <code>BUFF_HIT_ADD = 2010;</code>
     *
     * <pre>
     * 命中值加成(6)
     * </pre>
     */
    BUFF_HIT_ADD(37, 2010),
    /**
     * <code>BUFF_WARRIOR = 3001;</code>
     *
     * <pre>
     * 战士战斗被动属性
     * </pre>
     */
    BUFF_WARRIOR(38, 3001),
    /**
     * <code>BUFF_HUNTER = 3002;</code>
     *
     * <pre>
     * 猎人战斗被动属性
     * </pre>
     */
    BUFF_HUNTER(39, 3002),
    /**
     * <code>BUFF_MAGE = 3003;</code>
     *
     * <pre>
     * 法师战斗被动属性
     * </pre>
     */
    BUFF_MAGE(40, 3003),
    /**
     * <code>ICE_ATTACK = 4001;</code>
     *
     * <pre>
     * 冰攻击
     * </pre>
     */
    ICE_ATTACK(41, 4001),
    /**
     * <code>ICE_DEFENCE = 4002;</code>
     *
     * <pre>
     * 冰防御
     * </pre>
     */
    ICE_DEFENCE(42, 4002),
    /**
     * <code>FIRE_ATTACK = 4003;</code>
     *
     * <pre>
     * 火攻击
     * </pre>
     */
    FIRE_ATTACK(43, 4003),
    /**
     * <code>FIRE_DEFENCE = 4004;</code>
     *
     * <pre>
     * 火防御
     * </pre>
     */
    FIRE_DEFENCE(44, 4004),
    /**
     * <code>THUNDER_ATTACK = 4005;</code>
     *
     * <pre>
     * 雷攻击
     * </pre>
     */
    THUNDER_ATTACK(45, 4005),
    /**
     * <code>THUNDER_DENFENCE = 4006;</code>
     *
     * <pre>
     * 雷防御
     * </pre>
     */
    THUNDER_DENFENCE(46, 4006),
    /**
     * <code>ICE_ATTACK_RATIO = 4007;</code>
     *
     * <pre>
     * 冰攻击（百分比）
     * </pre>
     */
    ICE_ATTACK_RATIO(47, 4007),
    /**
     * <code>ICE_DEFENCE_RATIO = 4008;</code>
     *
     * <pre>
     * 冰防御（百分比）
     * </pre>
     */
    ICE_DEFENCE_RATIO(48, 4008),
    /**
     * <code>FIRE_ATTACK_RATIO = 4009;</code>
     *
     * <pre>
     * 火攻击（百分比）
     * </pre>
     */
    FIRE_ATTACK_RATIO(49, 4009),
    /**
     * <code>FIRE_DEFENCE_RATIO = 4010;</code>
     *
     * <pre>
     * 火防御（百分比）
     * </pre>
     */
    FIRE_DEFENCE_RATIO(50, 4010),
    /**
     * <code>THUNDER_ATTACK_RATIO = 4011;</code>
     *
     * <pre>
     * 雷攻击（百分比）
     * </pre>
     */
    THUNDER_ATTACK_RATIO(51, 4011),
    /**
     * <code>THUNDER_DENFENCE_RATIO = 4012;</code>
     *
     * <pre>
     * 雷防御（百分比）
     * </pre>
     */
    THUNDER_DENFENCE_RATIO(52, 4012),
    ;

    /**
     * <code>STRENGHT = 1;</code>
     *
     * <pre>
     * 力量
     * </pre>
     */
    public static final int STRENGHT_VALUE = 1;
    /**
     * <code>AGILITY = 2;</code>
     *
     * <pre>
     * 敏捷
     * </pre>
     */
    public static final int AGILITY_VALUE = 2;
    /**
     * <code>INTELLECT = 3;</code>
     *
     * <pre>
     * 智力
     * </pre>
     */
    public static final int INTELLECT_VALUE = 3;
    /**
     * <code>STAMINA = 4;</code>
     *
     * <pre>
     * 耐力
     * </pre>
     */
    public static final int STAMINA_VALUE = 4;
    /**
     * <code>HP = 101;</code>
     *
     * <pre>
     * 生命值
     * </pre>
     */
    public static final int HP_VALUE = 101;
    /**
     * <code>MP = 102;</code>
     *
     * <pre>
     * 魔法值
     * </pre>
     */
    public static final int MP_VALUE = 102;
    /**
     * <code>MINDMG = 103;</code>
     *
     * <pre>
     * 最小伤害
     * </pre>
     */
    public static final int MINDMG_VALUE = 103;
    /**
     * <code>MAXDMG = 104;</code>
     *
     * <pre>
     * 最大伤害
     * </pre>
     */
    public static final int MAXDMG_VALUE = 104;
    /**
     * <code>ARMOR = 105;</code>
     *
     * <pre>
     * 护甲
     * </pre>
     */
    public static final int ARMOR_VALUE = 105;
    /**
     * <code>PHYDEF = 106;</code>
     *
     * <pre>
     * 物抗
     * </pre>
     */
    public static final int PHYDEF_VALUE = 106;
    /**
     * <code>MAGDEF = 107;</code>
     *
     * <pre>
     * 魔抗
     * </pre>
     */
    public static final int MAGDEF_VALUE = 107;
    /**
     * <code>CRITICAL = 108;</code>
     *
     * <pre>
     * 暴击
     * </pre>
     */
    public static final int CRITICAL_VALUE = 108;
    /**
     * <code>HIT = 109;</code>
     *
     * <pre>
     * 命中
     * </pre>
     */
    public static final int HIT_VALUE = 109;
    /**
     * <code>DODGE = 110;</code>
     *
     * <pre>
     * 闪避
     * </pre>
     */
    public static final int DODGE_VALUE = 110;
    /**
     * <code>RESILIENCE = 111;</code>
     *
     * <pre>
     * 韧性
     * </pre>
     */
    public static final int RESILIENCE_VALUE = 111;
    /**
     * <code>RECOVERMP = 112;</code>
     *
     * <pre>
     * 回魔
     * </pre>
     */
    public static final int RECOVERMP_VALUE = 112;
    /**
     * <code>ATTACK_attr = 113;</code>
     *
     * <pre>
     * 物攻
     * </pre>
     */
    public static final int ATTACK_attr_VALUE = 113;
    /**
     * <code>MAGIC_attr = 114;</code>
     *
     * <pre>
     * 魔攻
     * </pre>
     */
    public static final int MAGIC_attr_VALUE = 114;
    /**
     * <code>BUFF_COIN_DROP = 1001;</code>
     *
     * <pre>
     * 金币掉落
     * </pre>
     */
    public static final int BUFF_COIN_DROP_VALUE = 1001;
    /**
     * <code>BUFF_EXP_DROP = 1002;</code>
     *
     * <pre>
     * 经验掉落
     * </pre>
     */
    public static final int BUFF_EXP_DROP_VALUE = 1002;
    /**
     * <code>BUFF_EQUIP_DROP = 1003;</code>
     *
     * <pre>
     * 装备掉落
     * </pre>
     */
    public static final int BUFF_EQUIP_DROP_VALUE = 1003;
    /**
     * <code>BUFF_MAX_HP = 1004;</code>
     *
     * <pre>
     * 最高生命值
     * </pre>
     */
    public static final int BUFF_MAX_HP_VALUE = 1004;
    /**
     * <code>BUFF_AVOID_CONTROL = 1005;</code>
     *
     * <pre>
     * 免控
     * </pre>
     */
    public static final int BUFF_AVOID_CONTROL_VALUE = 1005;
    /**
     * <code>BUFF_REVERSE_DAMAGE = 1006;</code>
     *
     * <pre>
     * 反伤
     * </pre>
     */
    public static final int BUFF_REVERSE_DAMAGE_VALUE = 1006;
    /**
     * <code>BUFF_AVOID_ARMOR = 1007;</code>
     *
     * <pre>
     * 破甲
     * 20140917修改 护甲穿透等级
     * </pre>
     */
    public static final int BUFF_AVOID_ARMOR_VALUE = 1007;
    /**
     * <code>BUFF_SUCK_BLOOD = 1008;</code>
     *
     * <pre>
     * 吸血
     * </pre>
     */
    public static final int BUFF_SUCK_BLOOD_VALUE = 1008;
    /**
     * <code>BUFF_RETURN_BLOOD = 1009;</code>
     *
     * <pre>
     * 回血
     * </pre>
     */
    public static final int BUFF_RETURN_BLOOD_VALUE = 1009;
    /**
     * <code>BUFF_CRITICAL_DAMAGE = 1010;</code>
     *
     * <pre>
     * 暴击伤害
     * </pre>
     */
    public static final int BUFF_CRITICAL_DAMAGE_VALUE = 1010;
    /**
     * <code>BUFF_PHYDEF_ADD = 2001;</code>
     *
     * <pre>
     * 物抗值加成(1)
     * </pre>
     */
    public static final int BUFF_PHYDEF_ADD_VALUE = 2001;
    /**
     * <code>BUFF_MAGDEF_ADD = 2002;</code>
     *
     * <pre>
     * 魔法抗性值(10)
     * </pre>
     */
    public static final int BUFF_MAGDEF_ADD_VALUE = 2002;
    /**
     * <code>BUFF_PHYDEF_PENETRATE = 2103;</code>
     *
     * <pre>
     * 物抗穿透等级(7)
     * </pre>
     */
    public static final int BUFF_PHYDEF_PENETRATE_VALUE = 2103;
    /**
     * <code>BUFF_MAGDEF_PENETRATE = 2104;</code>
     *
     * <pre>
     * 魔抗穿透等级(2)
     * </pre>
     */
    public static final int BUFF_MAGDEF_PENETRATE_VALUE = 2104;
    /**
     * <code>BUFF_CRITICAL_ADD = 2005;</code>
     *
     * <pre>
     * 暴击值加成(9)
     * </pre>
     */
    public static final int BUFF_CRITICAL_ADD_VALUE = 2005;
    /**
     * <code>BUFF_RESILIENCE_ADD = 2006;</code>
     *
     * <pre>
     * 韧性值加成(3)
     * </pre>
     */
    public static final int BUFF_RESILIENCE_ADD_VALUE = 2006;
    /**
     * <code>BUFF_DODGE_ADD = 2007;</code>
     *
     * <pre>
     * 闪避值加成(8)
     * </pre>
     */
    public static final int BUFF_DODGE_ADD_VALUE = 2007;
    /**
     * <code>BUFF_ARMOR_ADD = 2008;</code>
     *
     * <pre>
     * 护甲值加成(4)
     * </pre>
     */
    public static final int BUFF_ARMOR_ADD_VALUE = 2008;
    /**
     * <code>BUFF_SKILL_DAMAGE_ADD = 2009;</code>
     *
     * <pre>
     * 技能伤害(5)
     * </pre>
     */
    public static final int BUFF_SKILL_DAMAGE_ADD_VALUE = 2009;
    /**
     * <code>BUFF_HIT_ADD = 2010;</code>
     *
     * <pre>
     * 命中值加成(6)
     * </pre>
     */
    public static final int BUFF_HIT_ADD_VALUE = 2010;
    /**
     * <code>BUFF_WARRIOR = 3001;</code>
     *
     * <pre>
     * 战士战斗被动属性
     * </pre>
     */
    public static final int BUFF_WARRIOR_VALUE = 3001;
    /**
     * <code>BUFF_HUNTER = 3002;</code>
     *
     * <pre>
     * 猎人战斗被动属性
     * </pre>
     */
    public static final int BUFF_HUNTER_VALUE = 3002;
    /**
     * <code>BUFF_MAGE = 3003;</code>
     *
     * <pre>
     * 法师战斗被动属性
     * </pre>
     */
    public static final int BUFF_MAGE_VALUE = 3003;
    /**
     * <code>ICE_ATTACK = 4001;</code>
     *
     * <pre>
     * 冰攻击
     * </pre>
     */
    public static final int ICE_ATTACK_VALUE = 4001;
    /**
     * <code>ICE_DEFENCE = 4002;</code>
     *
     * <pre>
     * 冰防御
     * </pre>
     */
    public static final int ICE_DEFENCE_VALUE = 4002;
    /**
     * <code>FIRE_ATTACK = 4003;</code>
     *
     * <pre>
     * 火攻击
     * </pre>
     */
    public static final int FIRE_ATTACK_VALUE = 4003;
    /**
     * <code>FIRE_DEFENCE = 4004;</code>
     *
     * <pre>
     * 火防御
     * </pre>
     */
    public static final int FIRE_DEFENCE_VALUE = 4004;
    /**
     * <code>THUNDER_ATTACK = 4005;</code>
     *
     * <pre>
     * 雷攻击
     * </pre>
     */
    public static final int THUNDER_ATTACK_VALUE = 4005;
    /**
     * <code>THUNDER_DENFENCE = 4006;</code>
     *
     * <pre>
     * 雷防御
     * </pre>
     */
    public static final int THUNDER_DENFENCE_VALUE = 4006;
    /**
     * <code>ICE_ATTACK_RATIO = 4007;</code>
     *
     * <pre>
     * 冰攻击（百分比）
     * </pre>
     */
    public static final int ICE_ATTACK_RATIO_VALUE = 4007;
    /**
     * <code>ICE_DEFENCE_RATIO = 4008;</code>
     *
     * <pre>
     * 冰防御（百分比）
     * </pre>
     */
    public static final int ICE_DEFENCE_RATIO_VALUE = 4008;
    /**
     * <code>FIRE_ATTACK_RATIO = 4009;</code>
     *
     * <pre>
     * 火攻击（百分比）
     * </pre>
     */
    public static final int FIRE_ATTACK_RATIO_VALUE = 4009;
    /**
     * <code>FIRE_DEFENCE_RATIO = 4010;</code>
     *
     * <pre>
     * 火防御（百分比）
     * </pre>
     */
    public static final int FIRE_DEFENCE_RATIO_VALUE = 4010;
    /**
     * <code>THUNDER_ATTACK_RATIO = 4011;</code>
     *
     * <pre>
     * 雷攻击（百分比）
     * </pre>
     */
    public static final int THUNDER_ATTACK_RATIO_VALUE = 4011;
    /**
     * <code>THUNDER_DENFENCE_RATIO = 4012;</code>
     *
     * <pre>
     * 雷防御（百分比）
     * </pre>
     */
    public static final int THUNDER_DENFENCE_RATIO_VALUE = 4012;


    public final int getNumber() { return value; }

    public static attr valueOf(int value) {
      switch (value) {
        case 1: return STRENGHT;
        case 2: return AGILITY;
        case 3: return INTELLECT;
        case 4: return STAMINA;
        case 101: return HP;
        case 102: return MP;
        case 103: return MINDMG;
        case 104: return MAXDMG;
        case 105: return ARMOR;
        case 106: return PHYDEF;
        case 107: return MAGDEF;
        case 108: return CRITICAL;
        case 109: return HIT;
        case 110: return DODGE;
        case 111: return RESILIENCE;
        case 112: return RECOVERMP;
        case 113: return ATTACK_attr;
        case 114: return MAGIC_attr;
        case 1001: return BUFF_COIN_DROP;
        case 1002: return BUFF_EXP_DROP;
        case 1003: return BUFF_EQUIP_DROP;
        case 1004: return BUFF_MAX_HP;
        case 1005: return BUFF_AVOID_CONTROL;
        case 1006: return BUFF_REVERSE_DAMAGE;
        case 1007: return BUFF_AVOID_ARMOR;
        case 1008: return BUFF_SUCK_BLOOD;
        case 1009: return BUFF_RETURN_BLOOD;
        case 1010: return BUFF_CRITICAL_DAMAGE;
        case 2001: return BUFF_PHYDEF_ADD;
        case 2002: return BUFF_MAGDEF_ADD;
        case 2103: return BUFF_PHYDEF_PENETRATE;
        case 2104: return BUFF_MAGDEF_PENETRATE;
        case 2005: return BUFF_CRITICAL_ADD;
        case 2006: return BUFF_RESILIENCE_ADD;
        case 2007: return BUFF_DODGE_ADD;
        case 2008: return BUFF_ARMOR_ADD;
        case 2009: return BUFF_SKILL_DAMAGE_ADD;
        case 2010: return BUFF_HIT_ADD;
        case 3001: return BUFF_WARRIOR;
        case 3002: return BUFF_HUNTER;
        case 3003: return BUFF_MAGE;
        case 4001: return ICE_ATTACK;
        case 4002: return ICE_DEFENCE;
        case 4003: return FIRE_ATTACK;
        case 4004: return FIRE_DEFENCE;
        case 4005: return THUNDER_ATTACK;
        case 4006: return THUNDER_DENFENCE;
        case 4007: return ICE_ATTACK_RATIO;
        case 4008: return ICE_DEFENCE_RATIO;
        case 4009: return FIRE_ATTACK_RATIO;
        case 4010: return FIRE_DEFENCE_RATIO;
        case 4011: return THUNDER_ATTACK_RATIO;
        case 4012: return THUNDER_DENFENCE_RATIO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<attr>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<attr>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<attr>() {
            public attr findValueByNumber(int number) {
              return attr.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(13);
    }

    private static final attr[] VALUES = values();

    public static attr valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private attr(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:attr)
  }

  /**
   * Protobuf enum {@code Buff}
   *
   * <pre>
   * buff类型
   * </pre>
   */
  public enum Buff
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DIZZINESS = 1;</code>
     *
     * <pre>
     * 眩晕
     * </pre>
     */
    DIZZINESS(0, 1),
    /**
     * <code>FROST = 2;</code>
     *
     * <pre>
     * 冻结
     * </pre>
     */
    FROST(1, 2),
    /**
     * <code>SILENCE = 3;</code>
     *
     * <pre>
     * 沉默
     * </pre>
     */
    SILENCE(2, 3),
    /**
     * <code>BLIND = 4;</code>
     *
     * <pre>
     * 致盲
     * </pre>
     */
    BLIND(3, 4),
    /**
     * <code>GUARD = 5;</code>
     *
     * <pre>
     * 捍卫
     * </pre>
     */
    GUARD(4, 5),
    /**
     * <code>INSPIRE = 6;</code>
     *
     * <pre>
     * 鼓舞
     * </pre>
     */
    INSPIRE(5, 6),
    /**
     * <code>WEAKNESS = 7;</code>
     *
     * <pre>
     * 虚弱
     * </pre>
     */
    WEAKNESS(6, 7),
    /**
     * <code>RAGE = 8;</code>
     *
     * <pre>
     * 狂暴
     * </pre>
     */
    RAGE(7, 8),
    /**
     * <code>POISON = 9;</code>
     *
     * <pre>
     * 中毒
     * </pre>
     */
    POISON(8, 9),
    /**
     * <code>ARMOUR = 10;</code>
     *
     * <pre>
     * 破甲
     * </pre>
     */
    ARMOUR(9, 10),
    /**
     * <code>BURN = 11;</code>
     *
     * <pre>
     * 燃烧
     * </pre>
     */
    BURN(10, 11),
    /**
     * <code>BEEN_FROZEN = 12;</code>
     *
     * <pre>
     * 冰甲
     * </pre>
     */
    BEEN_FROZEN(11, 12),
    /**
     * <code>BLEED = 13;</code>
     *
     * <pre>
     * 流血
     * </pre>
     */
    BLEED(12, 13),
    /**
     * <code>MAGIC_ATTACK = 14;</code>
     *
     * <pre>
     * 魔箭
     * </pre>
     */
    MAGIC_ATTACK(13, 14),
    /**
     * <code>ADDITION_DMG = 15;</code>
     *
     * <pre>
     * 加攻
     * </pre>
     */
    ADDITION_DMG(14, 15),
    /**
     * <code>CLOAKING = 16;</code>
     *
     * <pre>
     * 隐身
     * </pre>
     */
    CLOAKING(15, 16),
    /**
     * <code>MAGIC_SHIELD = 17;</code>
     *
     * <pre>
     * 魔法盾
     * </pre>
     */
    MAGIC_SHIELD(16, 17),
    /**
     * <code>SUPPLY_ENERGY = 18;</code>
     *
     * <pre>
     * 充能
     * </pre>
     */
    SUPPLY_ENERGY(17, 18),
    /**
     * <code>SNEER = 19;</code>
     *
     * <pre>
     * 嘲讽
     * </pre>
     */
    SNEER(18, 19),
    /**
     * <code>RECKLESS = 20;</code>
     *
     * <pre>
     * 鲁莽
     * </pre>
     */
    RECKLESS(19, 20),
    /**
     * <code>MARK = 21;</code>
     *
     * <pre>
     * 标记
     * </pre>
     */
    MARK(20, 21),
    /**
     * <code>SPELL_WARD = 22;</code>
     *
     * <pre>
     * 护咒
     * </pre>
     */
    SPELL_WARD(21, 22),
    /**
     * <code>BARRIER = 23;</code>
     *
     * <pre>
     * 屏障
     * </pre>
     */
    BARRIER(22, 23),
    /**
     * <code>MISS = 24;</code>
     *
     * <pre>
     * 闪避
     * </pre>
     */
    MISS(23, 24),
    /**
     * <code>HEMORRHAGE = 25;</code>
     *
     * <pre>
     * 失血
     * </pre>
     */
    HEMORRHAGE(24, 25),
    /**
     * <code>DIS_ATTACK = 26;</code>
     *
     * <pre>
     * 削弱攻击
     * </pre>
     */
    DIS_ATTACK(25, 26),
    /**
     * <code>DIS_DEFENCE = 27;</code>
     *
     * <pre>
     * 削弱防御
     * </pre>
     */
    DIS_DEFENCE(26, 27),
    /**
     * <code>SUPER_ARMOR = 28;</code>
     *
     * <pre>
     * 霸体
     * </pre>
     */
    SUPER_ARMOR(27, 28),
    /**
     * <code>IRON_ARMOUR = 29;</code>
     *
     * <pre>
     * 铁甲
     * </pre>
     */
    IRON_ARMOUR(28, 29),
    /**
     * <code>FRENZY = 30;</code>
     *
     * <pre>
     * 狂乱
     * </pre>
     */
    FRENZY(29, 30),
    /**
     * <code>WINDBREAK = 31;</code>
     *
     * <pre>
     * 风破
     * </pre>
     */
    WINDBREAK(30, 31),
    /**
     * <code>SHADOWARMOR = 32;</code>
     *
     * <pre>
     * 影甲
     * </pre>
     */
    SHADOWARMOR(31, 32),
    /**
     * <code>SHREDDING = 33;</code>
     *
     * <pre>
     * 击碎
     * </pre>
     */
    SHREDDING(32, 33),
    /**
     * <code>INTERVENE = 34;</code>
     *
     * <pre>
     * 援护
     * </pre>
     */
    INTERVENE(33, 34),
    /**
     * <code>SHADOWARMOR2 = 35;</code>
     *
     * <pre>
     * 影甲2
     * </pre>
     */
    SHADOWARMOR2(34, 35),
    /**
     * <code>FREEFROMDEATH = 36;</code>
     *
     * <pre>
     * 免死
     * </pre>
     */
    FREEFROMDEATH(35, 36),
    /**
     * <code>POWERFUL = 38;</code>
     *
     * <pre>
     * 勇猛
     * </pre>
     */
    POWERFUL(36, 38),
    /**
     * <code>SCARE = 39;</code>
     *
     * <pre>
     * 恐懼
     * </pre>
     */
    SCARE(37, 39),
    /**
     * <code>RAGE_DAMAGE = 100;</code>
     *
     * <pre>
     * 前端不可见buff
     * </pre>
     */
    RAGE_DAMAGE(38, 100),
    /**
     * <code>WARRIOR_BUFF = 101;</code>
     *
     * <pre>
     * 战士特有buff
     * </pre>
     */
    WARRIOR_BUFF(39, 101),
    /**
     * <code>HUNTER_BUFF = 102;</code>
     *
     * <pre>
     * 猎人特有buff
     * </pre>
     */
    HUNTER_BUFF(40, 102),
    /**
     * <code>MAGIC_BUFF = 103;</code>
     *
     * <pre>
     * 法师特有buff
     * </pre>
     */
    MAGIC_BUFF(41, 103),
    ;

    /**
     * <code>DIZZINESS = 1;</code>
     *
     * <pre>
     * 眩晕
     * </pre>
     */
    public static final int DIZZINESS_VALUE = 1;
    /**
     * <code>FROST = 2;</code>
     *
     * <pre>
     * 冻结
     * </pre>
     */
    public static final int FROST_VALUE = 2;
    /**
     * <code>SILENCE = 3;</code>
     *
     * <pre>
     * 沉默
     * </pre>
     */
    public static final int SILENCE_VALUE = 3;
    /**
     * <code>BLIND = 4;</code>
     *
     * <pre>
     * 致盲
     * </pre>
     */
    public static final int BLIND_VALUE = 4;
    /**
     * <code>GUARD = 5;</code>
     *
     * <pre>
     * 捍卫
     * </pre>
     */
    public static final int GUARD_VALUE = 5;
    /**
     * <code>INSPIRE = 6;</code>
     *
     * <pre>
     * 鼓舞
     * </pre>
     */
    public static final int INSPIRE_VALUE = 6;
    /**
     * <code>WEAKNESS = 7;</code>
     *
     * <pre>
     * 虚弱
     * </pre>
     */
    public static final int WEAKNESS_VALUE = 7;
    /**
     * <code>RAGE = 8;</code>
     *
     * <pre>
     * 狂暴
     * </pre>
     */
    public static final int RAGE_VALUE = 8;
    /**
     * <code>POISON = 9;</code>
     *
     * <pre>
     * 中毒
     * </pre>
     */
    public static final int POISON_VALUE = 9;
    /**
     * <code>ARMOUR = 10;</code>
     *
     * <pre>
     * 破甲
     * </pre>
     */
    public static final int ARMOUR_VALUE = 10;
    /**
     * <code>BURN = 11;</code>
     *
     * <pre>
     * 燃烧
     * </pre>
     */
    public static final int BURN_VALUE = 11;
    /**
     * <code>BEEN_FROZEN = 12;</code>
     *
     * <pre>
     * 冰甲
     * </pre>
     */
    public static final int BEEN_FROZEN_VALUE = 12;
    /**
     * <code>BLEED = 13;</code>
     *
     * <pre>
     * 流血
     * </pre>
     */
    public static final int BLEED_VALUE = 13;
    /**
     * <code>MAGIC_ATTACK = 14;</code>
     *
     * <pre>
     * 魔箭
     * </pre>
     */
    public static final int MAGIC_ATTACK_VALUE = 14;
    /**
     * <code>ADDITION_DMG = 15;</code>
     *
     * <pre>
     * 加攻
     * </pre>
     */
    public static final int ADDITION_DMG_VALUE = 15;
    /**
     * <code>CLOAKING = 16;</code>
     *
     * <pre>
     * 隐身
     * </pre>
     */
    public static final int CLOAKING_VALUE = 16;
    /**
     * <code>MAGIC_SHIELD = 17;</code>
     *
     * <pre>
     * 魔法盾
     * </pre>
     */
    public static final int MAGIC_SHIELD_VALUE = 17;
    /**
     * <code>SUPPLY_ENERGY = 18;</code>
     *
     * <pre>
     * 充能
     * </pre>
     */
    public static final int SUPPLY_ENERGY_VALUE = 18;
    /**
     * <code>SNEER = 19;</code>
     *
     * <pre>
     * 嘲讽
     * </pre>
     */
    public static final int SNEER_VALUE = 19;
    /**
     * <code>RECKLESS = 20;</code>
     *
     * <pre>
     * 鲁莽
     * </pre>
     */
    public static final int RECKLESS_VALUE = 20;
    /**
     * <code>MARK = 21;</code>
     *
     * <pre>
     * 标记
     * </pre>
     */
    public static final int MARK_VALUE = 21;
    /**
     * <code>SPELL_WARD = 22;</code>
     *
     * <pre>
     * 护咒
     * </pre>
     */
    public static final int SPELL_WARD_VALUE = 22;
    /**
     * <code>BARRIER = 23;</code>
     *
     * <pre>
     * 屏障
     * </pre>
     */
    public static final int BARRIER_VALUE = 23;
    /**
     * <code>MISS = 24;</code>
     *
     * <pre>
     * 闪避
     * </pre>
     */
    public static final int MISS_VALUE = 24;
    /**
     * <code>HEMORRHAGE = 25;</code>
     *
     * <pre>
     * 失血
     * </pre>
     */
    public static final int HEMORRHAGE_VALUE = 25;
    /**
     * <code>DIS_ATTACK = 26;</code>
     *
     * <pre>
     * 削弱攻击
     * </pre>
     */
    public static final int DIS_ATTACK_VALUE = 26;
    /**
     * <code>DIS_DEFENCE = 27;</code>
     *
     * <pre>
     * 削弱防御
     * </pre>
     */
    public static final int DIS_DEFENCE_VALUE = 27;
    /**
     * <code>SUPER_ARMOR = 28;</code>
     *
     * <pre>
     * 霸体
     * </pre>
     */
    public static final int SUPER_ARMOR_VALUE = 28;
    /**
     * <code>IRON_ARMOUR = 29;</code>
     *
     * <pre>
     * 铁甲
     * </pre>
     */
    public static final int IRON_ARMOUR_VALUE = 29;
    /**
     * <code>FRENZY = 30;</code>
     *
     * <pre>
     * 狂乱
     * </pre>
     */
    public static final int FRENZY_VALUE = 30;
    /**
     * <code>WINDBREAK = 31;</code>
     *
     * <pre>
     * 风破
     * </pre>
     */
    public static final int WINDBREAK_VALUE = 31;
    /**
     * <code>SHADOWARMOR = 32;</code>
     *
     * <pre>
     * 影甲
     * </pre>
     */
    public static final int SHADOWARMOR_VALUE = 32;
    /**
     * <code>SHREDDING = 33;</code>
     *
     * <pre>
     * 击碎
     * </pre>
     */
    public static final int SHREDDING_VALUE = 33;
    /**
     * <code>INTERVENE = 34;</code>
     *
     * <pre>
     * 援护
     * </pre>
     */
    public static final int INTERVENE_VALUE = 34;
    /**
     * <code>SHADOWARMOR2 = 35;</code>
     *
     * <pre>
     * 影甲2
     * </pre>
     */
    public static final int SHADOWARMOR2_VALUE = 35;
    /**
     * <code>FREEFROMDEATH = 36;</code>
     *
     * <pre>
     * 免死
     * </pre>
     */
    public static final int FREEFROMDEATH_VALUE = 36;
    /**
     * <code>POWERFUL = 38;</code>
     *
     * <pre>
     * 勇猛
     * </pre>
     */
    public static final int POWERFUL_VALUE = 38;
    /**
     * <code>SCARE = 39;</code>
     *
     * <pre>
     * 恐懼
     * </pre>
     */
    public static final int SCARE_VALUE = 39;
    /**
     * <code>RAGE_DAMAGE = 100;</code>
     *
     * <pre>
     * 前端不可见buff
     * </pre>
     */
    public static final int RAGE_DAMAGE_VALUE = 100;
    /**
     * <code>WARRIOR_BUFF = 101;</code>
     *
     * <pre>
     * 战士特有buff
     * </pre>
     */
    public static final int WARRIOR_BUFF_VALUE = 101;
    /**
     * <code>HUNTER_BUFF = 102;</code>
     *
     * <pre>
     * 猎人特有buff
     * </pre>
     */
    public static final int HUNTER_BUFF_VALUE = 102;
    /**
     * <code>MAGIC_BUFF = 103;</code>
     *
     * <pre>
     * 法师特有buff
     * </pre>
     */
    public static final int MAGIC_BUFF_VALUE = 103;


    public final int getNumber() { return value; }

    public static Buff valueOf(int value) {
      switch (value) {
        case 1: return DIZZINESS;
        case 2: return FROST;
        case 3: return SILENCE;
        case 4: return BLIND;
        case 5: return GUARD;
        case 6: return INSPIRE;
        case 7: return WEAKNESS;
        case 8: return RAGE;
        case 9: return POISON;
        case 10: return ARMOUR;
        case 11: return BURN;
        case 12: return BEEN_FROZEN;
        case 13: return BLEED;
        case 14: return MAGIC_ATTACK;
        case 15: return ADDITION_DMG;
        case 16: return CLOAKING;
        case 17: return MAGIC_SHIELD;
        case 18: return SUPPLY_ENERGY;
        case 19: return SNEER;
        case 20: return RECKLESS;
        case 21: return MARK;
        case 22: return SPELL_WARD;
        case 23: return BARRIER;
        case 24: return MISS;
        case 25: return HEMORRHAGE;
        case 26: return DIS_ATTACK;
        case 27: return DIS_DEFENCE;
        case 28: return SUPER_ARMOR;
        case 29: return IRON_ARMOUR;
        case 30: return FRENZY;
        case 31: return WINDBREAK;
        case 32: return SHADOWARMOR;
        case 33: return SHREDDING;
        case 34: return INTERVENE;
        case 35: return SHADOWARMOR2;
        case 36: return FREEFROMDEATH;
        case 38: return POWERFUL;
        case 39: return SCARE;
        case 100: return RAGE_DAMAGE;
        case 101: return WARRIOR_BUFF;
        case 102: return HUNTER_BUFF;
        case 103: return MAGIC_BUFF;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Buff>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Buff>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Buff>() {
            public Buff findValueByNumber(int number) {
              return Buff.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(14);
    }

    private static final Buff[] VALUES = values();

    public static Buff valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Buff(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Buff)
  }

  /**
   * Protobuf enum {@code changeType}
   *
   * <pre>
   * 变换的数值类型
   * </pre>
   */
  public enum changeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CHANGE_NONE = 0;</code>
     */
    CHANGE_NONE(0, 0),
    /**
     * <code>CHANGE_GOLD = 1;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    CHANGE_GOLD(1, 1),
    /**
     * <code>CHANGE_COIN = 2;</code>
     *
     * <pre>
     * 金币
     * </pre>
     */
    CHANGE_COIN(2, 2),
    /**
     * <code>CHANGE_EXP = 3;</code>
     *
     * <pre>
     * 经验
     * </pre>
     */
    CHANGE_EXP(3, 3),
    /**
     * <code>CHANGE_LEVEL = 4;</code>
     *
     * <pre>
     * 等级
     * </pre>
     */
    CHANGE_LEVEL(4, 4),
    /**
     * <code>CHANGE_RECHARGE = 5;</code>
     *
     * <pre>
     * 充值总额
     * </pre>
     */
    CHANGE_RECHARGE(5, 5),
    /**
     * <code>CHANGE_VIPLEVEL = 6;</code>
     *
     * <pre>
     * vip等级
     * </pre>
     */
    CHANGE_VIPLEVEL(6, 6),
    /**
     * <code>CHANGE_ROLE = 7;</code>
     *
     * <pre>
     * 角色
     * </pre>
     */
    CHANGE_ROLE(7, 7),
    /**
     * <code>CHANGE_TOOLS = 8;</code>
     *
     * <pre>
     * 道具    
     * </pre>
     */
    CHANGE_TOOLS(8, 8),
    /**
     * <code>CHANGE_EQUIP = 9;</code>
     *
     * <pre>
     * 装备
     * </pre>
     */
    CHANGE_EQUIP(9, 9),
    /**
     * <code>CHANGE_SMELT_VALUE = 10;</code>
     *
     * <pre>
     * 熔炼值
     * </pre>
     */
    CHANGE_SMELT_VALUE(10, 10),
    /**
     * <code>CHANGE_CONTRIBUTION = 11;</code>
     *
     * <pre>
     * 贡献值
     * </pre>
     */
    CHANGE_CONTRIBUTION(11, 11),
    /**
     * <code>CHANGE_HONOR_VALUE = 12;</code>
     *
     * <pre>
     * 荣誉值
     * </pre>
     */
    CHANGE_HONOR_VALUE(12, 12),
    /**
     * <code>CHANGE_REPUTATION_VALUE = 13;</code>
     *
     * <pre>
     * 声望值
     * </pre>
     */
    CHANGE_REPUTATION_VALUE(13, 13),
    /**
     * <code>CHANGE_ELEMENT = 14;</code>
     *
     * <pre>
     * 元素
     * </pre>
     */
    CHANGE_ELEMENT(14, 14),
    /**
     * <code>CHANGE_CROSS_COIN = 15;</code>
     *
     * <pre>
     * 跨服获取的货币
     * </pre>
     */
    CHANGE_CROSS_COIN(15, 15),
    /**
     * <code>CHANGE_FRIENDSHIP = 16;</code>
     *
     * <pre>
     * </pre>
     */
    CHANGE_FRIENDSHIP(16, 16),
    /**
     * <code>CHANGE_CRYSTAL = 20;</code>
     *
     * <pre>
     *水晶
     * </pre>
     */
    CHANGE_CRYSTAL(17, 20),
    ;

    /**
     * <code>CHANGE_NONE = 0;</code>
     */
    public static final int CHANGE_NONE_VALUE = 0;
    /**
     * <code>CHANGE_GOLD = 1;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    public static final int CHANGE_GOLD_VALUE = 1;
    /**
     * <code>CHANGE_COIN = 2;</code>
     *
     * <pre>
     * 金币
     * </pre>
     */
    public static final int CHANGE_COIN_VALUE = 2;
    /**
     * <code>CHANGE_EXP = 3;</code>
     *
     * <pre>
     * 经验
     * </pre>
     */
    public static final int CHANGE_EXP_VALUE = 3;
    /**
     * <code>CHANGE_LEVEL = 4;</code>
     *
     * <pre>
     * 等级
     * </pre>
     */
    public static final int CHANGE_LEVEL_VALUE = 4;
    /**
     * <code>CHANGE_RECHARGE = 5;</code>
     *
     * <pre>
     * 充值总额
     * </pre>
     */
    public static final int CHANGE_RECHARGE_VALUE = 5;
    /**
     * <code>CHANGE_VIPLEVEL = 6;</code>
     *
     * <pre>
     * vip等级
     * </pre>
     */
    public static final int CHANGE_VIPLEVEL_VALUE = 6;
    /**
     * <code>CHANGE_ROLE = 7;</code>
     *
     * <pre>
     * 角色
     * </pre>
     */
    public static final int CHANGE_ROLE_VALUE = 7;
    /**
     * <code>CHANGE_TOOLS = 8;</code>
     *
     * <pre>
     * 道具    
     * </pre>
     */
    public static final int CHANGE_TOOLS_VALUE = 8;
    /**
     * <code>CHANGE_EQUIP = 9;</code>
     *
     * <pre>
     * 装备
     * </pre>
     */
    public static final int CHANGE_EQUIP_VALUE = 9;
    /**
     * <code>CHANGE_SMELT_VALUE = 10;</code>
     *
     * <pre>
     * 熔炼值
     * </pre>
     */
    public static final int CHANGE_SMELT_VALUE_VALUE = 10;
    /**
     * <code>CHANGE_CONTRIBUTION = 11;</code>
     *
     * <pre>
     * 贡献值
     * </pre>
     */
    public static final int CHANGE_CONTRIBUTION_VALUE = 11;
    /**
     * <code>CHANGE_HONOR_VALUE = 12;</code>
     *
     * <pre>
     * 荣誉值
     * </pre>
     */
    public static final int CHANGE_HONOR_VALUE_VALUE = 12;
    /**
     * <code>CHANGE_REPUTATION_VALUE = 13;</code>
     *
     * <pre>
     * 声望值
     * </pre>
     */
    public static final int CHANGE_REPUTATION_VALUE_VALUE = 13;
    /**
     * <code>CHANGE_ELEMENT = 14;</code>
     *
     * <pre>
     * 元素
     * </pre>
     */
    public static final int CHANGE_ELEMENT_VALUE = 14;
    /**
     * <code>CHANGE_CROSS_COIN = 15;</code>
     *
     * <pre>
     * 跨服获取的货币
     * </pre>
     */
    public static final int CHANGE_CROSS_COIN_VALUE = 15;
    /**
     * <code>CHANGE_FRIENDSHIP = 16;</code>
     *
     * <pre>
     * </pre>
     */
    public static final int CHANGE_FRIENDSHIP_VALUE = 16;
    /**
     * <code>CHANGE_CRYSTAL = 20;</code>
     *
     * <pre>
     *水晶
     * </pre>
     */
    public static final int CHANGE_CRYSTAL_VALUE = 20;


    public final int getNumber() { return value; }

    public static changeType valueOf(int value) {
      switch (value) {
        case 0: return CHANGE_NONE;
        case 1: return CHANGE_GOLD;
        case 2: return CHANGE_COIN;
        case 3: return CHANGE_EXP;
        case 4: return CHANGE_LEVEL;
        case 5: return CHANGE_RECHARGE;
        case 6: return CHANGE_VIPLEVEL;
        case 7: return CHANGE_ROLE;
        case 8: return CHANGE_TOOLS;
        case 9: return CHANGE_EQUIP;
        case 10: return CHANGE_SMELT_VALUE;
        case 11: return CHANGE_CONTRIBUTION;
        case 12: return CHANGE_HONOR_VALUE;
        case 13: return CHANGE_REPUTATION_VALUE;
        case 14: return CHANGE_ELEMENT;
        case 15: return CHANGE_CROSS_COIN;
        case 16: return CHANGE_FRIENDSHIP;
        case 20: return CHANGE_CRYSTAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<changeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<changeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<changeType>() {
            public changeType findValueByNumber(int number) {
              return changeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(15);
    }

    private static final changeType[] VALUES = values();

    public static changeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private changeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:changeType)
  }

  /**
   * Protobuf enum {@code buyMoneyType}
   *
   * <pre>
   * 购买价格类型
   * </pre>
   */
  public enum buyMoneyType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MONEY_GOLD = 1;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    MONEY_GOLD(0, 1),
    /**
     * <code>MONEY_COIN = 2;</code>
     *
     * <pre>
     * 金币
     * </pre>
     */
    MONEY_COIN(1, 2),
    ;

    /**
     * <code>MONEY_GOLD = 1;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    public static final int MONEY_GOLD_VALUE = 1;
    /**
     * <code>MONEY_COIN = 2;</code>
     *
     * <pre>
     * 金币
     * </pre>
     */
    public static final int MONEY_COIN_VALUE = 2;


    public final int getNumber() { return value; }

    public static buyMoneyType valueOf(int value) {
      switch (value) {
        case 1: return MONEY_GOLD;
        case 2: return MONEY_COIN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<buyMoneyType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<buyMoneyType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<buyMoneyType>() {
            public buyMoneyType findValueByNumber(int number) {
              return buyMoneyType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(16);
    }

    private static final buyMoneyType[] VALUES = values();

    public static buyMoneyType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private buyMoneyType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:buyMoneyType)
  }

  /**
   * Protobuf enum {@code shootType}
   *
   * <pre>
   * 射击类型
   * </pre>
   */
  public enum shootType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PRIMARY = 1;</code>
     *
     * <pre>
     * 初级
     * </pre>
     */
    PRIMARY(0, 1),
    /**
     * <code>INTERMEDIATE = 2;</code>
     *
     * <pre>
     * 中级
     * </pre>
     */
    INTERMEDIATE(1, 2),
    /**
     * <code>ADVANCED = 3;</code>
     *
     * <pre>
     * 高级
     * </pre>
     */
    ADVANCED(2, 3),
    ;

    /**
     * <code>PRIMARY = 1;</code>
     *
     * <pre>
     * 初级
     * </pre>
     */
    public static final int PRIMARY_VALUE = 1;
    /**
     * <code>INTERMEDIATE = 2;</code>
     *
     * <pre>
     * 中级
     * </pre>
     */
    public static final int INTERMEDIATE_VALUE = 2;
    /**
     * <code>ADVANCED = 3;</code>
     *
     * <pre>
     * 高级
     * </pre>
     */
    public static final int ADVANCED_VALUE = 3;


    public final int getNumber() { return value; }

    public static shootType valueOf(int value) {
      switch (value) {
        case 1: return PRIMARY;
        case 2: return INTERMEDIATE;
        case 3: return ADVANCED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<shootType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<shootType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<shootType>() {
            public shootType findValueByNumber(int number) {
              return shootType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(17);
    }

    private static final shootType[] VALUES = values();

    public static shootType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private shootType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:shootType)
  }

  /**
   * Protobuf enum {@code shootFreeType}
   *
   * <pre>
   * 射击类型
   * </pre>
   */
  public enum shootFreeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SHOOT_FREE = 1;</code>
     *
     * <pre>
     * 免费
     * </pre>
     */
    SHOOT_FREE(0, 1),
    /**
     * <code>SHOOT_GOLD = 2;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    SHOOT_GOLD(1, 2),
    ;

    /**
     * <code>SHOOT_FREE = 1;</code>
     *
     * <pre>
     * 免费
     * </pre>
     */
    public static final int SHOOT_FREE_VALUE = 1;
    /**
     * <code>SHOOT_GOLD = 2;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    public static final int SHOOT_GOLD_VALUE = 2;


    public final int getNumber() { return value; }

    public static shootFreeType valueOf(int value) {
      switch (value) {
        case 1: return SHOOT_FREE;
        case 2: return SHOOT_GOLD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<shootFreeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<shootFreeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<shootFreeType>() {
            public shootFreeType findValueByNumber(int number) {
              return shootFreeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(18);
    }

    private static final shootFreeType[] VALUES = values();

    public static shootFreeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private shootFreeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:shootFreeType)
  }

  /**
   * Protobuf enum {@code shootRewardState}
   *
   * <pre>
   * 射击奖池ID
   * </pre>
   */
  public enum shootRewardState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SHOOT_A = 1;</code>
     */
    SHOOT_A(0, 1),
    /**
     * <code>SHOOT_B = 2;</code>
     */
    SHOOT_B(1, 2),
    ;

    /**
     * <code>SHOOT_A = 1;</code>
     */
    public static final int SHOOT_A_VALUE = 1;
    /**
     * <code>SHOOT_B = 2;</code>
     */
    public static final int SHOOT_B_VALUE = 2;


    public final int getNumber() { return value; }

    public static shootRewardState valueOf(int value) {
      switch (value) {
        case 1: return SHOOT_A;
        case 2: return SHOOT_B;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<shootRewardState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<shootRewardState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<shootRewardState>() {
            public shootRewardState findValueByNumber(int number) {
              return shootRewardState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(19);
    }

    private static final shootRewardState[] VALUES = values();

    public static shootRewardState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private shootRewardState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:shootRewardState)
  }

  /**
   * Protobuf enum {@code equipStatus}
   *
   * <pre>
   * 装备状态
   * </pre>
   */
  public enum equipStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EQUIP_FREE = 0;</code>
     *
     * <pre>
     *空闲中
     * </pre>
     */
    EQUIP_FREE(0, 0),
    /**
     * <code>EQUIP_MAIN_ROLE = 1;</code>
     *
     * <pre>
     * 主角身上
     * </pre>
     */
    EQUIP_MAIN_ROLE(1, 1),
    /**
     * <code>EQUIP_MERCENARY = 2;</code>
     *
     * <pre>
     * 佣兵
     * </pre>
     */
    EQUIP_MERCENARY(2, 2),
    ;

    /**
     * <code>EQUIP_FREE = 0;</code>
     *
     * <pre>
     *空闲中
     * </pre>
     */
    public static final int EQUIP_FREE_VALUE = 0;
    /**
     * <code>EQUIP_MAIN_ROLE = 1;</code>
     *
     * <pre>
     * 主角身上
     * </pre>
     */
    public static final int EQUIP_MAIN_ROLE_VALUE = 1;
    /**
     * <code>EQUIP_MERCENARY = 2;</code>
     *
     * <pre>
     * 佣兵
     * </pre>
     */
    public static final int EQUIP_MERCENARY_VALUE = 2;


    public final int getNumber() { return value; }

    public static equipStatus valueOf(int value) {
      switch (value) {
        case 0: return EQUIP_FREE;
        case 1: return EQUIP_MAIN_ROLE;
        case 2: return EQUIP_MERCENARY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<equipStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<equipStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<equipStatus>() {
            public equipStatus findValueByNumber(int number) {
              return equipStatus.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(20);
    }

    private static final equipStatus[] VALUES = values();

    public static equipStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private equipStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:equipStatus)
  }

  /**
   * Protobuf enum {@code monsterType}
   *
   * <pre>
   * 怪物类型
   * </pre>
   */
  public enum monsterType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DOGFACE = 1;</code>
     *
     * <pre>
     * 小怪
     * </pre>
     */
    DOGFACE(0, 1),
    /**
     * <code>BOSS = 2;</code>
     *
     * <pre>
     * 关卡Boss
     * </pre>
     */
    BOSS(1, 2),
    /**
     * <code>ROBOT = 3;</code>
     *
     * <pre>
     * 机器人
     * </pre>
     */
    ROBOT(2, 3),
    ;

    /**
     * <code>DOGFACE = 1;</code>
     *
     * <pre>
     * 小怪
     * </pre>
     */
    public static final int DOGFACE_VALUE = 1;
    /**
     * <code>BOSS = 2;</code>
     *
     * <pre>
     * 关卡Boss
     * </pre>
     */
    public static final int BOSS_VALUE = 2;
    /**
     * <code>ROBOT = 3;</code>
     *
     * <pre>
     * 机器人
     * </pre>
     */
    public static final int ROBOT_VALUE = 3;


    public final int getNumber() { return value; }

    public static monsterType valueOf(int value) {
      switch (value) {
        case 1: return DOGFACE;
        case 2: return BOSS;
        case 3: return ROBOT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<monsterType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<monsterType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<monsterType>() {
            public monsterType findValueByNumber(int number) {
              return monsterType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(21);
    }

    private static final monsterType[] VALUES = values();

    public static monsterType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private monsterType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:monsterType)
  }

  /**
   * Protobuf enum {@code RoleStatus}
   *
   * <pre>
   *佣兵状态
   * </pre>
   */
  public enum RoleStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>RESTTING = 0;</code>
     *
     * <pre>
     * 休息中,無狀態
     * </pre>
     */
    RESTTING(0, 0),
    /**
     * <code>FIGHTING = 1;</code>
     *
     * <pre>
     * 單獨出战中
     * </pre>
     */
    FIGHTING(1, 1),
    /**
     * <code>EXPEDITION = 2;</code>
     *
     * <pre>
     * 單獨远征中
     * </pre>
     */
    EXPEDITION(2, 2),
    /**
     * <code>MIXTASK = 3;</code>
     *
     * <pre>
     * 出戰+遠征(混合任務)
     * </pre>
     */
    MIXTASK(3, 3),
    ;

    /**
     * <code>RESTTING = 0;</code>
     *
     * <pre>
     * 休息中,無狀態
     * </pre>
     */
    public static final int RESTTING_VALUE = 0;
    /**
     * <code>FIGHTING = 1;</code>
     *
     * <pre>
     * 單獨出战中
     * </pre>
     */
    public static final int FIGHTING_VALUE = 1;
    /**
     * <code>EXPEDITION = 2;</code>
     *
     * <pre>
     * 單獨远征中
     * </pre>
     */
    public static final int EXPEDITION_VALUE = 2;
    /**
     * <code>MIXTASK = 3;</code>
     *
     * <pre>
     * 出戰+遠征(混合任務)
     * </pre>
     */
    public static final int MIXTASK_VALUE = 3;


    public final int getNumber() { return value; }

    public static RoleStatus valueOf(int value) {
      switch (value) {
        case 0: return RESTTING;
        case 1: return FIGHTING;
        case 2: return EXPEDITION;
        case 3: return MIXTASK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RoleStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<RoleStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RoleStatus>() {
            public RoleStatus findValueByNumber(int number) {
              return RoleStatus.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(22);
    }

    private static final RoleStatus[] VALUES = values();

    public static RoleStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private RoleStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:RoleStatus)
  }

  /**
   * Protobuf enum {@code NoticeType}
   *
   * <pre>
   *通知类型
   * </pre>
   */
  public enum NoticeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NEW_MAIL = 1;</code>
     *
     * <pre>
     *新邮件
     * </pre>
     */
    NEW_MAIL(0, 1),
    /**
     * <code>NEW_MSG = 2;</code>
     *
     * <pre>
     *新留言
     * </pre>
     */
    NEW_MSG(1, 2),
    /**
     * <code>GIFT_NEW_MSG = 3;</code>
     *
     * <pre>
     * 未领取礼包
     * </pre>
     */
    GIFT_NEW_MSG(2, 3),
    /**
     * <code>ALLIANCE_BOSS_OPEN = 4;</code>
     *
     * <pre>
     * 公会boss开启
     * </pre>
     */
    ALLIANCE_BOSS_OPEN(3, 4),
    /**
     * <code>TEAM_BATTLE_SIGNUP = 5;</code>
     *
     * <pre>
     * 团战报名提醒
     * </pre>
     */
    TEAM_BATTLE_SIGNUP(4, 5),
    /**
     * <code>ARENA_ALL_SIGNUP = 6;</code>
     *
     * <pre>
     * 新竞技记录提醒
     * </pre>
     */
    ARENA_ALL_SIGNUP(5, 6),
    /**
     * <code>MULTI_ELITE_AVALIABLE = 7;</code>
     *
     * <pre>
     * 多人副本可以打提醒
     * </pre>
     */
    MULTI_ELITE_AVALIABLE(6, 7),
    /**
     * <code>ACHIEVEMENT_POINT = 8;</code>
     *
     * <pre>
     * 成就系统红点
     * </pre>
     */
    ACHIEVEMENT_POINT(7, 8),
    ;

    /**
     * <code>NEW_MAIL = 1;</code>
     *
     * <pre>
     *新邮件
     * </pre>
     */
    public static final int NEW_MAIL_VALUE = 1;
    /**
     * <code>NEW_MSG = 2;</code>
     *
     * <pre>
     *新留言
     * </pre>
     */
    public static final int NEW_MSG_VALUE = 2;
    /**
     * <code>GIFT_NEW_MSG = 3;</code>
     *
     * <pre>
     * 未领取礼包
     * </pre>
     */
    public static final int GIFT_NEW_MSG_VALUE = 3;
    /**
     * <code>ALLIANCE_BOSS_OPEN = 4;</code>
     *
     * <pre>
     * 公会boss开启
     * </pre>
     */
    public static final int ALLIANCE_BOSS_OPEN_VALUE = 4;
    /**
     * <code>TEAM_BATTLE_SIGNUP = 5;</code>
     *
     * <pre>
     * 团战报名提醒
     * </pre>
     */
    public static final int TEAM_BATTLE_SIGNUP_VALUE = 5;
    /**
     * <code>ARENA_ALL_SIGNUP = 6;</code>
     *
     * <pre>
     * 新竞技记录提醒
     * </pre>
     */
    public static final int ARENA_ALL_SIGNUP_VALUE = 6;
    /**
     * <code>MULTI_ELITE_AVALIABLE = 7;</code>
     *
     * <pre>
     * 多人副本可以打提醒
     * </pre>
     */
    public static final int MULTI_ELITE_AVALIABLE_VALUE = 7;
    /**
     * <code>ACHIEVEMENT_POINT = 8;</code>
     *
     * <pre>
     * 成就系统红点
     * </pre>
     */
    public static final int ACHIEVEMENT_POINT_VALUE = 8;


    public final int getNumber() { return value; }

    public static NoticeType valueOf(int value) {
      switch (value) {
        case 1: return NEW_MAIL;
        case 2: return NEW_MSG;
        case 3: return GIFT_NEW_MSG;
        case 4: return ALLIANCE_BOSS_OPEN;
        case 5: return TEAM_BATTLE_SIGNUP;
        case 6: return ARENA_ALL_SIGNUP;
        case 7: return MULTI_ELITE_AVALIABLE;
        case 8: return ACHIEVEMENT_POINT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NoticeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NoticeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NoticeType>() {
            public NoticeType findValueByNumber(int number) {
              return NoticeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(23);
    }

    private static final NoticeType[] VALUES = values();

    public static NoticeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NoticeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NoticeType)
  }

  /**
   * Protobuf enum {@code OpenLevelType}
   */
  public enum OpenLevelType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ALLIANCE_OPEN_LEVEL = 12;</code>
     */
    ALLIANCE_OPEN_LEVEL(0, 12),
    ;

    /**
     * <code>ALLIANCE_OPEN_LEVEL = 12;</code>
     */
    public static final int ALLIANCE_OPEN_LEVEL_VALUE = 12;


    public final int getNumber() { return value; }

    public static OpenLevelType valueOf(int value) {
      switch (value) {
        case 12: return ALLIANCE_OPEN_LEVEL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OpenLevelType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<OpenLevelType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OpenLevelType>() {
            public OpenLevelType findValueByNumber(int number) {
              return OpenLevelType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(24);
    }

    private static final OpenLevelType[] VALUES = values();

    public static OpenLevelType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private OpenLevelType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:OpenLevelType)
  }

  /**
   * Protobuf enum {@code kickReason}
   *
   * <pre>
   * 被踢下线原因
   * </pre>
   */
  public enum kickReason
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DUPLICATE_LOGIN = 1;</code>
     */
    DUPLICATE_LOGIN(0, 1),
    /**
     * <code>SERVER_SHUTDOWN = 2;</code>
     */
    SERVER_SHUTDOWN(1, 2),
    /**
     * <code>LOGIN_FORBIDEN = 3;</code>
     */
    LOGIN_FORBIDEN(2, 3),
    /**
     * <code>KICKED_OUT = 4;</code>
     */
    KICKED_OUT(3, 4),
    /**
     * <code>SERVER_RESTART = 5;</code>
     */
    SERVER_RESTART(4, 5),
    ;

    /**
     * <code>DUPLICATE_LOGIN = 1;</code>
     */
    public static final int DUPLICATE_LOGIN_VALUE = 1;
    /**
     * <code>SERVER_SHUTDOWN = 2;</code>
     */
    public static final int SERVER_SHUTDOWN_VALUE = 2;
    /**
     * <code>LOGIN_FORBIDEN = 3;</code>
     */
    public static final int LOGIN_FORBIDEN_VALUE = 3;
    /**
     * <code>KICKED_OUT = 4;</code>
     */
    public static final int KICKED_OUT_VALUE = 4;
    /**
     * <code>SERVER_RESTART = 5;</code>
     */
    public static final int SERVER_RESTART_VALUE = 5;


    public final int getNumber() { return value; }

    public static kickReason valueOf(int value) {
      switch (value) {
        case 1: return DUPLICATE_LOGIN;
        case 2: return SERVER_SHUTDOWN;
        case 3: return LOGIN_FORBIDEN;
        case 4: return KICKED_OUT;
        case 5: return SERVER_RESTART;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<kickReason>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<kickReason>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<kickReason>() {
            public kickReason findValueByNumber(int number) {
              return kickReason.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(25);
    }

    private static final kickReason[] VALUES = values();

    public static kickReason valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private kickReason(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:kickReason)
  }

  /**
   * Protobuf enum {@code ActivityId}
   *
   * <pre>
   * 活动类型
   * </pre>
   */
  public enum ActivityId
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MONTH_CARD = 83;</code>
     *
     * <pre>
     * 月卡
     * </pre>
     */
    MONTH_CARD(0, 83),
    /**
     * <code>ACCUMULATIVE_RECHARGE = 2;</code>
     *
     * <pre>
     * 累计充值（按充值数额累计）
     * </pre>
     */
    ACCUMULATIVE_RECHARGE(1, 2),
    /**
     * <code>CONTINUE_RECHARGE = 3;</code>
     *
     * <pre>
     * 连续充值（按充值天数累计）
     * </pre>
     */
    CONTINUE_RECHARGE(2, 3),
    /**
     * <code>RECHARGE_RATIO = 4;</code>
     *
     * <pre>
     * 充值单项倍数
     * </pre>
     */
    RECHARGE_RATIO(3, 4),
    /**
     * <code>WECHAT = 5;</code>
     *
     * <pre>
     * 关注微信
     * </pre>
     */
    WECHAT(4, 5),
    /**
     * <code>ACCUMULATIVE_CONSUME = 6;</code>
     *
     * <pre>
     * 累计消费（按消费数额累计）
     * </pre>
     */
    ACCUMULATIVE_CONSUME(5, 6),
    /**
     * <code>WORDS_EXCHANGE = 7;</code>
     *
     * <pre>
     * 中秋换字活动
     * </pre>
     */
    WORDS_EXCHANGE(6, 7),
    /**
     * <code>MAP_DROP_REWARD = 8;</code>
     *
     * <pre>
     * 地图掉落N倍活动
     * </pre>
     */
    MAP_DROP_REWARD(7, 8),
    /**
     * <code>DOUBLE_RECHARGE = 9;</code>
     *
     * <pre>
     * 充值双倍
     * </pre>
     */
    DOUBLE_RECHARGE(8, 9),
    /**
     * <code>HOLIDAY_TREASURE = 10;</code>
     *
     * <pre>
     * 假日宝藏
     * </pre>
     */
    HOLIDAY_TREASURE(9, 10),
    /**
     * <code>BETA_TEST_WORDS = 11;</code>
     *
     * <pre>
     * 公测字活动
     * </pre>
     */
    BETA_TEST_WORDS(10, 11),
    /**
     * <code>COINS_MAP_DROP_RATIO = 12;</code>
     *
     * <pre>
     * 金币掉落N倍
     * </pre>
     */
    COINS_MAP_DROP_RATIO(11, 12),
    /**
     * <code>EXP_MAP_DROP_RATIO = 13;</code>
     *
     * <pre>
     * 经验掉落N倍
     * </pre>
     */
    EXP_MAP_DROP_RATIO(12, 13),
    /**
     * <code>ARENA_REWARD_RATIO = 14;</code>
     *
     * <pre>
     * 竞技场奖励N倍
     * </pre>
     */
    ARENA_REWARD_RATIO(13, 14),
    /**
     * <code>EQUIP_MAP_DROP_RATIO = 15;</code>
     *
     * <pre>
     * 装备掉落双倍
     * </pre>
     */
    EQUIP_MAP_DROP_RATIO(14, 15),
    /**
     * <code>QUICK_REWARD_RATIO = 16;</code>
     *
     * <pre>
     * 快速战斗收益双倍
     * </pre>
     */
    QUICK_REWARD_RATIO(15, 16),
    /**
     * <code>SMELT_VALUE_RATIO = 17;</code>
     *
     * <pre>
     * 熔炼值双倍
     * </pre>
     */
    SMELT_VALUE_RATIO(16, 17),
    /**
     * <code>EQUIP_SELL_RATIO = 18;</code>
     *
     * <pre>
     * 装备出售价格双倍
     * </pre>
     */
    EQUIP_SELL_RATIO(17, 18),
    /**
     * <code>QUICK_COST_RATIO = 19;</code>
     *
     * <pre>
     * 快速战斗消耗减半
     * </pre>
     */
    QUICK_COST_RATIO(18, 19),
    /**
     * <code>REGISTER_CYCLE = 20;</code>
     *
     * <pre>
     * 玩家注册天数活动
     * </pre>
     */
    REGISTER_CYCLE(19, 20),
    /**
     * <code>SINGLE_RECHARGE = 21;</code>
     *
     * <pre>
     * 每日单笔充值返利
     * </pre>
     */
    SINGLE_RECHARGE(20, 21),
    /**
     * <code>RECHARGE_REBATE = 22;</code>
     *
     * <pre>
     * 充值返利活动
     * </pre>
     */
    RECHARGE_REBATE(21, 22),
    /**
     * <code>VIP_WELFARE = 23;</code>
     *
     * <pre>
     * vip福利
     * </pre>
     */
    VIP_WELFARE(22, 23),
    /**
     * <code>WEEK_CARD = 24;</code>
     *
     * <pre>
     * 周卡
     * </pre>
     */
    WEEK_CARD(23, 24),
    /**
     * <code>EXPEDITION_ARMORY = 25;</code>
     *
     * <pre>
     * 远征物资
     * </pre>
     */
    EXPEDITION_ARMORY(24, 25),
    /**
     * <code>TIME_LIMIT_PURCHASE = 26;</code>
     *
     * <pre>
     * 限时限购
     * </pre>
     */
    TIME_LIMIT_PURCHASE(25, 26),
    /**
     * <code>ACCUMULATIVE_LOGIN = 27;</code>
     *
     * <pre>
     * 累计登陆
     * </pre>
     */
    ACCUMULATIVE_LOGIN(26, 27),
    /**
     * <code>RECHARGE_REBATE2 = 28;</code>
     *
     * <pre>
     * 充值返利活动2，周期开放
     * </pre>
     */
    RECHARGE_REBATE2(27, 28),
    /**
     * <code>GEM_COMPOUND = 29;</code>
     *
     * <pre>
     * 宝石工坊
     * </pre>
     */
    GEM_COMPOUND(28, 29),
    /**
     * <code>CRAZY_ROULETTE = 30;</code>
     *
     * <pre>
     * 疯狂转轮
     * </pre>
     */
    CRAZY_ROULETTE(29, 30),
    /**
     * <code>LUCK_BOX = 31;</code>
     *
     * <pre>
     * 幸运宝箱
     * </pre>
     */
    LUCK_BOX(30, 31),
    /**
     * <code>STAR_EVALUATION = 32;</code>
     *
     * <pre>
     * 5 星好评
     * </pre>
     */
    STAR_EVALUATION(31, 32),
    /**
     * <code>FRIEND_INVITE = 33;</code>
     *
     * <pre>
     * 好友邀请
     * </pre>
     */
    FRIEND_INVITE(32, 33),
    /**
     * <code>TAXI_CODE = 34;</code>
     *
     * <pre>
     * 出租车抵价
     * </pre>
     */
    TAXI_CODE(33, 34),
    /**
     * <code>SNOWFIELD_TREASURE = 35;</code>
     *
     * <pre>
     * 雪地寻宝
     * </pre>
     */
    SNOWFIELD_TREASURE(34, 35),
    /**
     * <code>TREASURE_RAIDER = 36;</code>
     *
     * <pre>
     * 奇遇宝箱
     * </pre>
     */
    TREASURE_RAIDER(35, 36),
    /**
     * <code>COMMENDATION_TRIBE = 37;</code>
     *
     * <pre>
     * 部族的嘉奖
     * </pre>
     */
    COMMENDATION_TRIBE(36, 37),
    /**
     * <code>FORTUNE = 38;</code>
     *
     * <pre>
     * 财神献礼
     * </pre>
     */
    FORTUNE(37, 38),
    /**
     * <code>SHOP_REFRESH_PRICE_RATIO = 39;</code>
     *
     * <pre>
     * 商店刷新价格减半
     * </pre>
     */
    SHOP_REFRESH_PRICE_RATIO(38, 39),
    /**
     * <code>FIND_TREASURE = 40;</code>
     *
     * <pre>
     * 万家灯火
     * </pre>
     */
    FIND_TREASURE(39, 40),
    /**
     * <code>GOLD_CLUB = 41;</code>
     *
     * <pre>
     * 财富俱乐部
     * </pre>
     */
    GOLD_CLUB(40, 41),
    /**
     * <code>GRAB_RED_ENVELOPE = 42;</code>
     *
     * <pre>
     * 抢红包
     * </pre>
     */
    GRAB_RED_ENVELOPE(41, 42),
    /**
     * <code>CHAT_LUCK = 43;</code>
     *
     * <pre>
     * 聊天彩蛋
     * </pre>
     */
    CHAT_LUCK(42, 43),
    /**
     * <code>RANK_GIFT = 44;</code>
     *
     * <pre>
     * 排行献礼
     * </pre>
     */
    RANK_GIFT(43, 44),
    /**
     * <code>FOREVER_CARD = 45;</code>
     *
     * <pre>
     * 终身卡
     * </pre>
     */
    FOREVER_CARD(44, 45),
    /**
     * <code>SALE_PACKET = 82;</code>
     *
     * <pre>
     * 打折礼包
     * </pre>
     */
    SALE_PACKET(45, 82),
    /**
     * <code>HOUR_CARD = 51;</code>
     *
     * <pre>
     *小时卡
     * </pre>
     */
    HOUR_CARD(46, 51),
    /**
     * <code>FIRST_GIFTPACK = 84;</code>
     *
     * <pre>
     *首充礼包 (防止和国内活动冲突)
     * </pre>
     */
    FIRST_GIFTPACK(47, 84),
    /**
     * <code>MYSTERY_SHOP = 81;</code>
     *
     * <pre>
     *黑市
     * </pre>
     */
    MYSTERY_SHOP(48, 81),
    /**
     * <code>LIMIT_RECHARGE = 85;</code>
     *
     * <pre>
     *限时限购for77
     * </pre>
     */
    LIMIT_RECHARGE(50, 85),
    /**
     * <code>EXCHANGE_DOUBLE_SEVEN = 86;</code>
     *
     * <pre>
     *兑换for77
     * </pre>
     */
    EXCHANGE_DOUBLE_SEVEN(51, 86),
    /**
     * <code>DAILY_QUEST = 87;</code>
     *
     * <pre>
     *签到日常
     * </pre>
     */
    DAILY_QUEST(52, 87),
    /**
     * <code>GOLD_FISH = 88;</code>
     *
     * <pre>
     * 捞金鱼活动
     * </pre>
     */
    GOLD_FISH(53, 88),
    /**
     * <code>GODEQUIP_FORGING = 89;</code>
     *
     * <pre>
     * 神装锻造
     * </pre>
     */
    GODEQUIP_FORGING(54, 89),
    /**
     * <code>SHOOT_ACTIVITY = 90;</code>
     *
     * <pre>
     * 制服壳场
     * </pre>
     */
    SHOOT_ACTIVITY(55, 90),
    /**
     * <code>PRINCE_DEVILS = 91;</code>
     *
     * <pre>
     * 魔王的宝藏
     * </pre>
     */
    PRINCE_DEVILS(56, 91),
    /**
     * <code>DISCOUNT_GIFT = 94;</code>
     *
     * <pre>
     * 等级折扣礼包
     * </pre>
     */
    DISCOUNT_GIFT(57, 94),
    /**
     * <code>VIP_PACKAGE = 95;</code>
     *
     * <pre>
     * vip礼包
     * </pre>
     */
    VIP_PACKAGE(58, 95),
    /**
     * <code>NEW_WEEK_CARD = 96;</code>
     *
     * <pre>
     * 新周卡
     * </pre>
     */
    NEW_WEEK_CARD(59, 96),
    /**
     * <code>GROWTH_FUND = 97;</code>
     *
     * <pre>
     * 成长基金
     * </pre>
     */
    GROWTH_FUND(60, 97),
    /**
     * <code>Lucky_MERCENARY = 98;</code>
     *
     * <pre>
     * 幸运副将活动
     * </pre>
     */
    Lucky_MERCENARY(61, 98),
    /**
     * <code>NEW_TREASURE_RAIDER = 99;</code>
     *
     * <pre>
     * 新夺宝奇兵活动
     * </pre>
     */
    NEW_TREASURE_RAIDER(62, 99),
    /**
     * <code>CHAT_SKIN = 100;</code>
     *
     * <pre>
     * 购买皮肤活动
     * </pre>
     */
    CHAT_SKIN(63, 100),
    /**
     * <code>HAREM = 101;</code>
     *
     * <pre>
     * 王的后宫
     * </pre>
     */
    HAREM(64, 101),
    /**
     * <code>FRAGMENT_EXCHANGE = 102;</code>
     *
     * <pre>
     * 碎片限时兑换活动
     * </pre>
     */
    FRAGMENT_EXCHANGE(65, 102),
    /**
     * <code>FAIRY_BLESS = 103;</code>
     *
     * <pre>
     * 仙女的保佑
     * </pre>
     */
    FAIRY_BLESS(66, 103),
    /**
     * <code>MAIDEN_ENCOUNTER = 104;</code>
     *
     * <pre>
     * 少女的邂逅
     * </pre>
     */
    MAIDEN_ENCOUNTER(67, 104),
    /**
     * <code>OBON = 105;</code>
     *
     * <pre>
     * 鬼节活动
     * </pre>
     */
    OBON(68, 105),
    /**
     * <code>WELFARE_REWARD = 106;</code>
     *
     * <pre>
     * 天降元宝活动
     * </pre>
     */
    WELFARE_REWARD(69, 106),
    /**
     * <code>NEW_UR = 107;</code>
     *
     * <pre>
     * 新手UR活动
     * </pre>
     */
    NEW_UR(70, 107),
    /**
     * <code>TURNTABLE = 108;</code>
     *
     * <pre>
     * 大转盘活动
     * </pre>
     */
    TURNTABLE(71, 108),
    /**
     * <code>HALLOWEEN = 109;</code>
     *
     * <pre>
     * 万圣节活动
     * </pre>
     */
    HALLOWEEN(72, 109),
    /**
     * <code>QUICK_BATTLE_DOUBLE = 110;</code>
     *
     * <pre>
     * 高速战斗券使用上限翻倍活动
     * </pre>
     */
    QUICK_BATTLE_DOUBLE(73, 110),
    /**
     * <code>RELEASE_UR = 111;</code>
     *
     * <pre>
     * 神将投放复刻版
     * </pre>
     */
    RELEASE_UR(74, 111),
    /**
     * <code>FUN_ACTIVITY = 112;</code>
     *
     * <pre>
     *开服七天乐活动
     * </pre>
     */
    FUN_ACTIVITY(75, 112),
    /**
     * <code>ACCUMULATIVE_LOGIN_SIGNED = 113;</code>
     *
     * <pre>
     *30天累计签到活动
     * </pre>
     */
    ACCUMULATIVE_LOGIN_SIGNED(76, 113),
    /**
     * <code>ACCUMULATIVE_LOGIN_SEVEN = 114;</code>
     *
     * <pre>
     *新手九級限定7天登录活动
     * </pre>
     */
    ACCUMULATIVE_LOGIN_SEVEN(77, 114),
    /**
     * <code>NEW_ND = 115;</code>
     *
     * <pre>
     *新手扭蛋限定活动
     * </pre>
     */
    NEW_ND(78, 115),
    /**
     * <code>RELEASE_UR2 = 116;</code>
     *
     * <pre>
     * 神将投放复刻版
     * </pre>
     */
    RELEASE_UR2(79, 116),
    /**
     * <code>NEW_TREASURE_RAIDER2 = 117;</code>
     *
     * <pre>
     * 新夺宝奇兵活动 复刻版
     * </pre>
     */
    NEW_TREASURE_RAIDER2(80, 117),
    /**
     * <code>CONTINUE_RECHARGE_MONEY = 118;</code>
     *
     * <pre>
     * 累计充值活动
     * </pre>
     */
    CONTINUE_RECHARGE_MONEY(81, 118),
    /**
     * <code>ACCUMULATIVE_CONSUMEITEM = 119;</code>
     *
     * <pre>
     * 累计消费 购买道具次数
     * </pre>
     */
    ACCUMULATIVE_CONSUMEITEM(82, 119),
    /**
     * <code>NEW_TREASURE_RAIDER3 = 120;</code>
     *
     * <pre>
     * 新夺宝奇兵活动3 复刻版
     * </pre>
     */
    NEW_TREASURE_RAIDER3(83, 120),
    /**
     * <code>RELEASE_UR3 = 121;</code>
     *
     * <pre>
     * 神将投放复刻版
     * </pre>
     */
    RELEASE_UR3(84, 121),
    /**
     * <code>ACTIVECOMPLIANCE = 122;</code>
     *
     * <pre>
     * 活跃度达标活动
     * </pre>
     */
    ACTIVECOMPLIANCE(85, 122),
    /**
     * <code>ACTIVITY123_UR = 123;</code>
     *
     * <pre>
     * 束缚彼女活动
     * </pre>
     */
    ACTIVITY123_UR(86, 123),
    /**
     * <code>ACTIVITY124_RECHARGE_RETURN = 124;</code>
     *
     * <pre>
     * 新充值返利抽奖活动
     * </pre>
     */
    ACTIVITY124_RECHARGE_RETURN(87, 124),
    /**
     * <code>ACTIVITY125_WEAPON = 125;</code>
     *
     * <pre>
     * 武器屋
     * </pre>
     */
    ACTIVITY125_WEAPON(88, 125),
    /**
     * <code>WELFAREBYREGDATE_REWARD = 126;</code>
     *
     * <pre>
     * 天降元宝根据玩家注册时间
     * </pre>
     */
    WELFAREBYREGDATE_REWARD(89, 126),
    /**
     * <code>ACTIVITY127_UR = 127;</code>
     *
     * <pre>
     * 武器召唤师
     * </pre>
     */
    ACTIVITY127_UR(90, 127),
    /**
     * <code>ACTIVITY128_UR = 128;</code>
     *
     * <pre>
     * 抽卡积分排行活动
     * </pre>
     */
    ACTIVITY128_UR(91, 128),
    /**
     * <code>CONSUME_WEEK_CARD = 129;</code>
     *
     * <pre>
     * 消費型進階月卡
     * </pre>
     */
    CONSUME_WEEK_CARD(92, 129),
    /**
     * <code>CONSUME_MONTH_CARD = 130;</code>
     *
     * <pre>
     * 消费型基礎月卡
     * </pre>
     */
    CONSUME_MONTH_CARD(93, 130),
    /**
     * <code>CONTINUE_RECHARGE131 = 131;</code>
     *
     * <pre>
     * 累积连续充值
     * </pre>
     */
    CONTINUE_RECHARGE131(94, 131),
    /**
     * <code>ACTIVITY132_LEVEL_GIFT = 132;</code>
     *
     * <pre>
     * 等级礼包活动
     * </pre>
     */
    ACTIVITY132_LEVEL_GIFT(95, 132),
    /**
     * <code>ACTIVITY133_ONLINE_GIFT = 133;</code>
     *
     * <pre>
     * 在线礼包活动
     * </pre>
     */
    ACTIVITY133_ONLINE_GIFT(96, 133),
    /**
     * <code>ACTIVITY134_WEEKEND_GIFT = 134;</code>
     *
     * <pre>
     * 在线礼包活动
     * </pre>
     */
    ACTIVITY134_WEEKEND_GIFT(97, 134),
    /**
     * <code>NEW_TREASURE_RAIDER4 = 135;</code>
     *
     * <pre>
     * 新夺宝奇兵活动4 复刻版
     * </pre>
     */
    NEW_TREASURE_RAIDER4(98, 135),
    /**
     * <code>EXCHANGE_SHOP = 136;</code>
     *
     * <pre>
     * 兑换所
     * </pre>
     */
    EXCHANGE_SHOP(99, 136),
    /**
     * <code>ACTIVITY137_RECHARGE_RETURN = 137;</code>
     *
     * <pre>
     * 老虎机返利活动
     * </pre>
     */
    ACTIVITY137_RECHARGE_RETURN(100, 137),
    /**
     * <code>NEW_TREASURE_RAIDER139 = 139;</code>
     *
     * <pre>
     *新夺宝奇兵活动 多副将版
     * </pre>
     */
    NEW_TREASURE_RAIDER139(101, 139),
    /**
     * <code>RUSSIADISHWHEEL = 140;</code>
     *
     * <pre>
     *俄罗斯轮盘
     * </pre>
     */
    RUSSIADISHWHEEL(102, 140),
    /**
     * <code>ACTIVITY141_RICHMAN = 141;</code>
     *
     * <pre>
     *大富翁
     * </pre>
     */
    ACTIVITY141_RICHMAN(103, 141),
    /**
     * <code>ACTIVITY142_EXCHANGE_SHOP = 142;</code>
     *
     * <pre>
     * 兑换所2
     * </pre>
     */
    ACTIVITY142_EXCHANGE_SHOP(104, 142),
    /**
     * <code>ACTIVITY143_PIRATE = 143;</code>
     *
     * <pre>
     * 海盜寶箱
     * </pre>
     */
    ACTIVITY143_PIRATE(105, 143),
    /**
     * <code>ACTIVITY144_LITTLE_TEST = 144;</code>
     *
     * <pre>
     * 性奴小學堂
     * </pre>
     */
    ACTIVITY144_LITTLE_TEST(106, 144),
    /**
     * <code>ACTIVITY145_TENDAY_CHALLENGE = 145;</code>
     *
     * <pre>
     * 10日挑戰
     * </pre>
     */
    ACTIVITY145_TENDAY_CHALLENGE(107, 145),
    /**
     * <code>ACTIVITY146_CHOSEN_ONE = 146;</code>
     *
     * <pre>
     * 英靈召喚
     * </pre>
     */
    ACTIVITY146_CHOSEN_ONE(108, 146),
    /**
     * <code>ACTIVITY147_WISHING_WELL = 147;</code>
     *
     * <pre>
     * 許願輪
     * </pre>
     */
    ACTIVITY147_WISHING_WELL(109, 147),
    /**
     * <code>ACTIVITY148_MARRY_GAME = 148;</code>
     *
     * <pre>
     * 新手九級限定小瑪莉
     * </pre>
     */
    ACTIVITY148_MARRY_GAME(110, 148),
    /**
     * <code>ACTIVITY149_THREE_DAY = 149;</code>
     *
     * <pre>
     * 新手九級限定三天任務 
     * </pre>
     */
    ACTIVITY149_THREE_DAY(111, 149),
    /**
     * <code>ACTIVITY150_LIMIT_GIFT = 150;</code>
     *
     * <pre>
     * 新手九級限定禮包
     * </pre>
     */
    ACTIVITY150_LIMIT_GIFT(112, 150),
    /**
     * <code>ACTIVITY151_STAGE_GIFT = 151;</code>
     *
     * <pre>
     * 關卡限定禮包
     * </pre>
     */
    ACTIVITY151_STAGE_GIFT(113, 151),
    /**
     * <code>ACTIVITY152_DRAMA_GIFT = 152;</code>
     *
     * <pre>
     * 英雄劇情禮物
     * </pre>
     */
    ACTIVITY152_DRAMA_GIFT(114, 152),
    /**
     * <code>ACTIVITY153_RANK_GIFT = 153;</code>
     *
     * <pre>
     * 排行榜禮物
     * </pre>
     */
    ACTIVITY153_RANK_GIFT(115, 153),
    /**
     * <code>ACTIVITY154_CALL_OF_SPRITE = 154;</code>
     *
     * <pre>
     * 精靈召喚
     * </pre>
     */
    ACTIVITY154_CALL_OF_SPRITE(116, 154),
    /**
     * <code>ACTIVITY155_ACHIEVE_LEVEL = 155;</code>
     *
     * <pre>
     * 活動等級成就
     * </pre>
     */
    ACTIVITY155_ACHIEVE_LEVEL(117, 155),
    /**
     * <code>ACTIVITY156_ACHIEVE_FIGHTVALUE = 156;</code>
     *
     * <pre>
     * 活動戰力成就
     * </pre>
     */
    ACTIVITY156_ACHIEVE_FIGHTVALUE(118, 156),
    /**
     * <code>ACTIVITY157_LOGIN_TEN_DRAW = 157;</code>
     *
     * <pre>
     * 累積登入送十抽
     * </pre>
     */
    ACTIVITY157_LOGIN_TEN_DRAW(119, 157),
    /**
     * <code>ACTIVITY158_CALL_OF_RACE = 158;</code>
     *
     * <pre>
     * 種族召喚
     * </pre>
     */
    ACTIVITY158_CALL_OF_RACE(120, 158),
    /**
     * <code>ACTIVITY159_VIP_POINT = 159;</code>
     *
     * <pre>
     * 每日累積VIP點數活動
     * </pre>
     */
    ACTIVITY159_VIP_POINT(121, 159),
    /**
     * <code>ACTIVITY160_NP_CONTINUE_RECHARGE = 160;</code>
     *
     * <pre>
     * 累積儲值活動
     * </pre>
     */
    ACTIVITY160_NP_CONTINUE_RECHARGE(122, 160),
    /**
     * <code>ACTIVITY161_SUPPORT_CALENDER = 161;</code>
     *
     * <pre>
     * 收費打卡獎勵活動
     * </pre>
     */
    ACTIVITY161_SUPPORT_CALENDER(123, 161),
    /**
     * <code>ACTIVITY162_GROWTH_LV = 162;</code>
     *
     * <pre>
     * 成長禮物LV
     * </pre>
     */
    ACTIVITY162_GROWTH_LV(124, 162),
    /**
     * <code>ACTIVITY163_GROWTH_CH = 163;</code>
     *
     * <pre>
     * 成長禮物CH
     * </pre>
     */
    ACTIVITY163_GROWTH_CH(125, 163),
    /**
     * <code>ACTIVITY164_GROWTH_TW = 164;</code>
     *
     * <pre>
     * 成長禮物TW
     * </pre>
     */
    ACTIVITY164_GROWTH_TW(126, 164),
    /**
     * <code>ACTIVITY165_MINING = 165;</code>
     *
     * <pre>
     * 挖礦活動165
     * </pre>
     */
    ACTIVITY165_MINING(127, 165),
    /**
     * <code>ACTIVITY166_CALL_OF_FRIENDSHIP = 166;</code>
     *
     * <pre>
     * 友情召喚
     * </pre>
     */
    ACTIVITY166_CALL_OF_FRIENDSHIP(128, 166),
    /**
     * <code>ACTIVITY167_Consume_Summom = 167;</code>
     *
     * <pre>
     * 首儲1500抽
     * </pre>
     */
    ACTIVITY167_Consume_Summom(129, 167),
    /**
     * <code>ACTIVITY168_SubScription = 168;</code>
     *
     * <pre>
     * 特權購買
     * </pre>
     */
    ACTIVITY168_SubScription(130, 168),
    /**
     * <code>ACTIVITY169_JumpGift = 169;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    ACTIVITY169_JumpGift(131, 169),
    /**
     * <code>ACTIVITY170_JumpGift = 170;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    ACTIVITY170_JumpGift(132, 170),
    /**
     * <code>ACTIVITY172_PICKUP = 172;</code>
     *
     * <pre>
     * PICKUP
     * </pre>
     */
    ACTIVITY172_PICKUP(133, 172),
    /**
     * <code>ACTIVITY173_NEWROLE = 173;</code>
     *
     * <pre>
     * 新角池活動
     * </pre>
     */
    ACTIVITY173_NEWROLE(134, 173),
    /**
     * <code>ACTIVITY175_Glory_Hole = 175;</code>
     *
     * <pre>
     * 壁尻活動
     * </pre>
     */
    ACTIVITY175_Glory_Hole(135, 175),
    /**
     * <code>ACTIVITY176_Activity_Exchange = 176;</code>
     *
     * <pre>
     *活動兌換所
     * </pre>
     */
    ACTIVITY176_Activity_Exchange(136, 176),
    /**
     * <code>ACTIVITY177_Failed_Gift = 177;</code>
     *
     * <pre>
     * 失敗者禮包
     * </pre>
     */
    ACTIVITY177_Failed_Gift(137, 177),
    /**
     * <code>ACTIVITY178_CALL_OF_EQUIP = 178;</code>
     *
     * <pre>
     * 專武召喚
     * </pre>
     */
    ACTIVITY178_CALL_OF_EQUIP(138, 178),
    /**
     * <code>ACTIVITY179_Step_Gift = 179;</code>
     *
     * <pre>
     * 階段禮包
     * </pre>
     */
    ACTIVITY179_Step_Gift(139, 179),
    /**
     * <code>ACTIVITY180_Free_Summom = 180;</code>
     *
     * <pre>
     * 免費1500抽
     * </pre>
     */
    ACTIVITY180_Free_Summom(140, 180),
    /**
     * <code>ACTIVITY181_JumpGift = 181;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    ACTIVITY181_JumpGift(141, 181),
    /**
     * <code>ACTIVITY182_JumpGift = 182;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    ACTIVITY182_JumpGift(142, 182),
    /**
     * <code>ACTIVITY183_JumpGift = 183;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    ACTIVITY183_JumpGift(143, 183),
    /**
     * <code>ACTIVITY184_JumpGift = 184;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    ACTIVITY184_JumpGift(144, 184),
    /**
     * <code>ACTIVITY185_JumpGift = 185;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    ACTIVITY185_JumpGift(145, 185),
    /**
     * <code>ACTIVITY186_JumpGift = 186;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    ACTIVITY186_JumpGift(146, 186),
    /**
     * <code>ACTIVITY187_MaxJump = 187;</code>
     *
     * <pre>
     * 強力彈跳活動禮包
     * </pre>
     */
    ACTIVITY187_MaxJump(147, 187),
    /**
     * <code>ACTIVITY190_StepSummom = 190;</code>
     *
     * <pre>
     * 累積返利900抽
     * </pre>
     */
    ACTIVITY190_StepSummom(148, 190),
    /**
     * <code>ACTIVITY191_CycleStage = 191;</code>
     *
     * <pre>
     * 循環地城活動
     * </pre>
     */
    ACTIVITY191_CycleStage(149, 191),
    /**
     * <code>ACTIVITY192_RechargeBounce = 192;</code>
     *
     * <pre>
     *累儲累消累充
     * </pre>
     */
    ACTIVITY192_RechargeBounce(150, 192),
    /**
     * <code>ACTIVITY193_SingleBoss = 193;</code>
     *
     * <pre>
     *單人強敵活動
     * </pre>
     */
    ACTIVITY193_SingleBoss(151, 193),
    /**
     * <code>ACTIVITY194_SeasonTower = 194;</code>
     *
     * <pre>
     *季爬塔活動
     * </pre>
     */
    ACTIVITY194_SeasonTower(152, 194),
    /**
     * <code>ACTIVITY195_PuzzleBattle = 195;</code>
     *
     * <pre>
     * 九宮格活動
     * </pre>
     */
    ACTIVITY195_PuzzleBattle(153, 195),
    /**
     * <code>ACTIVITY196_CycleStage_Part2 = 196;</code>
     *
     * <pre>
     * 循環地城活動復刻
     * </pre>
     */
    ACTIVITY196_CycleStage_Part2(154, 196),
    /**
     * <code>ACTIVITY197_SUPER_PICKUP = 197;</code>
     *
     * <pre>
     * 超級PICKUP
     * </pre>
     */
    ACTIVITY197_SUPER_PICKUP(155, 197),
    ;

    /**
     * <code>HERO_TOKEN_SHOP = 82;</code>
     *
     * <pre>
     *英雄令商店打折
     * </pre>
     */
    public static final ActivityId HERO_TOKEN_SHOP = SALE_PACKET;
    /**
     * <code>MONTH_CARD = 83;</code>
     *
     * <pre>
     * 月卡
     * </pre>
     */
    public static final int MONTH_CARD_VALUE = 83;
    /**
     * <code>ACCUMULATIVE_RECHARGE = 2;</code>
     *
     * <pre>
     * 累计充值（按充值数额累计）
     * </pre>
     */
    public static final int ACCUMULATIVE_RECHARGE_VALUE = 2;
    /**
     * <code>CONTINUE_RECHARGE = 3;</code>
     *
     * <pre>
     * 连续充值（按充值天数累计）
     * </pre>
     */
    public static final int CONTINUE_RECHARGE_VALUE = 3;
    /**
     * <code>RECHARGE_RATIO = 4;</code>
     *
     * <pre>
     * 充值单项倍数
     * </pre>
     */
    public static final int RECHARGE_RATIO_VALUE = 4;
    /**
     * <code>WECHAT = 5;</code>
     *
     * <pre>
     * 关注微信
     * </pre>
     */
    public static final int WECHAT_VALUE = 5;
    /**
     * <code>ACCUMULATIVE_CONSUME = 6;</code>
     *
     * <pre>
     * 累计消费（按消费数额累计）
     * </pre>
     */
    public static final int ACCUMULATIVE_CONSUME_VALUE = 6;
    /**
     * <code>WORDS_EXCHANGE = 7;</code>
     *
     * <pre>
     * 中秋换字活动
     * </pre>
     */
    public static final int WORDS_EXCHANGE_VALUE = 7;
    /**
     * <code>MAP_DROP_REWARD = 8;</code>
     *
     * <pre>
     * 地图掉落N倍活动
     * </pre>
     */
    public static final int MAP_DROP_REWARD_VALUE = 8;
    /**
     * <code>DOUBLE_RECHARGE = 9;</code>
     *
     * <pre>
     * 充值双倍
     * </pre>
     */
    public static final int DOUBLE_RECHARGE_VALUE = 9;
    /**
     * <code>HOLIDAY_TREASURE = 10;</code>
     *
     * <pre>
     * 假日宝藏
     * </pre>
     */
    public static final int HOLIDAY_TREASURE_VALUE = 10;
    /**
     * <code>BETA_TEST_WORDS = 11;</code>
     *
     * <pre>
     * 公测字活动
     * </pre>
     */
    public static final int BETA_TEST_WORDS_VALUE = 11;
    /**
     * <code>COINS_MAP_DROP_RATIO = 12;</code>
     *
     * <pre>
     * 金币掉落N倍
     * </pre>
     */
    public static final int COINS_MAP_DROP_RATIO_VALUE = 12;
    /**
     * <code>EXP_MAP_DROP_RATIO = 13;</code>
     *
     * <pre>
     * 经验掉落N倍
     * </pre>
     */
    public static final int EXP_MAP_DROP_RATIO_VALUE = 13;
    /**
     * <code>ARENA_REWARD_RATIO = 14;</code>
     *
     * <pre>
     * 竞技场奖励N倍
     * </pre>
     */
    public static final int ARENA_REWARD_RATIO_VALUE = 14;
    /**
     * <code>EQUIP_MAP_DROP_RATIO = 15;</code>
     *
     * <pre>
     * 装备掉落双倍
     * </pre>
     */
    public static final int EQUIP_MAP_DROP_RATIO_VALUE = 15;
    /**
     * <code>QUICK_REWARD_RATIO = 16;</code>
     *
     * <pre>
     * 快速战斗收益双倍
     * </pre>
     */
    public static final int QUICK_REWARD_RATIO_VALUE = 16;
    /**
     * <code>SMELT_VALUE_RATIO = 17;</code>
     *
     * <pre>
     * 熔炼值双倍
     * </pre>
     */
    public static final int SMELT_VALUE_RATIO_VALUE = 17;
    /**
     * <code>EQUIP_SELL_RATIO = 18;</code>
     *
     * <pre>
     * 装备出售价格双倍
     * </pre>
     */
    public static final int EQUIP_SELL_RATIO_VALUE = 18;
    /**
     * <code>QUICK_COST_RATIO = 19;</code>
     *
     * <pre>
     * 快速战斗消耗减半
     * </pre>
     */
    public static final int QUICK_COST_RATIO_VALUE = 19;
    /**
     * <code>REGISTER_CYCLE = 20;</code>
     *
     * <pre>
     * 玩家注册天数活动
     * </pre>
     */
    public static final int REGISTER_CYCLE_VALUE = 20;
    /**
     * <code>SINGLE_RECHARGE = 21;</code>
     *
     * <pre>
     * 每日单笔充值返利
     * </pre>
     */
    public static final int SINGLE_RECHARGE_VALUE = 21;
    /**
     * <code>RECHARGE_REBATE = 22;</code>
     *
     * <pre>
     * 充值返利活动
     * </pre>
     */
    public static final int RECHARGE_REBATE_VALUE = 22;
    /**
     * <code>VIP_WELFARE = 23;</code>
     *
     * <pre>
     * vip福利
     * </pre>
     */
    public static final int VIP_WELFARE_VALUE = 23;
    /**
     * <code>WEEK_CARD = 24;</code>
     *
     * <pre>
     * 周卡
     * </pre>
     */
    public static final int WEEK_CARD_VALUE = 24;
    /**
     * <code>EXPEDITION_ARMORY = 25;</code>
     *
     * <pre>
     * 远征物资
     * </pre>
     */
    public static final int EXPEDITION_ARMORY_VALUE = 25;
    /**
     * <code>TIME_LIMIT_PURCHASE = 26;</code>
     *
     * <pre>
     * 限时限购
     * </pre>
     */
    public static final int TIME_LIMIT_PURCHASE_VALUE = 26;
    /**
     * <code>ACCUMULATIVE_LOGIN = 27;</code>
     *
     * <pre>
     * 累计登陆
     * </pre>
     */
    public static final int ACCUMULATIVE_LOGIN_VALUE = 27;
    /**
     * <code>RECHARGE_REBATE2 = 28;</code>
     *
     * <pre>
     * 充值返利活动2，周期开放
     * </pre>
     */
    public static final int RECHARGE_REBATE2_VALUE = 28;
    /**
     * <code>GEM_COMPOUND = 29;</code>
     *
     * <pre>
     * 宝石工坊
     * </pre>
     */
    public static final int GEM_COMPOUND_VALUE = 29;
    /**
     * <code>CRAZY_ROULETTE = 30;</code>
     *
     * <pre>
     * 疯狂转轮
     * </pre>
     */
    public static final int CRAZY_ROULETTE_VALUE = 30;
    /**
     * <code>LUCK_BOX = 31;</code>
     *
     * <pre>
     * 幸运宝箱
     * </pre>
     */
    public static final int LUCK_BOX_VALUE = 31;
    /**
     * <code>STAR_EVALUATION = 32;</code>
     *
     * <pre>
     * 5 星好评
     * </pre>
     */
    public static final int STAR_EVALUATION_VALUE = 32;
    /**
     * <code>FRIEND_INVITE = 33;</code>
     *
     * <pre>
     * 好友邀请
     * </pre>
     */
    public static final int FRIEND_INVITE_VALUE = 33;
    /**
     * <code>TAXI_CODE = 34;</code>
     *
     * <pre>
     * 出租车抵价
     * </pre>
     */
    public static final int TAXI_CODE_VALUE = 34;
    /**
     * <code>SNOWFIELD_TREASURE = 35;</code>
     *
     * <pre>
     * 雪地寻宝
     * </pre>
     */
    public static final int SNOWFIELD_TREASURE_VALUE = 35;
    /**
     * <code>TREASURE_RAIDER = 36;</code>
     *
     * <pre>
     * 奇遇宝箱
     * </pre>
     */
    public static final int TREASURE_RAIDER_VALUE = 36;
    /**
     * <code>COMMENDATION_TRIBE = 37;</code>
     *
     * <pre>
     * 部族的嘉奖
     * </pre>
     */
    public static final int COMMENDATION_TRIBE_VALUE = 37;
    /**
     * <code>FORTUNE = 38;</code>
     *
     * <pre>
     * 财神献礼
     * </pre>
     */
    public static final int FORTUNE_VALUE = 38;
    /**
     * <code>SHOP_REFRESH_PRICE_RATIO = 39;</code>
     *
     * <pre>
     * 商店刷新价格减半
     * </pre>
     */
    public static final int SHOP_REFRESH_PRICE_RATIO_VALUE = 39;
    /**
     * <code>FIND_TREASURE = 40;</code>
     *
     * <pre>
     * 万家灯火
     * </pre>
     */
    public static final int FIND_TREASURE_VALUE = 40;
    /**
     * <code>GOLD_CLUB = 41;</code>
     *
     * <pre>
     * 财富俱乐部
     * </pre>
     */
    public static final int GOLD_CLUB_VALUE = 41;
    /**
     * <code>GRAB_RED_ENVELOPE = 42;</code>
     *
     * <pre>
     * 抢红包
     * </pre>
     */
    public static final int GRAB_RED_ENVELOPE_VALUE = 42;
    /**
     * <code>CHAT_LUCK = 43;</code>
     *
     * <pre>
     * 聊天彩蛋
     * </pre>
     */
    public static final int CHAT_LUCK_VALUE = 43;
    /**
     * <code>RANK_GIFT = 44;</code>
     *
     * <pre>
     * 排行献礼
     * </pre>
     */
    public static final int RANK_GIFT_VALUE = 44;
    /**
     * <code>FOREVER_CARD = 45;</code>
     *
     * <pre>
     * 终身卡
     * </pre>
     */
    public static final int FOREVER_CARD_VALUE = 45;
    /**
     * <code>SALE_PACKET = 82;</code>
     *
     * <pre>
     * 打折礼包
     * </pre>
     */
    public static final int SALE_PACKET_VALUE = 82;
    /**
     * <code>HOUR_CARD = 51;</code>
     *
     * <pre>
     *小时卡
     * </pre>
     */
    public static final int HOUR_CARD_VALUE = 51;
    /**
     * <code>FIRST_GIFTPACK = 84;</code>
     *
     * <pre>
     *首充礼包 (防止和国内活动冲突)
     * </pre>
     */
    public static final int FIRST_GIFTPACK_VALUE = 84;
    /**
     * <code>MYSTERY_SHOP = 81;</code>
     *
     * <pre>
     *黑市
     * </pre>
     */
    public static final int MYSTERY_SHOP_VALUE = 81;
    /**
     * <code>HERO_TOKEN_SHOP = 82;</code>
     *
     * <pre>
     *英雄令商店打折
     * </pre>
     */
    public static final int HERO_TOKEN_SHOP_VALUE = 82;
    /**
     * <code>LIMIT_RECHARGE = 85;</code>
     *
     * <pre>
     *限时限购for77
     * </pre>
     */
    public static final int LIMIT_RECHARGE_VALUE = 85;
    /**
     * <code>EXCHANGE_DOUBLE_SEVEN = 86;</code>
     *
     * <pre>
     *兑换for77
     * </pre>
     */
    public static final int EXCHANGE_DOUBLE_SEVEN_VALUE = 86;
    /**
     * <code>DAILY_QUEST = 87;</code>
     *
     * <pre>
     *签到日常
     * </pre>
     */
    public static final int DAILY_QUEST_VALUE = 87;
    /**
     * <code>GOLD_FISH = 88;</code>
     *
     * <pre>
     * 捞金鱼活动
     * </pre>
     */
    public static final int GOLD_FISH_VALUE = 88;
    /**
     * <code>GODEQUIP_FORGING = 89;</code>
     *
     * <pre>
     * 神装锻造
     * </pre>
     */
    public static final int GODEQUIP_FORGING_VALUE = 89;
    /**
     * <code>SHOOT_ACTIVITY = 90;</code>
     *
     * <pre>
     * 制服壳场
     * </pre>
     */
    public static final int SHOOT_ACTIVITY_VALUE = 90;
    /**
     * <code>PRINCE_DEVILS = 91;</code>
     *
     * <pre>
     * 魔王的宝藏
     * </pre>
     */
    public static final int PRINCE_DEVILS_VALUE = 91;
    /**
     * <code>DISCOUNT_GIFT = 94;</code>
     *
     * <pre>
     * 等级折扣礼包
     * </pre>
     */
    public static final int DISCOUNT_GIFT_VALUE = 94;
    /**
     * <code>VIP_PACKAGE = 95;</code>
     *
     * <pre>
     * vip礼包
     * </pre>
     */
    public static final int VIP_PACKAGE_VALUE = 95;
    /**
     * <code>NEW_WEEK_CARD = 96;</code>
     *
     * <pre>
     * 新周卡
     * </pre>
     */
    public static final int NEW_WEEK_CARD_VALUE = 96;
    /**
     * <code>GROWTH_FUND = 97;</code>
     *
     * <pre>
     * 成长基金
     * </pre>
     */
    public static final int GROWTH_FUND_VALUE = 97;
    /**
     * <code>Lucky_MERCENARY = 98;</code>
     *
     * <pre>
     * 幸运副将活动
     * </pre>
     */
    public static final int Lucky_MERCENARY_VALUE = 98;
    /**
     * <code>NEW_TREASURE_RAIDER = 99;</code>
     *
     * <pre>
     * 新夺宝奇兵活动
     * </pre>
     */
    public static final int NEW_TREASURE_RAIDER_VALUE = 99;
    /**
     * <code>CHAT_SKIN = 100;</code>
     *
     * <pre>
     * 购买皮肤活动
     * </pre>
     */
    public static final int CHAT_SKIN_VALUE = 100;
    /**
     * <code>HAREM = 101;</code>
     *
     * <pre>
     * 王的后宫
     * </pre>
     */
    public static final int HAREM_VALUE = 101;
    /**
     * <code>FRAGMENT_EXCHANGE = 102;</code>
     *
     * <pre>
     * 碎片限时兑换活动
     * </pre>
     */
    public static final int FRAGMENT_EXCHANGE_VALUE = 102;
    /**
     * <code>FAIRY_BLESS = 103;</code>
     *
     * <pre>
     * 仙女的保佑
     * </pre>
     */
    public static final int FAIRY_BLESS_VALUE = 103;
    /**
     * <code>MAIDEN_ENCOUNTER = 104;</code>
     *
     * <pre>
     * 少女的邂逅
     * </pre>
     */
    public static final int MAIDEN_ENCOUNTER_VALUE = 104;
    /**
     * <code>OBON = 105;</code>
     *
     * <pre>
     * 鬼节活动
     * </pre>
     */
    public static final int OBON_VALUE = 105;
    /**
     * <code>WELFARE_REWARD = 106;</code>
     *
     * <pre>
     * 天降元宝活动
     * </pre>
     */
    public static final int WELFARE_REWARD_VALUE = 106;
    /**
     * <code>NEW_UR = 107;</code>
     *
     * <pre>
     * 新手UR活动
     * </pre>
     */
    public static final int NEW_UR_VALUE = 107;
    /**
     * <code>TURNTABLE = 108;</code>
     *
     * <pre>
     * 大转盘活动
     * </pre>
     */
    public static final int TURNTABLE_VALUE = 108;
    /**
     * <code>HALLOWEEN = 109;</code>
     *
     * <pre>
     * 万圣节活动
     * </pre>
     */
    public static final int HALLOWEEN_VALUE = 109;
    /**
     * <code>QUICK_BATTLE_DOUBLE = 110;</code>
     *
     * <pre>
     * 高速战斗券使用上限翻倍活动
     * </pre>
     */
    public static final int QUICK_BATTLE_DOUBLE_VALUE = 110;
    /**
     * <code>RELEASE_UR = 111;</code>
     *
     * <pre>
     * 神将投放复刻版
     * </pre>
     */
    public static final int RELEASE_UR_VALUE = 111;
    /**
     * <code>FUN_ACTIVITY = 112;</code>
     *
     * <pre>
     *开服七天乐活动
     * </pre>
     */
    public static final int FUN_ACTIVITY_VALUE = 112;
    /**
     * <code>ACCUMULATIVE_LOGIN_SIGNED = 113;</code>
     *
     * <pre>
     *30天累计签到活动
     * </pre>
     */
    public static final int ACCUMULATIVE_LOGIN_SIGNED_VALUE = 113;
    /**
     * <code>ACCUMULATIVE_LOGIN_SEVEN = 114;</code>
     *
     * <pre>
     *新手九級限定7天登录活动
     * </pre>
     */
    public static final int ACCUMULATIVE_LOGIN_SEVEN_VALUE = 114;
    /**
     * <code>NEW_ND = 115;</code>
     *
     * <pre>
     *新手扭蛋限定活动
     * </pre>
     */
    public static final int NEW_ND_VALUE = 115;
    /**
     * <code>RELEASE_UR2 = 116;</code>
     *
     * <pre>
     * 神将投放复刻版
     * </pre>
     */
    public static final int RELEASE_UR2_VALUE = 116;
    /**
     * <code>NEW_TREASURE_RAIDER2 = 117;</code>
     *
     * <pre>
     * 新夺宝奇兵活动 复刻版
     * </pre>
     */
    public static final int NEW_TREASURE_RAIDER2_VALUE = 117;
    /**
     * <code>CONTINUE_RECHARGE_MONEY = 118;</code>
     *
     * <pre>
     * 累计充值活动
     * </pre>
     */
    public static final int CONTINUE_RECHARGE_MONEY_VALUE = 118;
    /**
     * <code>ACCUMULATIVE_CONSUMEITEM = 119;</code>
     *
     * <pre>
     * 累计消费 购买道具次数
     * </pre>
     */
    public static final int ACCUMULATIVE_CONSUMEITEM_VALUE = 119;
    /**
     * <code>NEW_TREASURE_RAIDER3 = 120;</code>
     *
     * <pre>
     * 新夺宝奇兵活动3 复刻版
     * </pre>
     */
    public static final int NEW_TREASURE_RAIDER3_VALUE = 120;
    /**
     * <code>RELEASE_UR3 = 121;</code>
     *
     * <pre>
     * 神将投放复刻版
     * </pre>
     */
    public static final int RELEASE_UR3_VALUE = 121;
    /**
     * <code>ACTIVECOMPLIANCE = 122;</code>
     *
     * <pre>
     * 活跃度达标活动
     * </pre>
     */
    public static final int ACTIVECOMPLIANCE_VALUE = 122;
    /**
     * <code>ACTIVITY123_UR = 123;</code>
     *
     * <pre>
     * 束缚彼女活动
     * </pre>
     */
    public static final int ACTIVITY123_UR_VALUE = 123;
    /**
     * <code>ACTIVITY124_RECHARGE_RETURN = 124;</code>
     *
     * <pre>
     * 新充值返利抽奖活动
     * </pre>
     */
    public static final int ACTIVITY124_RECHARGE_RETURN_VALUE = 124;
    /**
     * <code>ACTIVITY125_WEAPON = 125;</code>
     *
     * <pre>
     * 武器屋
     * </pre>
     */
    public static final int ACTIVITY125_WEAPON_VALUE = 125;
    /**
     * <code>WELFAREBYREGDATE_REWARD = 126;</code>
     *
     * <pre>
     * 天降元宝根据玩家注册时间
     * </pre>
     */
    public static final int WELFAREBYREGDATE_REWARD_VALUE = 126;
    /**
     * <code>ACTIVITY127_UR = 127;</code>
     *
     * <pre>
     * 武器召唤师
     * </pre>
     */
    public static final int ACTIVITY127_UR_VALUE = 127;
    /**
     * <code>ACTIVITY128_UR = 128;</code>
     *
     * <pre>
     * 抽卡积分排行活动
     * </pre>
     */
    public static final int ACTIVITY128_UR_VALUE = 128;
    /**
     * <code>CONSUME_WEEK_CARD = 129;</code>
     *
     * <pre>
     * 消費型進階月卡
     * </pre>
     */
    public static final int CONSUME_WEEK_CARD_VALUE = 129;
    /**
     * <code>CONSUME_MONTH_CARD = 130;</code>
     *
     * <pre>
     * 消费型基礎月卡
     * </pre>
     */
    public static final int CONSUME_MONTH_CARD_VALUE = 130;
    /**
     * <code>CONTINUE_RECHARGE131 = 131;</code>
     *
     * <pre>
     * 累积连续充值
     * </pre>
     */
    public static final int CONTINUE_RECHARGE131_VALUE = 131;
    /**
     * <code>ACTIVITY132_LEVEL_GIFT = 132;</code>
     *
     * <pre>
     * 等级礼包活动
     * </pre>
     */
    public static final int ACTIVITY132_LEVEL_GIFT_VALUE = 132;
    /**
     * <code>ACTIVITY133_ONLINE_GIFT = 133;</code>
     *
     * <pre>
     * 在线礼包活动
     * </pre>
     */
    public static final int ACTIVITY133_ONLINE_GIFT_VALUE = 133;
    /**
     * <code>ACTIVITY134_WEEKEND_GIFT = 134;</code>
     *
     * <pre>
     * 在线礼包活动
     * </pre>
     */
    public static final int ACTIVITY134_WEEKEND_GIFT_VALUE = 134;
    /**
     * <code>NEW_TREASURE_RAIDER4 = 135;</code>
     *
     * <pre>
     * 新夺宝奇兵活动4 复刻版
     * </pre>
     */
    public static final int NEW_TREASURE_RAIDER4_VALUE = 135;
    /**
     * <code>EXCHANGE_SHOP = 136;</code>
     *
     * <pre>
     * 兑换所
     * </pre>
     */
    public static final int EXCHANGE_SHOP_VALUE = 136;
    /**
     * <code>ACTIVITY137_RECHARGE_RETURN = 137;</code>
     *
     * <pre>
     * 老虎机返利活动
     * </pre>
     */
    public static final int ACTIVITY137_RECHARGE_RETURN_VALUE = 137;
    /**
     * <code>NEW_TREASURE_RAIDER139 = 139;</code>
     *
     * <pre>
     *新夺宝奇兵活动 多副将版
     * </pre>
     */
    public static final int NEW_TREASURE_RAIDER139_VALUE = 139;
    /**
     * <code>RUSSIADISHWHEEL = 140;</code>
     *
     * <pre>
     *俄罗斯轮盘
     * </pre>
     */
    public static final int RUSSIADISHWHEEL_VALUE = 140;
    /**
     * <code>ACTIVITY141_RICHMAN = 141;</code>
     *
     * <pre>
     *大富翁
     * </pre>
     */
    public static final int ACTIVITY141_RICHMAN_VALUE = 141;
    /**
     * <code>ACTIVITY142_EXCHANGE_SHOP = 142;</code>
     *
     * <pre>
     * 兑换所2
     * </pre>
     */
    public static final int ACTIVITY142_EXCHANGE_SHOP_VALUE = 142;
    /**
     * <code>ACTIVITY143_PIRATE = 143;</code>
     *
     * <pre>
     * 海盜寶箱
     * </pre>
     */
    public static final int ACTIVITY143_PIRATE_VALUE = 143;
    /**
     * <code>ACTIVITY144_LITTLE_TEST = 144;</code>
     *
     * <pre>
     * 性奴小學堂
     * </pre>
     */
    public static final int ACTIVITY144_LITTLE_TEST_VALUE = 144;
    /**
     * <code>ACTIVITY145_TENDAY_CHALLENGE = 145;</code>
     *
     * <pre>
     * 10日挑戰
     * </pre>
     */
    public static final int ACTIVITY145_TENDAY_CHALLENGE_VALUE = 145;
    /**
     * <code>ACTIVITY146_CHOSEN_ONE = 146;</code>
     *
     * <pre>
     * 英靈召喚
     * </pre>
     */
    public static final int ACTIVITY146_CHOSEN_ONE_VALUE = 146;
    /**
     * <code>ACTIVITY147_WISHING_WELL = 147;</code>
     *
     * <pre>
     * 許願輪
     * </pre>
     */
    public static final int ACTIVITY147_WISHING_WELL_VALUE = 147;
    /**
     * <code>ACTIVITY148_MARRY_GAME = 148;</code>
     *
     * <pre>
     * 新手九級限定小瑪莉
     * </pre>
     */
    public static final int ACTIVITY148_MARRY_GAME_VALUE = 148;
    /**
     * <code>ACTIVITY149_THREE_DAY = 149;</code>
     *
     * <pre>
     * 新手九級限定三天任務 
     * </pre>
     */
    public static final int ACTIVITY149_THREE_DAY_VALUE = 149;
    /**
     * <code>ACTIVITY150_LIMIT_GIFT = 150;</code>
     *
     * <pre>
     * 新手九級限定禮包
     * </pre>
     */
    public static final int ACTIVITY150_LIMIT_GIFT_VALUE = 150;
    /**
     * <code>ACTIVITY151_STAGE_GIFT = 151;</code>
     *
     * <pre>
     * 關卡限定禮包
     * </pre>
     */
    public static final int ACTIVITY151_STAGE_GIFT_VALUE = 151;
    /**
     * <code>ACTIVITY152_DRAMA_GIFT = 152;</code>
     *
     * <pre>
     * 英雄劇情禮物
     * </pre>
     */
    public static final int ACTIVITY152_DRAMA_GIFT_VALUE = 152;
    /**
     * <code>ACTIVITY153_RANK_GIFT = 153;</code>
     *
     * <pre>
     * 排行榜禮物
     * </pre>
     */
    public static final int ACTIVITY153_RANK_GIFT_VALUE = 153;
    /**
     * <code>ACTIVITY154_CALL_OF_SPRITE = 154;</code>
     *
     * <pre>
     * 精靈召喚
     * </pre>
     */
    public static final int ACTIVITY154_CALL_OF_SPRITE_VALUE = 154;
    /**
     * <code>ACTIVITY155_ACHIEVE_LEVEL = 155;</code>
     *
     * <pre>
     * 活動等級成就
     * </pre>
     */
    public static final int ACTIVITY155_ACHIEVE_LEVEL_VALUE = 155;
    /**
     * <code>ACTIVITY156_ACHIEVE_FIGHTVALUE = 156;</code>
     *
     * <pre>
     * 活動戰力成就
     * </pre>
     */
    public static final int ACTIVITY156_ACHIEVE_FIGHTVALUE_VALUE = 156;
    /**
     * <code>ACTIVITY157_LOGIN_TEN_DRAW = 157;</code>
     *
     * <pre>
     * 累積登入送十抽
     * </pre>
     */
    public static final int ACTIVITY157_LOGIN_TEN_DRAW_VALUE = 157;
    /**
     * <code>ACTIVITY158_CALL_OF_RACE = 158;</code>
     *
     * <pre>
     * 種族召喚
     * </pre>
     */
    public static final int ACTIVITY158_CALL_OF_RACE_VALUE = 158;
    /**
     * <code>ACTIVITY159_VIP_POINT = 159;</code>
     *
     * <pre>
     * 每日累積VIP點數活動
     * </pre>
     */
    public static final int ACTIVITY159_VIP_POINT_VALUE = 159;
    /**
     * <code>ACTIVITY160_NP_CONTINUE_RECHARGE = 160;</code>
     *
     * <pre>
     * 累積儲值活動
     * </pre>
     */
    public static final int ACTIVITY160_NP_CONTINUE_RECHARGE_VALUE = 160;
    /**
     * <code>ACTIVITY161_SUPPORT_CALENDER = 161;</code>
     *
     * <pre>
     * 收費打卡獎勵活動
     * </pre>
     */
    public static final int ACTIVITY161_SUPPORT_CALENDER_VALUE = 161;
    /**
     * <code>ACTIVITY162_GROWTH_LV = 162;</code>
     *
     * <pre>
     * 成長禮物LV
     * </pre>
     */
    public static final int ACTIVITY162_GROWTH_LV_VALUE = 162;
    /**
     * <code>ACTIVITY163_GROWTH_CH = 163;</code>
     *
     * <pre>
     * 成長禮物CH
     * </pre>
     */
    public static final int ACTIVITY163_GROWTH_CH_VALUE = 163;
    /**
     * <code>ACTIVITY164_GROWTH_TW = 164;</code>
     *
     * <pre>
     * 成長禮物TW
     * </pre>
     */
    public static final int ACTIVITY164_GROWTH_TW_VALUE = 164;
    /**
     * <code>ACTIVITY165_MINING = 165;</code>
     *
     * <pre>
     * 挖礦活動165
     * </pre>
     */
    public static final int ACTIVITY165_MINING_VALUE = 165;
    /**
     * <code>ACTIVITY166_CALL_OF_FRIENDSHIP = 166;</code>
     *
     * <pre>
     * 友情召喚
     * </pre>
     */
    public static final int ACTIVITY166_CALL_OF_FRIENDSHIP_VALUE = 166;
    /**
     * <code>ACTIVITY167_Consume_Summom = 167;</code>
     *
     * <pre>
     * 首儲1500抽
     * </pre>
     */
    public static final int ACTIVITY167_Consume_Summom_VALUE = 167;
    /**
     * <code>ACTIVITY168_SubScription = 168;</code>
     *
     * <pre>
     * 特權購買
     * </pre>
     */
    public static final int ACTIVITY168_SubScription_VALUE = 168;
    /**
     * <code>ACTIVITY169_JumpGift = 169;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY169_JumpGift_VALUE = 169;
    /**
     * <code>ACTIVITY170_JumpGift = 170;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY170_JumpGift_VALUE = 170;
    /**
     * <code>ACTIVITY172_PICKUP = 172;</code>
     *
     * <pre>
     * PICKUP
     * </pre>
     */
    public static final int ACTIVITY172_PICKUP_VALUE = 172;
    /**
     * <code>ACTIVITY173_NEWROLE = 173;</code>
     *
     * <pre>
     * 新角池活動
     * </pre>
     */
    public static final int ACTIVITY173_NEWROLE_VALUE = 173;
    /**
     * <code>ACTIVITY175_Glory_Hole = 175;</code>
     *
     * <pre>
     * 壁尻活動
     * </pre>
     */
    public static final int ACTIVITY175_Glory_Hole_VALUE = 175;
    /**
     * <code>ACTIVITY176_Activity_Exchange = 176;</code>
     *
     * <pre>
     *活動兌換所
     * </pre>
     */
    public static final int ACTIVITY176_Activity_Exchange_VALUE = 176;
    /**
     * <code>ACTIVITY177_Failed_Gift = 177;</code>
     *
     * <pre>
     * 失敗者禮包
     * </pre>
     */
    public static final int ACTIVITY177_Failed_Gift_VALUE = 177;
    /**
     * <code>ACTIVITY178_CALL_OF_EQUIP = 178;</code>
     *
     * <pre>
     * 專武召喚
     * </pre>
     */
    public static final int ACTIVITY178_CALL_OF_EQUIP_VALUE = 178;
    /**
     * <code>ACTIVITY179_Step_Gift = 179;</code>
     *
     * <pre>
     * 階段禮包
     * </pre>
     */
    public static final int ACTIVITY179_Step_Gift_VALUE = 179;
    /**
     * <code>ACTIVITY180_Free_Summom = 180;</code>
     *
     * <pre>
     * 免費1500抽
     * </pre>
     */
    public static final int ACTIVITY180_Free_Summom_VALUE = 180;
    /**
     * <code>ACTIVITY181_JumpGift = 181;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY181_JumpGift_VALUE = 181;
    /**
     * <code>ACTIVITY182_JumpGift = 182;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY182_JumpGift_VALUE = 182;
    /**
     * <code>ACTIVITY183_JumpGift = 183;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY183_JumpGift_VALUE = 183;
    /**
     * <code>ACTIVITY184_JumpGift = 184;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY184_JumpGift_VALUE = 184;
    /**
     * <code>ACTIVITY185_JumpGift = 185;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY185_JumpGift_VALUE = 185;
    /**
     * <code>ACTIVITY186_JumpGift = 186;</code>
     *
     * <pre>
     * 彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY186_JumpGift_VALUE = 186;
    /**
     * <code>ACTIVITY187_MaxJump = 187;</code>
     *
     * <pre>
     * 強力彈跳活動禮包
     * </pre>
     */
    public static final int ACTIVITY187_MaxJump_VALUE = 187;
    /**
     * <code>ACTIVITY190_StepSummom = 190;</code>
     *
     * <pre>
     * 累積返利900抽
     * </pre>
     */
    public static final int ACTIVITY190_StepSummom_VALUE = 190;
    /**
     * <code>ACTIVITY191_CycleStage = 191;</code>
     *
     * <pre>
     * 循環地城活動
     * </pre>
     */
    public static final int ACTIVITY191_CycleStage_VALUE = 191;
    /**
     * <code>ACTIVITY192_RechargeBounce = 192;</code>
     *
     * <pre>
     *累儲累消累充
     * </pre>
     */
    public static final int ACTIVITY192_RechargeBounce_VALUE = 192;
    /**
     * <code>ACTIVITY193_SingleBoss = 193;</code>
     *
     * <pre>
     *單人強敵活動
     * </pre>
     */
    public static final int ACTIVITY193_SingleBoss_VALUE = 193;
    /**
     * <code>ACTIVITY194_SeasonTower = 194;</code>
     *
     * <pre>
     *季爬塔活動
     * </pre>
     */
    public static final int ACTIVITY194_SeasonTower_VALUE = 194;
    /**
     * <code>ACTIVITY195_PuzzleBattle = 195;</code>
     *
     * <pre>
     * 九宮格活動
     * </pre>
     */
    public static final int ACTIVITY195_PuzzleBattle_VALUE = 195;
    /**
     * <code>ACTIVITY196_CycleStage_Part2 = 196;</code>
     *
     * <pre>
     * 循環地城活動復刻
     * </pre>
     */
    public static final int ACTIVITY196_CycleStage_Part2_VALUE = 196;
    /**
     * <code>ACTIVITY197_SUPER_PICKUP = 197;</code>
     *
     * <pre>
     * 超級PICKUP
     * </pre>
     */
    public static final int ACTIVITY197_SUPER_PICKUP_VALUE = 197;


    public final int getNumber() { return value; }

    public static ActivityId valueOf(int value) {
      switch (value) {
        case 83: return MONTH_CARD;
        case 2: return ACCUMULATIVE_RECHARGE;
        case 3: return CONTINUE_RECHARGE;
        case 4: return RECHARGE_RATIO;
        case 5: return WECHAT;
        case 6: return ACCUMULATIVE_CONSUME;
        case 7: return WORDS_EXCHANGE;
        case 8: return MAP_DROP_REWARD;
        case 9: return DOUBLE_RECHARGE;
        case 10: return HOLIDAY_TREASURE;
        case 11: return BETA_TEST_WORDS;
        case 12: return COINS_MAP_DROP_RATIO;
        case 13: return EXP_MAP_DROP_RATIO;
        case 14: return ARENA_REWARD_RATIO;
        case 15: return EQUIP_MAP_DROP_RATIO;
        case 16: return QUICK_REWARD_RATIO;
        case 17: return SMELT_VALUE_RATIO;
        case 18: return EQUIP_SELL_RATIO;
        case 19: return QUICK_COST_RATIO;
        case 20: return REGISTER_CYCLE;
        case 21: return SINGLE_RECHARGE;
        case 22: return RECHARGE_REBATE;
        case 23: return VIP_WELFARE;
        case 24: return WEEK_CARD;
        case 25: return EXPEDITION_ARMORY;
        case 26: return TIME_LIMIT_PURCHASE;
        case 27: return ACCUMULATIVE_LOGIN;
        case 28: return RECHARGE_REBATE2;
        case 29: return GEM_COMPOUND;
        case 30: return CRAZY_ROULETTE;
        case 31: return LUCK_BOX;
        case 32: return STAR_EVALUATION;
        case 33: return FRIEND_INVITE;
        case 34: return TAXI_CODE;
        case 35: return SNOWFIELD_TREASURE;
        case 36: return TREASURE_RAIDER;
        case 37: return COMMENDATION_TRIBE;
        case 38: return FORTUNE;
        case 39: return SHOP_REFRESH_PRICE_RATIO;
        case 40: return FIND_TREASURE;
        case 41: return GOLD_CLUB;
        case 42: return GRAB_RED_ENVELOPE;
        case 43: return CHAT_LUCK;
        case 44: return RANK_GIFT;
        case 45: return FOREVER_CARD;
        case 82: return SALE_PACKET;
        case 51: return HOUR_CARD;
        case 84: return FIRST_GIFTPACK;
        case 81: return MYSTERY_SHOP;
        case 85: return LIMIT_RECHARGE;
        case 86: return EXCHANGE_DOUBLE_SEVEN;
        case 87: return DAILY_QUEST;
        case 88: return GOLD_FISH;
        case 89: return GODEQUIP_FORGING;
        case 90: return SHOOT_ACTIVITY;
        case 91: return PRINCE_DEVILS;
        case 94: return DISCOUNT_GIFT;
        case 95: return VIP_PACKAGE;
        case 96: return NEW_WEEK_CARD;
        case 97: return GROWTH_FUND;
        case 98: return Lucky_MERCENARY;
        case 99: return NEW_TREASURE_RAIDER;
        case 100: return CHAT_SKIN;
        case 101: return HAREM;
        case 102: return FRAGMENT_EXCHANGE;
        case 103: return FAIRY_BLESS;
        case 104: return MAIDEN_ENCOUNTER;
        case 105: return OBON;
        case 106: return WELFARE_REWARD;
        case 107: return NEW_UR;
        case 108: return TURNTABLE;
        case 109: return HALLOWEEN;
        case 110: return QUICK_BATTLE_DOUBLE;
        case 111: return RELEASE_UR;
        case 112: return FUN_ACTIVITY;
        case 113: return ACCUMULATIVE_LOGIN_SIGNED;
        case 114: return ACCUMULATIVE_LOGIN_SEVEN;
        case 115: return NEW_ND;
        case 116: return RELEASE_UR2;
        case 117: return NEW_TREASURE_RAIDER2;
        case 118: return CONTINUE_RECHARGE_MONEY;
        case 119: return ACCUMULATIVE_CONSUMEITEM;
        case 120: return NEW_TREASURE_RAIDER3;
        case 121: return RELEASE_UR3;
        case 122: return ACTIVECOMPLIANCE;
        case 123: return ACTIVITY123_UR;
        case 124: return ACTIVITY124_RECHARGE_RETURN;
        case 125: return ACTIVITY125_WEAPON;
        case 126: return WELFAREBYREGDATE_REWARD;
        case 127: return ACTIVITY127_UR;
        case 128: return ACTIVITY128_UR;
        case 129: return CONSUME_WEEK_CARD;
        case 130: return CONSUME_MONTH_CARD;
        case 131: return CONTINUE_RECHARGE131;
        case 132: return ACTIVITY132_LEVEL_GIFT;
        case 133: return ACTIVITY133_ONLINE_GIFT;
        case 134: return ACTIVITY134_WEEKEND_GIFT;
        case 135: return NEW_TREASURE_RAIDER4;
        case 136: return EXCHANGE_SHOP;
        case 137: return ACTIVITY137_RECHARGE_RETURN;
        case 139: return NEW_TREASURE_RAIDER139;
        case 140: return RUSSIADISHWHEEL;
        case 141: return ACTIVITY141_RICHMAN;
        case 142: return ACTIVITY142_EXCHANGE_SHOP;
        case 143: return ACTIVITY143_PIRATE;
        case 144: return ACTIVITY144_LITTLE_TEST;
        case 145: return ACTIVITY145_TENDAY_CHALLENGE;
        case 146: return ACTIVITY146_CHOSEN_ONE;
        case 147: return ACTIVITY147_WISHING_WELL;
        case 148: return ACTIVITY148_MARRY_GAME;
        case 149: return ACTIVITY149_THREE_DAY;
        case 150: return ACTIVITY150_LIMIT_GIFT;
        case 151: return ACTIVITY151_STAGE_GIFT;
        case 152: return ACTIVITY152_DRAMA_GIFT;
        case 153: return ACTIVITY153_RANK_GIFT;
        case 154: return ACTIVITY154_CALL_OF_SPRITE;
        case 155: return ACTIVITY155_ACHIEVE_LEVEL;
        case 156: return ACTIVITY156_ACHIEVE_FIGHTVALUE;
        case 157: return ACTIVITY157_LOGIN_TEN_DRAW;
        case 158: return ACTIVITY158_CALL_OF_RACE;
        case 159: return ACTIVITY159_VIP_POINT;
        case 160: return ACTIVITY160_NP_CONTINUE_RECHARGE;
        case 161: return ACTIVITY161_SUPPORT_CALENDER;
        case 162: return ACTIVITY162_GROWTH_LV;
        case 163: return ACTIVITY163_GROWTH_CH;
        case 164: return ACTIVITY164_GROWTH_TW;
        case 165: return ACTIVITY165_MINING;
        case 166: return ACTIVITY166_CALL_OF_FRIENDSHIP;
        case 167: return ACTIVITY167_Consume_Summom;
        case 168: return ACTIVITY168_SubScription;
        case 169: return ACTIVITY169_JumpGift;
        case 170: return ACTIVITY170_JumpGift;
        case 172: return ACTIVITY172_PICKUP;
        case 173: return ACTIVITY173_NEWROLE;
        case 175: return ACTIVITY175_Glory_Hole;
        case 176: return ACTIVITY176_Activity_Exchange;
        case 177: return ACTIVITY177_Failed_Gift;
        case 178: return ACTIVITY178_CALL_OF_EQUIP;
        case 179: return ACTIVITY179_Step_Gift;
        case 180: return ACTIVITY180_Free_Summom;
        case 181: return ACTIVITY181_JumpGift;
        case 182: return ACTIVITY182_JumpGift;
        case 183: return ACTIVITY183_JumpGift;
        case 184: return ACTIVITY184_JumpGift;
        case 185: return ACTIVITY185_JumpGift;
        case 186: return ACTIVITY186_JumpGift;
        case 187: return ACTIVITY187_MaxJump;
        case 190: return ACTIVITY190_StepSummom;
        case 191: return ACTIVITY191_CycleStage;
        case 192: return ACTIVITY192_RechargeBounce;
        case 193: return ACTIVITY193_SingleBoss;
        case 194: return ACTIVITY194_SeasonTower;
        case 195: return ACTIVITY195_PuzzleBattle;
        case 196: return ACTIVITY196_CycleStage_Part2;
        case 197: return ACTIVITY197_SUPER_PICKUP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ActivityId>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ActivityId>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ActivityId>() {
            public ActivityId findValueByNumber(int number) {
              return ActivityId.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(26);
    }

    private static final ActivityId[] VALUES = {
      MONTH_CARD, ACCUMULATIVE_RECHARGE, CONTINUE_RECHARGE, RECHARGE_RATIO, WECHAT, ACCUMULATIVE_CONSUME, WORDS_EXCHANGE, MAP_DROP_REWARD, DOUBLE_RECHARGE, HOLIDAY_TREASURE, BETA_TEST_WORDS, COINS_MAP_DROP_RATIO, EXP_MAP_DROP_RATIO, ARENA_REWARD_RATIO, EQUIP_MAP_DROP_RATIO, QUICK_REWARD_RATIO, SMELT_VALUE_RATIO, EQUIP_SELL_RATIO, QUICK_COST_RATIO, REGISTER_CYCLE, SINGLE_RECHARGE, RECHARGE_REBATE, VIP_WELFARE, WEEK_CARD, EXPEDITION_ARMORY, TIME_LIMIT_PURCHASE, ACCUMULATIVE_LOGIN, RECHARGE_REBATE2, GEM_COMPOUND, CRAZY_ROULETTE, LUCK_BOX, STAR_EVALUATION, FRIEND_INVITE, TAXI_CODE, SNOWFIELD_TREASURE, TREASURE_RAIDER, COMMENDATION_TRIBE, FORTUNE, SHOP_REFRESH_PRICE_RATIO, FIND_TREASURE, GOLD_CLUB, GRAB_RED_ENVELOPE, CHAT_LUCK, RANK_GIFT, FOREVER_CARD, SALE_PACKET, HOUR_CARD, FIRST_GIFTPACK, MYSTERY_SHOP, HERO_TOKEN_SHOP, LIMIT_RECHARGE, EXCHANGE_DOUBLE_SEVEN, DAILY_QUEST, GOLD_FISH, GODEQUIP_FORGING, SHOOT_ACTIVITY, PRINCE_DEVILS, DISCOUNT_GIFT, VIP_PACKAGE, NEW_WEEK_CARD, GROWTH_FUND, Lucky_MERCENARY, NEW_TREASURE_RAIDER, CHAT_SKIN, HAREM, FRAGMENT_EXCHANGE, FAIRY_BLESS, MAIDEN_ENCOUNTER, OBON, WELFARE_REWARD, NEW_UR, TURNTABLE, HALLOWEEN, QUICK_BATTLE_DOUBLE, RELEASE_UR, FUN_ACTIVITY, ACCUMULATIVE_LOGIN_SIGNED, ACCUMULATIVE_LOGIN_SEVEN, NEW_ND, RELEASE_UR2, NEW_TREASURE_RAIDER2, CONTINUE_RECHARGE_MONEY, ACCUMULATIVE_CONSUMEITEM, NEW_TREASURE_RAIDER3, RELEASE_UR3, ACTIVECOMPLIANCE, ACTIVITY123_UR, ACTIVITY124_RECHARGE_RETURN, ACTIVITY125_WEAPON, WELFAREBYREGDATE_REWARD, ACTIVITY127_UR, ACTIVITY128_UR, CONSUME_WEEK_CARD, CONSUME_MONTH_CARD, CONTINUE_RECHARGE131, ACTIVITY132_LEVEL_GIFT, ACTIVITY133_ONLINE_GIFT, ACTIVITY134_WEEKEND_GIFT, NEW_TREASURE_RAIDER4, EXCHANGE_SHOP, ACTIVITY137_RECHARGE_RETURN, NEW_TREASURE_RAIDER139, RUSSIADISHWHEEL, ACTIVITY141_RICHMAN, ACTIVITY142_EXCHANGE_SHOP, ACTIVITY143_PIRATE, ACTIVITY144_LITTLE_TEST, ACTIVITY145_TENDAY_CHALLENGE, ACTIVITY146_CHOSEN_ONE, ACTIVITY147_WISHING_WELL, ACTIVITY148_MARRY_GAME, ACTIVITY149_THREE_DAY, ACTIVITY150_LIMIT_GIFT, ACTIVITY151_STAGE_GIFT, ACTIVITY152_DRAMA_GIFT, ACTIVITY153_RANK_GIFT, ACTIVITY154_CALL_OF_SPRITE, ACTIVITY155_ACHIEVE_LEVEL, ACTIVITY156_ACHIEVE_FIGHTVALUE, ACTIVITY157_LOGIN_TEN_DRAW, ACTIVITY158_CALL_OF_RACE, ACTIVITY159_VIP_POINT, ACTIVITY160_NP_CONTINUE_RECHARGE, ACTIVITY161_SUPPORT_CALENDER, ACTIVITY162_GROWTH_LV, ACTIVITY163_GROWTH_CH, ACTIVITY164_GROWTH_TW, ACTIVITY165_MINING, ACTIVITY166_CALL_OF_FRIENDSHIP, ACTIVITY167_Consume_Summom, ACTIVITY168_SubScription, ACTIVITY169_JumpGift, ACTIVITY170_JumpGift, ACTIVITY172_PICKUP, ACTIVITY173_NEWROLE, ACTIVITY175_Glory_Hole, ACTIVITY176_Activity_Exchange, ACTIVITY177_Failed_Gift, ACTIVITY178_CALL_OF_EQUIP, ACTIVITY179_Step_Gift, ACTIVITY180_Free_Summom, ACTIVITY181_JumpGift, ACTIVITY182_JumpGift, ACTIVITY183_JumpGift, ACTIVITY184_JumpGift, ACTIVITY185_JumpGift, ACTIVITY186_JumpGift, ACTIVITY187_MaxJump, ACTIVITY190_StepSummom, ACTIVITY191_CycleStage, ACTIVITY192_RechargeBounce, ACTIVITY193_SingleBoss, ACTIVITY194_SeasonTower, ACTIVITY195_PuzzleBattle, ACTIVITY196_CycleStage_Part2, ACTIVITY197_SUPER_PICKUP, 
    };

    public static ActivityId valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ActivityId(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ActivityId)
  }

  /**
   * Protobuf enum {@code FriendChatMsgType}
   */
  public enum FriendChatMsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LEAVE_MSG = 0;</code>
     *
     * <pre>
     * 留言
     * </pre>
     */
    LEAVE_MSG(0, 0),
    /**
     * <code>SYSTEM_MSG = 2;</code>
     *
     * <pre>
     * 系统提示
     * </pre>
     */
    SYSTEM_MSG(1, 2),
    /**
     * <code>PLAYER_MSG = 3;</code>
     *
     * <pre>
     * 玩家发送的消息
     * </pre>
     */
    PLAYER_MSG(2, 3),
    ;

    /**
     * <code>LEAVE_MSG = 0;</code>
     *
     * <pre>
     * 留言
     * </pre>
     */
    public static final int LEAVE_MSG_VALUE = 0;
    /**
     * <code>SYSTEM_MSG = 2;</code>
     *
     * <pre>
     * 系统提示
     * </pre>
     */
    public static final int SYSTEM_MSG_VALUE = 2;
    /**
     * <code>PLAYER_MSG = 3;</code>
     *
     * <pre>
     * 玩家发送的消息
     * </pre>
     */
    public static final int PLAYER_MSG_VALUE = 3;


    public final int getNumber() { return value; }

    public static FriendChatMsgType valueOf(int value) {
      switch (value) {
        case 0: return LEAVE_MSG;
        case 2: return SYSTEM_MSG;
        case 3: return PLAYER_MSG;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FriendChatMsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FriendChatMsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FriendChatMsgType>() {
            public FriendChatMsgType findValueByNumber(int number) {
              return FriendChatMsgType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(27);
    }

    private static final FriendChatMsgType[] VALUES = values();

    public static FriendChatMsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private FriendChatMsgType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:FriendChatMsgType)
  }

  /**
   * Protobuf enum {@code notifyType}
   *
   * <pre>
   * 通知类型
   * </pre>
   */
  public enum notifyType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NOTIFY_RECHARGE = 1;</code>
     */
    NOTIFY_RECHARGE(0, 1),
    ;

    /**
     * <code>NOTIFY_RECHARGE = 1;</code>
     */
    public static final int NOTIFY_RECHARGE_VALUE = 1;


    public final int getNumber() { return value; }

    public static notifyType valueOf(int value) {
      switch (value) {
        case 1: return NOTIFY_RECHARGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<notifyType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<notifyType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<notifyType>() {
            public notifyType findValueByNumber(int number) {
              return notifyType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(28);
    }

    private static final notifyType[] VALUES = values();

    public static notifyType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private notifyType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:notifyType)
  }

  /**
   * Protobuf enum {@code dailyRefreshType}
   */
  public enum dailyRefreshType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SHOP_ITEM_REFRESH = 1;</code>
     *
     * <pre>
     *商店中的商品
     * </pre>
     */
    SHOP_ITEM_REFRESH(0, 1),
    /**
     * <code>ALLIANCE_SIGN = 2;</code>
     *
     * <pre>
     *公会签到
     * </pre>
     */
    ALLIANCE_SIGN(1, 2),
    /**
     * <code>EQUIP_CREATE_REFRESH = 3;</code>
     *
     * <pre>
     *装备打造刷新
     * </pre>
     */
    EQUIP_CREATE_REFRESH(2, 3),
    /**
     * <code>ARENA_CHALLENGE = 4;</code>
     *
     * <pre>
     *竞技场挑战
     * </pre>
     */
    ARENA_CHALLENGE(3, 4),
    /**
     * <code>FAST_FIGHT = 5;</code>
     *
     * <pre>
     *快速战斗
     * </pre>
     */
    FAST_FIGHT(4, 5),
    /**
     * <code>BOSS_FIGHT = 6;</code>
     *
     * <pre>
     *BOSS战斗
     * </pre>
     */
    BOSS_FIGHT(5, 6),
    /**
     * <code>ELITE_MAP = 7;</code>
     *
     * <pre>
     *精英副本
     * </pre>
     */
    ELITE_MAP(6, 7),
    /**
     * <code>STAR_STONE = 8;</code>
     *
     * <pre>
     *魂石使用
     * </pre>
     */
    STAR_STONE(7, 8),
    /**
     * <code>ROLE_RING_LVLUP = 9;</code>
     *
     * <pre>
     *光环升级次数
     * </pre>
     */
    ROLE_RING_LVLUP(8, 9),
    /**
     * <code>FB_FRIEND_ASKTICK = 10;</code>
     *
     * <pre>
     *FaceBook好友索取
     * </pre>
     */
    FB_FRIEND_ASKTICK(9, 10),
    /**
     * <code>MYSTERY_SHOP_ITEM_REFRESH = 11;</code>
     *
     * <pre>
     *黑市商品
     * </pre>
     */
    MYSTERY_SHOP_ITEM_REFRESH(10, 11),
    /**
     * <code>VIP_WELFARE_AWARD = 12;</code>
     *
     * <pre>
     * VIP特典每日领奖
     * </pre>
     */
    VIP_WELFARE_AWARD(11, 12),
    /**
     * <code>SHOP_ITEM_REFRESH_2 = 102;</code>
     *
     * <pre>
     *商店中的商品2
     * </pre>
     */
    SHOP_ITEM_REFRESH_2(12, 102),
    /**
     * <code>SHOP_ITEM_REFRESH_3 = 103;</code>
     *
     * <pre>
     *商店中的商品3
     * </pre>
     */
    SHOP_ITEM_REFRESH_3(13, 103),
    /**
     * <code>SHOP_ITEM_REFRESH_4 = 104;</code>
     *
     * <pre>
     *商店中的商品4
     * </pre>
     */
    SHOP_ITEM_REFRESH_4(14, 104),
    /**
     * <code>CRYSTAL_SHOP_ITEM_REFRESH = 111;</code>
     *
     * <pre>
     *水晶商店
     * </pre>
     */
    CRYSTAL_SHOP_ITEM_REFRESH(15, 111),
    /**
     * <code>CRYSTAL_SHOP_ITEM_REFRESH_2 = 112;</code>
     */
    CRYSTAL_SHOP_ITEM_REFRESH_2(16, 112),
    /**
     * <code>CRYSTAL_SHOP_ITEM_REFRESH_3 = 113;</code>
     */
    CRYSTAL_SHOP_ITEM_REFRESH_3(17, 113),
    /**
     * <code>CRYSTAL_SHOP_ITEM_REFRESH_4 = 114;</code>
     */
    CRYSTAL_SHOP_ITEM_REFRESH_4(18, 114),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_1 = 115;</code>
     *
     * <pre>
     *佣兵远征
     * </pre>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_1(19, 115),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_2 = 116;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_2(20, 116),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_3 = 117;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_3(21, 117),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_4 = 118;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_4(22, 118),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_5 = 119;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_5(23, 119),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_6 = 120;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_6(24, 120),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_7 = 121;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_7(25, 121),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_8 = 122;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_8(26, 122),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_9 = 123;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_9(27, 123),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_10 = 124;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_10(28, 124),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_11 = 125;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_11(29, 125),
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_12 = 126;</code>
     */
    MERCENARY_EXPEDTION_ITEM_REFRESH_12(30, 126),
    /**
     * <code>MULTIELITE_INIT_BATTLE_COUNT_1 = 130;</code>
     *
     * <pre>
     * 多人副本
     * 副本列表重置
     * </pre>
     */
    MULTIELITE_INIT_BATTLE_COUNT_1(31, 130),
    /**
     * <code>MULTIELITE_INIT_BATTLE_COUNT_2 = 131;</code>
     */
    MULTIELITE_INIT_BATTLE_COUNT_2(32, 131),
    /**
     * <code>MULTIELITE_INIT_BATTLE_COUNT_3 = 132;</code>
     */
    MULTIELITE_INIT_BATTLE_COUNT_3(33, 132),
    /**
     * <code>MULTIELITE_INIT_BATTLE_COUNT_4 = 133;</code>
     */
    MULTIELITE_INIT_BATTLE_COUNT_4(34, 133),
    /**
     * <code>WORLD_BOSS_BUFF_FREE_TIMES_1 = 140;</code>
     *
     * <pre>
     * 世界boss重置
     * </pre>
     */
    WORLD_BOSS_BUFF_FREE_TIMES_1(35, 140),
    /**
     * <code>WORLD_BOSS_BUFF_FREE_TIMES_2 = 141;</code>
     */
    WORLD_BOSS_BUFF_FREE_TIMES_2(36, 141),
    /**
     * <code>DUNGEON_REERESH_TIME = 142;</code>
     *
     * <pre>
     * 地下城重置
     * </pre>
     */
    DUNGEON_REERESH_TIME(37, 142),
    /**
     * <code>GLORYHOLE_REERESH_TIME = 143;</code>
     *
     * <pre>
     * 壁尻重置
     * </pre>
     */
    GLORYHOLE_REERESH_TIME(38, 143),
    ;

    /**
     * <code>SHOP_ITEM_REFRESH = 1;</code>
     *
     * <pre>
     *商店中的商品
     * </pre>
     */
    public static final int SHOP_ITEM_REFRESH_VALUE = 1;
    /**
     * <code>ALLIANCE_SIGN = 2;</code>
     *
     * <pre>
     *公会签到
     * </pre>
     */
    public static final int ALLIANCE_SIGN_VALUE = 2;
    /**
     * <code>EQUIP_CREATE_REFRESH = 3;</code>
     *
     * <pre>
     *装备打造刷新
     * </pre>
     */
    public static final int EQUIP_CREATE_REFRESH_VALUE = 3;
    /**
     * <code>ARENA_CHALLENGE = 4;</code>
     *
     * <pre>
     *竞技场挑战
     * </pre>
     */
    public static final int ARENA_CHALLENGE_VALUE = 4;
    /**
     * <code>FAST_FIGHT = 5;</code>
     *
     * <pre>
     *快速战斗
     * </pre>
     */
    public static final int FAST_FIGHT_VALUE = 5;
    /**
     * <code>BOSS_FIGHT = 6;</code>
     *
     * <pre>
     *BOSS战斗
     * </pre>
     */
    public static final int BOSS_FIGHT_VALUE = 6;
    /**
     * <code>ELITE_MAP = 7;</code>
     *
     * <pre>
     *精英副本
     * </pre>
     */
    public static final int ELITE_MAP_VALUE = 7;
    /**
     * <code>STAR_STONE = 8;</code>
     *
     * <pre>
     *魂石使用
     * </pre>
     */
    public static final int STAR_STONE_VALUE = 8;
    /**
     * <code>ROLE_RING_LVLUP = 9;</code>
     *
     * <pre>
     *光环升级次数
     * </pre>
     */
    public static final int ROLE_RING_LVLUP_VALUE = 9;
    /**
     * <code>FB_FRIEND_ASKTICK = 10;</code>
     *
     * <pre>
     *FaceBook好友索取
     * </pre>
     */
    public static final int FB_FRIEND_ASKTICK_VALUE = 10;
    /**
     * <code>MYSTERY_SHOP_ITEM_REFRESH = 11;</code>
     *
     * <pre>
     *黑市商品
     * </pre>
     */
    public static final int MYSTERY_SHOP_ITEM_REFRESH_VALUE = 11;
    /**
     * <code>VIP_WELFARE_AWARD = 12;</code>
     *
     * <pre>
     * VIP特典每日领奖
     * </pre>
     */
    public static final int VIP_WELFARE_AWARD_VALUE = 12;
    /**
     * <code>SHOP_ITEM_REFRESH_2 = 102;</code>
     *
     * <pre>
     *商店中的商品2
     * </pre>
     */
    public static final int SHOP_ITEM_REFRESH_2_VALUE = 102;
    /**
     * <code>SHOP_ITEM_REFRESH_3 = 103;</code>
     *
     * <pre>
     *商店中的商品3
     * </pre>
     */
    public static final int SHOP_ITEM_REFRESH_3_VALUE = 103;
    /**
     * <code>SHOP_ITEM_REFRESH_4 = 104;</code>
     *
     * <pre>
     *商店中的商品4
     * </pre>
     */
    public static final int SHOP_ITEM_REFRESH_4_VALUE = 104;
    /**
     * <code>CRYSTAL_SHOP_ITEM_REFRESH = 111;</code>
     *
     * <pre>
     *水晶商店
     * </pre>
     */
    public static final int CRYSTAL_SHOP_ITEM_REFRESH_VALUE = 111;
    /**
     * <code>CRYSTAL_SHOP_ITEM_REFRESH_2 = 112;</code>
     */
    public static final int CRYSTAL_SHOP_ITEM_REFRESH_2_VALUE = 112;
    /**
     * <code>CRYSTAL_SHOP_ITEM_REFRESH_3 = 113;</code>
     */
    public static final int CRYSTAL_SHOP_ITEM_REFRESH_3_VALUE = 113;
    /**
     * <code>CRYSTAL_SHOP_ITEM_REFRESH_4 = 114;</code>
     */
    public static final int CRYSTAL_SHOP_ITEM_REFRESH_4_VALUE = 114;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_1 = 115;</code>
     *
     * <pre>
     *佣兵远征
     * </pre>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_1_VALUE = 115;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_2 = 116;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_2_VALUE = 116;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_3 = 117;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_3_VALUE = 117;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_4 = 118;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_4_VALUE = 118;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_5 = 119;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_5_VALUE = 119;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_6 = 120;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_6_VALUE = 120;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_7 = 121;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_7_VALUE = 121;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_8 = 122;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_8_VALUE = 122;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_9 = 123;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_9_VALUE = 123;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_10 = 124;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_10_VALUE = 124;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_11 = 125;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_11_VALUE = 125;
    /**
     * <code>MERCENARY_EXPEDTION_ITEM_REFRESH_12 = 126;</code>
     */
    public static final int MERCENARY_EXPEDTION_ITEM_REFRESH_12_VALUE = 126;
    /**
     * <code>MULTIELITE_INIT_BATTLE_COUNT_1 = 130;</code>
     *
     * <pre>
     * 多人副本
     * 副本列表重置
     * </pre>
     */
    public static final int MULTIELITE_INIT_BATTLE_COUNT_1_VALUE = 130;
    /**
     * <code>MULTIELITE_INIT_BATTLE_COUNT_2 = 131;</code>
     */
    public static final int MULTIELITE_INIT_BATTLE_COUNT_2_VALUE = 131;
    /**
     * <code>MULTIELITE_INIT_BATTLE_COUNT_3 = 132;</code>
     */
    public static final int MULTIELITE_INIT_BATTLE_COUNT_3_VALUE = 132;
    /**
     * <code>MULTIELITE_INIT_BATTLE_COUNT_4 = 133;</code>
     */
    public static final int MULTIELITE_INIT_BATTLE_COUNT_4_VALUE = 133;
    /**
     * <code>WORLD_BOSS_BUFF_FREE_TIMES_1 = 140;</code>
     *
     * <pre>
     * 世界boss重置
     * </pre>
     */
    public static final int WORLD_BOSS_BUFF_FREE_TIMES_1_VALUE = 140;
    /**
     * <code>WORLD_BOSS_BUFF_FREE_TIMES_2 = 141;</code>
     */
    public static final int WORLD_BOSS_BUFF_FREE_TIMES_2_VALUE = 141;
    /**
     * <code>DUNGEON_REERESH_TIME = 142;</code>
     *
     * <pre>
     * 地下城重置
     * </pre>
     */
    public static final int DUNGEON_REERESH_TIME_VALUE = 142;
    /**
     * <code>GLORYHOLE_REERESH_TIME = 143;</code>
     *
     * <pre>
     * 壁尻重置
     * </pre>
     */
    public static final int GLORYHOLE_REERESH_TIME_VALUE = 143;


    public final int getNumber() { return value; }

    public static dailyRefreshType valueOf(int value) {
      switch (value) {
        case 1: return SHOP_ITEM_REFRESH;
        case 2: return ALLIANCE_SIGN;
        case 3: return EQUIP_CREATE_REFRESH;
        case 4: return ARENA_CHALLENGE;
        case 5: return FAST_FIGHT;
        case 6: return BOSS_FIGHT;
        case 7: return ELITE_MAP;
        case 8: return STAR_STONE;
        case 9: return ROLE_RING_LVLUP;
        case 10: return FB_FRIEND_ASKTICK;
        case 11: return MYSTERY_SHOP_ITEM_REFRESH;
        case 12: return VIP_WELFARE_AWARD;
        case 102: return SHOP_ITEM_REFRESH_2;
        case 103: return SHOP_ITEM_REFRESH_3;
        case 104: return SHOP_ITEM_REFRESH_4;
        case 111: return CRYSTAL_SHOP_ITEM_REFRESH;
        case 112: return CRYSTAL_SHOP_ITEM_REFRESH_2;
        case 113: return CRYSTAL_SHOP_ITEM_REFRESH_3;
        case 114: return CRYSTAL_SHOP_ITEM_REFRESH_4;
        case 115: return MERCENARY_EXPEDTION_ITEM_REFRESH_1;
        case 116: return MERCENARY_EXPEDTION_ITEM_REFRESH_2;
        case 117: return MERCENARY_EXPEDTION_ITEM_REFRESH_3;
        case 118: return MERCENARY_EXPEDTION_ITEM_REFRESH_4;
        case 119: return MERCENARY_EXPEDTION_ITEM_REFRESH_5;
        case 120: return MERCENARY_EXPEDTION_ITEM_REFRESH_6;
        case 121: return MERCENARY_EXPEDTION_ITEM_REFRESH_7;
        case 122: return MERCENARY_EXPEDTION_ITEM_REFRESH_8;
        case 123: return MERCENARY_EXPEDTION_ITEM_REFRESH_9;
        case 124: return MERCENARY_EXPEDTION_ITEM_REFRESH_10;
        case 125: return MERCENARY_EXPEDTION_ITEM_REFRESH_11;
        case 126: return MERCENARY_EXPEDTION_ITEM_REFRESH_12;
        case 130: return MULTIELITE_INIT_BATTLE_COUNT_1;
        case 131: return MULTIELITE_INIT_BATTLE_COUNT_2;
        case 132: return MULTIELITE_INIT_BATTLE_COUNT_3;
        case 133: return MULTIELITE_INIT_BATTLE_COUNT_4;
        case 140: return WORLD_BOSS_BUFF_FREE_TIMES_1;
        case 141: return WORLD_BOSS_BUFF_FREE_TIMES_2;
        case 142: return DUNGEON_REERESH_TIME;
        case 143: return GLORYHOLE_REERESH_TIME;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<dailyRefreshType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<dailyRefreshType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<dailyRefreshType>() {
            public dailyRefreshType findValueByNumber(int number) {
              return dailyRefreshType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(29);
    }

    private static final dailyRefreshType[] VALUES = values();

    public static dailyRefreshType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private dailyRefreshType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:dailyRefreshType)
  }

  /**
   * Protobuf enum {@code QuestState}
   *
   * <pre>
   * 任务状态
   * </pre>
   */
  public enum QuestState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNACTIVE = 0;</code>
     *
     * <pre>
     * 未激活
     * </pre>
     */
    UNACTIVE(0, 0),
    /**
     * <code>ING = 1;</code>
     *
     * <pre>
     * 进行中
     * </pre>
     */
    ING(1, 1),
    /**
     * <code>FINISHED = 2;</code>
     *
     * <pre>
     * 已完成未领奖
     * </pre>
     */
    FINISHED(2, 2),
    /**
     * <code>REWARD = 3;</code>
     *
     * <pre>
     * 完成且已领奖
     * </pre>
     */
    REWARD(3, 3),
    ;

    /**
     * <code>UNACTIVE = 0;</code>
     *
     * <pre>
     * 未激活
     * </pre>
     */
    public static final int UNACTIVE_VALUE = 0;
    /**
     * <code>ING = 1;</code>
     *
     * <pre>
     * 进行中
     * </pre>
     */
    public static final int ING_VALUE = 1;
    /**
     * <code>FINISHED = 2;</code>
     *
     * <pre>
     * 已完成未领奖
     * </pre>
     */
    public static final int FINISHED_VALUE = 2;
    /**
     * <code>REWARD = 3;</code>
     *
     * <pre>
     * 完成且已领奖
     * </pre>
     */
    public static final int REWARD_VALUE = 3;


    public final int getNumber() { return value; }

    public static QuestState valueOf(int value) {
      switch (value) {
        case 0: return UNACTIVE;
        case 1: return ING;
        case 2: return FINISHED;
        case 3: return REWARD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<QuestState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<QuestState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<QuestState>() {
            public QuestState findValueByNumber(int number) {
              return QuestState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(30);
    }

    private static final QuestState[] VALUES = values();

    public static QuestState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private QuestState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:QuestState)
  }

  /**
   * Protobuf enum {@code QuestStep}
   *
   * <pre>
   * 任务阶段类型
   * </pre>
   */
  public enum QuestStep
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FIRST = 1;</code>
     */
    FIRST(0, 1),
    /**
     * <code>SECOND = 2;</code>
     */
    SECOND(1, 2),
    /**
     * <code>THIRD = 3;</code>
     */
    THIRD(2, 3),
    /**
     * <code>FOURTH = 4;</code>
     */
    FOURTH(3, 4),
    /**
     * <code>FIFTH = 5;</code>
     */
    FIFTH(4, 5),
    /**
     * <code>SIXTH = 6;</code>
     */
    SIXTH(5, 6),
    /**
     * <code>SEVENTH = 7;</code>
     */
    SEVENTH(6, 7),
    /**
     * <code>EIGHTH = 8;</code>
     */
    EIGHTH(7, 8),
    /**
     * <code>NINTH = 9;</code>
     */
    NINTH(8, 9),
    /**
     * <code>TENTH = 10;</code>
     */
    TENTH(9, 10),
    /**
     * <code>ELEVENTH = 11;</code>
     */
    ELEVENTH(10, 11),
    ;

    /**
     * <code>FIRST = 1;</code>
     */
    public static final int FIRST_VALUE = 1;
    /**
     * <code>SECOND = 2;</code>
     */
    public static final int SECOND_VALUE = 2;
    /**
     * <code>THIRD = 3;</code>
     */
    public static final int THIRD_VALUE = 3;
    /**
     * <code>FOURTH = 4;</code>
     */
    public static final int FOURTH_VALUE = 4;
    /**
     * <code>FIFTH = 5;</code>
     */
    public static final int FIFTH_VALUE = 5;
    /**
     * <code>SIXTH = 6;</code>
     */
    public static final int SIXTH_VALUE = 6;
    /**
     * <code>SEVENTH = 7;</code>
     */
    public static final int SEVENTH_VALUE = 7;
    /**
     * <code>EIGHTH = 8;</code>
     */
    public static final int EIGHTH_VALUE = 8;
    /**
     * <code>NINTH = 9;</code>
     */
    public static final int NINTH_VALUE = 9;
    /**
     * <code>TENTH = 10;</code>
     */
    public static final int TENTH_VALUE = 10;
    /**
     * <code>ELEVENTH = 11;</code>
     */
    public static final int ELEVENTH_VALUE = 11;


    public final int getNumber() { return value; }

    public static QuestStep valueOf(int value) {
      switch (value) {
        case 1: return FIRST;
        case 2: return SECOND;
        case 3: return THIRD;
        case 4: return FOURTH;
        case 5: return FIFTH;
        case 6: return SIXTH;
        case 7: return SEVENTH;
        case 8: return EIGHTH;
        case 9: return NINTH;
        case 10: return TENTH;
        case 11: return ELEVENTH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<QuestStep>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<QuestStep>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<QuestStep>() {
            public QuestStep findValueByNumber(int number) {
              return QuestStep.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(31);
    }

    private static final QuestStep[] VALUES = values();

    public static QuestStep valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private QuestStep(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:QuestStep)
  }

  /**
   * Protobuf enum {@code QuestEventType}
   *
   * <pre>
   * 任务事件类型
   * </pre>
   */
  public enum QuestEventType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>KILL_BOSS = 1;</code>
     *
     * <pre>
     * 战胜BOSS
     * </pre>
     */
    KILL_BOSS(0, 1),
    /**
     * <code>ADD_FRIEND = 2;</code>
     *
     * <pre>
     * 添加好友
     * </pre>
     */
    ADD_FRIEND(1, 2),
    /**
     * <code>JOIN_ALLIANCE = 3;</code>
     *
     * <pre>
     * 加入公会
     * </pre>
     */
    JOIN_ALLIANCE(2, 3),
    /**
     * <code>MODIFY_SIN = 4;</code>
     *
     * <pre>
     * 签名修改
     * </pre>
     */
    MODIFY_SIN(3, 4),
    /**
     * <code>MAKE_EQUIP = 5;</code>
     *
     * <pre>
     * 打造装备
     * </pre>
     */
    MAKE_EQUIP(4, 5),
    /**
     * <code>QUICK_BATTLE = 6;</code>
     *
     * <pre>
     * 快速战斗
     * </pre>
     */
    QUICK_BATTLE(5, 6),
    /**
     * <code>SMELT_EQUIP = 7;</code>
     *
     * <pre>
     * 熔炼装备
     * </pre>
     */
    SMELT_EQUIP(6, 7),
    /**
     * <code>WORLD_SPEAK = 8;</code>
     *
     * <pre>
     * 世界发言
     * </pre>
     */
    WORLD_SPEAK(7, 8),
    /**
     * <code>ARENA_BATTLE = 9;</code>
     *
     * <pre>
     * 竞技胜利
     * </pre>
     */
    ARENA_BATTLE(8, 9),
    /**
     * <code>HERO_FOSTER = 10;</code>
     *
     * <pre>
     * 佣兵培养
     * </pre>
     */
    HERO_FOSTER(9, 10),
    /**
     * <code>ELITE_STATE = 11;</code>
     *
     * <pre>
     * 精英副本
     * </pre>
     */
    ELITE_STATE(10, 11),
    /**
     * <code>GU_BAO_SHAN = 12;</code>
     *
     * <pre>
     * 古宝山
     * </pre>
     */
    GU_BAO_SHAN(11, 12),
    /**
     * <code>JI_LIU_GU = 13;</code>
     *
     * <pre>
     * 激流谷
     * </pre>
     */
    JI_LIU_GU(12, 13),
    /**
     * <code>MO_HUA_RU_QIN = 14;</code>
     *
     * <pre>
     * 魔化入侵
     * </pre>
     */
    MO_HUA_RU_QIN(13, 14),
    /**
     * <code>DUO_REN_FU_BEN = 15;</code>
     *
     * <pre>
     * 多人副本
     * </pre>
     */
    DUO_REN_FU_BEN(14, 15),
    /**
     * <code>GONG_HUI_ZHENG_BA = 16;</code>
     *
     * <pre>
     * 公会争霸
     * </pre>
     */
    GONG_HUI_ZHENG_BA(15, 16),
    /**
     * <code>GONG_HUI_BOSS = 17;</code>
     *
     * <pre>
     * 公会BOSS
     * </pre>
     */
    GONG_HUI_BOSS(16, 17),
    /**
     * <code>HERO_LEVEL = 18;</code>
     *
     * <pre>
     * 佣兵升星
     * </pre>
     */
    HERO_LEVEL(17, 18),
    /**
     * <code>GEM_LEVEL = 19;</code>
     *
     * <pre>
     * 宝石升级
     * </pre>
     */
    GEM_LEVEL(18, 19),
    /**
     * <code>EQUIP_ENHANCE_LEVEL = 20;</code>
     *
     * <pre>
     * 强化装备
     * </pre>
     */
    EQUIP_ENHANCE_LEVEL(19, 20),
    /**
     * <code>COMMON_GOD_EQUIP_LEVEL = 21;</code>
     *
     * <pre>
     * 普通神器等级
     * </pre>
     */
    COMMON_GOD_EQUIP_LEVEL(20, 21),
    /**
     * <code>HOUNOR_GOD_EQUIP_LEVEL = 22;</code>
     *
     * <pre>
     * 声望神器等级
     * </pre>
     */
    HOUNOR_GOD_EQUIP_LEVEL(21, 22),
    /**
     * <code>SKILL_ENHANCE_LEVEL = 23;</code>
     *
     * <pre>
     * 技能专精等级
     * </pre>
     */
    SKILL_ENHANCE_LEVEL(22, 23),
    /**
     * <code>MAIN_ROLE_LEVEL = 24;</code>
     *
     * <pre>
     *主角等级
     * </pre>
     */
    MAIN_ROLE_LEVEL(23, 24),
    /**
     * <code>TOTAL_LOGIN_TIMES = 25;</code>
     *
     * <pre>
     *累计登陆
     * </pre>
     */
    TOTAL_LOGIN_TIMES(24, 25),
    /**
     * <code>EQUIP_ENHANCE_TIMES = 26;</code>
     *
     * <pre>
     *强化装备
     * </pre>
     */
    EQUIP_ENHANCE_TIMES(25, 26),
    /**
     * <code>CROSS_MISSION_NUMBER = 27;</code>
     *
     * <pre>
     *通关指定关卡
     * </pre>
     */
    CROSS_MISSION_NUMBER(26, 27),
    /**
     * <code>FIGHT_POINT_UP = 28;</code>
     *
     * <pre>
     *战力提升到指定数
     * </pre>
     */
    FIGHT_POINT_UP(27, 28),
    /**
     * <code>EQUIP_ENHANCE_ALL_LEVEL = 29;</code>
     *
     * <pre>
     *全身强化到指定数
     * </pre>
     */
    EQUIP_ENHANCE_ALL_LEVEL(28, 29),
    /**
     * <code>HERO_EXPEND_TIMES = 30;</code>
     *
     * <pre>
     *佣兵远征次数
     * </pre>
     */
    HERO_EXPEND_TIMES(29, 30),
    /**
     * <code>HOUNOR_MAKE_TIMES = 31;</code>
     *
     * <pre>
     *声望打造次数
     * </pre>
     */
    HOUNOR_MAKE_TIMES(30, 31),
    /**
     * <code>BAPTIZE_EQUIP_TIMES = 32;</code>
     *
     * <pre>
     *装备洗炼次数
     * </pre>
     */
    BAPTIZE_EQUIP_TIMES(31, 32),
    /**
     * <code>SMELT_EQUIP_COUNT = 33;</code>
     *
     * <pre>
     *装备熔炼数量
     * </pre>
     */
    SMELT_EQUIP_COUNT(32, 33),
    /**
     * <code>COMMON_GOD_EQUIP_SWALLOW_TIMES = 34;</code>
     *
     * <pre>
     *普通神器吸收次数
     * </pre>
     */
    COMMON_GOD_EQUIP_SWALLOW_TIMES(33, 34),
    /**
     * <code>HOUNOR_GOD_EQUIP_WALLOW_TIMES = 35;</code>
     *
     * <pre>
     *声望神器吸收次数
     * </pre>
     */
    HOUNOR_GOD_EQUIP_WALLOW_TIMES(34, 35),
    /**
     * <code>GOD_EQUIP_COMPOUND_TIMES = 36;</code>
     *
     * <pre>
     *神器融合
     * </pre>
     */
    GOD_EQUIP_COMPOUND_TIMES(35, 36),
    /**
     * <code>GOD_EQUIP_EXTEND_TIMES = 37;</code>
     *
     * <pre>
     *神器传承
     * </pre>
     */
    GOD_EQUIP_EXTEND_TIMES(36, 37),
    /**
     * <code>GEM_DRESS_TIMES = 38;</code>
     *
     * <pre>
     *宝石镶嵌
     * </pre>
     */
    GEM_DRESS_TIMES(37, 38),
    /**
     * <code>COMMON_SHOP_BUY_TIMES = 39;</code>
     *
     * <pre>
     *普通商店购买
     * </pre>
     */
    COMMON_SHOP_BUY_TIMES(38, 39),
    /**
     * <code>SUIT_FRAGMENT_TIMES = 40;</code>
     *
     * <pre>
     *套装合成
     * </pre>
     */
    SUIT_FRAGMENT_TIMES(39, 40),
    /**
     * <code>SUIT_DECOMPOSE_TIMES = 41;</code>
     *
     * <pre>
     *套装分解
     * </pre>
     */
    SUIT_DECOMPOSE_TIMES(40, 41),
    /**
     * <code>EXCHANGE_CRYSTAL_TIMES = 42;</code>
     *
     * <pre>
     *交换水晶
     * </pre>
     */
    EXCHANGE_CRYSTAL_TIMES(41, 42),
    /**
     * <code>JING_JI_CHANG_TIMES = 43;</code>
     *
     * <pre>
     *竞技场挑战
     * </pre>
     */
    JING_JI_CHANG_TIMES(42, 43),
    /**
     * <code>VIP_LEVEL_UP = 44;</code>
     *
     * <pre>
     *vip等级
     * </pre>
     */
    VIP_LEVEL_UP(43, 44),
    /**
     * <code>JING_JI_CHANG_RANK = 45;</code>
     *
     * <pre>
     *竞技场排名
     * </pre>
     */
    JING_JI_CHANG_RANK(44, 45),
    /**
     * <code>E_MO_RU_QIN_RANK = 46;</code>
     *
     * <pre>
     *恶魔入侵排名
     * </pre>
     */
    E_MO_RU_QIN_RANK(45, 46),
    /**
     * <code>CROSS_MISSION_TIMES = 47;</code>
     *
     * <pre>
     *普通关卡通过次数
     * </pre>
     */
    CROSS_MISSION_TIMES(46, 47),
    /**
     * <code>TOTAL_GAIN_COIN_COUNT = 48;</code>
     *
     * <pre>
     *累计获得金币数量
     * </pre>
     */
    TOTAL_GAIN_COIN_COUNT(47, 48),
    /**
     * <code>HERO_COUNT = 49;</code>
     *
     * <pre>
     *佣兵拥有数量
     * </pre>
     */
    HERO_COUNT(48, 49),
    /**
     * <code>DRESS_COMMON_GOD_EQUIP_STAR_LEVEL = 50;</code>
     *
     * <pre>
     *全身普通神器星级
     * </pre>
     */
    DRESS_COMMON_GOD_EQUIP_STAR_LEVEL(49, 50),
    /**
     * <code>DRESS_HOUNOR_GOD_EQUIP_STAR_LEVEL = 51;</code>
     *
     * <pre>
     *全省声望神器星级
     * </pre>
     */
    DRESS_HOUNOR_GOD_EQUIP_STAR_LEVEL(50, 51),
    /**
     * <code>DRESS_R_SUIT_COUNT = 52;</code>
     *
     * <pre>
     *装备R套装
     * </pre>
     */
    DRESS_R_SUIT_COUNT(51, 52),
    /**
     * <code>DRESS_SR_SUIT_COUNT = 53;</code>
     *
     * <pre>
     *装备SR套装
     * </pre>
     */
    DRESS_SR_SUIT_COUNT(52, 53),
    /**
     * <code>DRESS_SSR_SUIT_COUNT = 54;</code>
     *
     * <pre>
     *装备SSR套装
     * </pre>
     */
    DRESS_SSR_SUIT_COUNT(53, 54),
    /**
     * <code>DRESS_UR_SUIT_COUNT = 55;</code>
     *
     * <pre>
     *装备UR套装
     * </pre>
     */
    DRESS_UR_SUIT_COUNT(54, 55),
    /**
     * <code>PURPLE_HERO_COUNT = 56;</code>
     *
     * <pre>
     *获取紫色品质佣兵
     * </pre>
     */
    PURPLE_HERO_COUNT(55, 56),
    /**
     * <code>GOLD_HERO_COUNT = 57;</code>
     *
     * <pre>
     *获取金色品质佣兵
     * </pre>
     */
    GOLD_HERO_COUNT(56, 57),
    /**
     * <code>E_MO_RU_QIN_LAST_ATTACK_COUNT = 58;</code>
     *
     * <pre>
     *恶魔入侵最后一击
     * </pre>
     */
    E_MO_RU_QIN_LAST_ATTACK_COUNT(57, 58),
    /**
     * <code>ROLE_UPGRADE_QUEST = 59;</code>
     *
     * <pre>
     *佣兵训练升星
     * </pre>
     */
    ROLE_UPGRADE_QUEST(58, 59),
    /**
     * <code>EIGHTEENPRINCES_FIRST = 60;</code>
     *
     * <pre>
     *首次参与18路诸侯
     * </pre>
     */
    EIGHTEENPRINCES_FIRST(59, 60),
    /**
     * <code>EIGHTEENPRINCES_PASS = 61;</code>
     *
     * <pre>
     *18路诸侯通关
     * </pre>
     */
    EIGHTEENPRINCES_PASS(60, 61),
    /**
     * <code>NEWBIE_QUEST_FINISHI = 62;</code>
     *
     * <pre>
     *新手九級限定完成次數
     * </pre>
     */
    NEWBIE_QUEST_FINISHI(61, 62),
    /**
     * <code>GET_LIGHT_DARK_HERO = 63;</code>
     *
     * <pre>
     *獲得光暗屬性的英雄
     * </pre>
     */
    GET_LIGHT_DARK_HERO(62, 63),
    ;

    /**
     * <code>KILL_BOSS = 1;</code>
     *
     * <pre>
     * 战胜BOSS
     * </pre>
     */
    public static final int KILL_BOSS_VALUE = 1;
    /**
     * <code>ADD_FRIEND = 2;</code>
     *
     * <pre>
     * 添加好友
     * </pre>
     */
    public static final int ADD_FRIEND_VALUE = 2;
    /**
     * <code>JOIN_ALLIANCE = 3;</code>
     *
     * <pre>
     * 加入公会
     * </pre>
     */
    public static final int JOIN_ALLIANCE_VALUE = 3;
    /**
     * <code>MODIFY_SIN = 4;</code>
     *
     * <pre>
     * 签名修改
     * </pre>
     */
    public static final int MODIFY_SIN_VALUE = 4;
    /**
     * <code>MAKE_EQUIP = 5;</code>
     *
     * <pre>
     * 打造装备
     * </pre>
     */
    public static final int MAKE_EQUIP_VALUE = 5;
    /**
     * <code>QUICK_BATTLE = 6;</code>
     *
     * <pre>
     * 快速战斗
     * </pre>
     */
    public static final int QUICK_BATTLE_VALUE = 6;
    /**
     * <code>SMELT_EQUIP = 7;</code>
     *
     * <pre>
     * 熔炼装备
     * </pre>
     */
    public static final int SMELT_EQUIP_VALUE = 7;
    /**
     * <code>WORLD_SPEAK = 8;</code>
     *
     * <pre>
     * 世界发言
     * </pre>
     */
    public static final int WORLD_SPEAK_VALUE = 8;
    /**
     * <code>ARENA_BATTLE = 9;</code>
     *
     * <pre>
     * 竞技胜利
     * </pre>
     */
    public static final int ARENA_BATTLE_VALUE = 9;
    /**
     * <code>HERO_FOSTER = 10;</code>
     *
     * <pre>
     * 佣兵培养
     * </pre>
     */
    public static final int HERO_FOSTER_VALUE = 10;
    /**
     * <code>ELITE_STATE = 11;</code>
     *
     * <pre>
     * 精英副本
     * </pre>
     */
    public static final int ELITE_STATE_VALUE = 11;
    /**
     * <code>GU_BAO_SHAN = 12;</code>
     *
     * <pre>
     * 古宝山
     * </pre>
     */
    public static final int GU_BAO_SHAN_VALUE = 12;
    /**
     * <code>JI_LIU_GU = 13;</code>
     *
     * <pre>
     * 激流谷
     * </pre>
     */
    public static final int JI_LIU_GU_VALUE = 13;
    /**
     * <code>MO_HUA_RU_QIN = 14;</code>
     *
     * <pre>
     * 魔化入侵
     * </pre>
     */
    public static final int MO_HUA_RU_QIN_VALUE = 14;
    /**
     * <code>DUO_REN_FU_BEN = 15;</code>
     *
     * <pre>
     * 多人副本
     * </pre>
     */
    public static final int DUO_REN_FU_BEN_VALUE = 15;
    /**
     * <code>GONG_HUI_ZHENG_BA = 16;</code>
     *
     * <pre>
     * 公会争霸
     * </pre>
     */
    public static final int GONG_HUI_ZHENG_BA_VALUE = 16;
    /**
     * <code>GONG_HUI_BOSS = 17;</code>
     *
     * <pre>
     * 公会BOSS
     * </pre>
     */
    public static final int GONG_HUI_BOSS_VALUE = 17;
    /**
     * <code>HERO_LEVEL = 18;</code>
     *
     * <pre>
     * 佣兵升星
     * </pre>
     */
    public static final int HERO_LEVEL_VALUE = 18;
    /**
     * <code>GEM_LEVEL = 19;</code>
     *
     * <pre>
     * 宝石升级
     * </pre>
     */
    public static final int GEM_LEVEL_VALUE = 19;
    /**
     * <code>EQUIP_ENHANCE_LEVEL = 20;</code>
     *
     * <pre>
     * 强化装备
     * </pre>
     */
    public static final int EQUIP_ENHANCE_LEVEL_VALUE = 20;
    /**
     * <code>COMMON_GOD_EQUIP_LEVEL = 21;</code>
     *
     * <pre>
     * 普通神器等级
     * </pre>
     */
    public static final int COMMON_GOD_EQUIP_LEVEL_VALUE = 21;
    /**
     * <code>HOUNOR_GOD_EQUIP_LEVEL = 22;</code>
     *
     * <pre>
     * 声望神器等级
     * </pre>
     */
    public static final int HOUNOR_GOD_EQUIP_LEVEL_VALUE = 22;
    /**
     * <code>SKILL_ENHANCE_LEVEL = 23;</code>
     *
     * <pre>
     * 技能专精等级
     * </pre>
     */
    public static final int SKILL_ENHANCE_LEVEL_VALUE = 23;
    /**
     * <code>MAIN_ROLE_LEVEL = 24;</code>
     *
     * <pre>
     *主角等级
     * </pre>
     */
    public static final int MAIN_ROLE_LEVEL_VALUE = 24;
    /**
     * <code>TOTAL_LOGIN_TIMES = 25;</code>
     *
     * <pre>
     *累计登陆
     * </pre>
     */
    public static final int TOTAL_LOGIN_TIMES_VALUE = 25;
    /**
     * <code>EQUIP_ENHANCE_TIMES = 26;</code>
     *
     * <pre>
     *强化装备
     * </pre>
     */
    public static final int EQUIP_ENHANCE_TIMES_VALUE = 26;
    /**
     * <code>CROSS_MISSION_NUMBER = 27;</code>
     *
     * <pre>
     *通关指定关卡
     * </pre>
     */
    public static final int CROSS_MISSION_NUMBER_VALUE = 27;
    /**
     * <code>FIGHT_POINT_UP = 28;</code>
     *
     * <pre>
     *战力提升到指定数
     * </pre>
     */
    public static final int FIGHT_POINT_UP_VALUE = 28;
    /**
     * <code>EQUIP_ENHANCE_ALL_LEVEL = 29;</code>
     *
     * <pre>
     *全身强化到指定数
     * </pre>
     */
    public static final int EQUIP_ENHANCE_ALL_LEVEL_VALUE = 29;
    /**
     * <code>HERO_EXPEND_TIMES = 30;</code>
     *
     * <pre>
     *佣兵远征次数
     * </pre>
     */
    public static final int HERO_EXPEND_TIMES_VALUE = 30;
    /**
     * <code>HOUNOR_MAKE_TIMES = 31;</code>
     *
     * <pre>
     *声望打造次数
     * </pre>
     */
    public static final int HOUNOR_MAKE_TIMES_VALUE = 31;
    /**
     * <code>BAPTIZE_EQUIP_TIMES = 32;</code>
     *
     * <pre>
     *装备洗炼次数
     * </pre>
     */
    public static final int BAPTIZE_EQUIP_TIMES_VALUE = 32;
    /**
     * <code>SMELT_EQUIP_COUNT = 33;</code>
     *
     * <pre>
     *装备熔炼数量
     * </pre>
     */
    public static final int SMELT_EQUIP_COUNT_VALUE = 33;
    /**
     * <code>COMMON_GOD_EQUIP_SWALLOW_TIMES = 34;</code>
     *
     * <pre>
     *普通神器吸收次数
     * </pre>
     */
    public static final int COMMON_GOD_EQUIP_SWALLOW_TIMES_VALUE = 34;
    /**
     * <code>HOUNOR_GOD_EQUIP_WALLOW_TIMES = 35;</code>
     *
     * <pre>
     *声望神器吸收次数
     * </pre>
     */
    public static final int HOUNOR_GOD_EQUIP_WALLOW_TIMES_VALUE = 35;
    /**
     * <code>GOD_EQUIP_COMPOUND_TIMES = 36;</code>
     *
     * <pre>
     *神器融合
     * </pre>
     */
    public static final int GOD_EQUIP_COMPOUND_TIMES_VALUE = 36;
    /**
     * <code>GOD_EQUIP_EXTEND_TIMES = 37;</code>
     *
     * <pre>
     *神器传承
     * </pre>
     */
    public static final int GOD_EQUIP_EXTEND_TIMES_VALUE = 37;
    /**
     * <code>GEM_DRESS_TIMES = 38;</code>
     *
     * <pre>
     *宝石镶嵌
     * </pre>
     */
    public static final int GEM_DRESS_TIMES_VALUE = 38;
    /**
     * <code>COMMON_SHOP_BUY_TIMES = 39;</code>
     *
     * <pre>
     *普通商店购买
     * </pre>
     */
    public static final int COMMON_SHOP_BUY_TIMES_VALUE = 39;
    /**
     * <code>SUIT_FRAGMENT_TIMES = 40;</code>
     *
     * <pre>
     *套装合成
     * </pre>
     */
    public static final int SUIT_FRAGMENT_TIMES_VALUE = 40;
    /**
     * <code>SUIT_DECOMPOSE_TIMES = 41;</code>
     *
     * <pre>
     *套装分解
     * </pre>
     */
    public static final int SUIT_DECOMPOSE_TIMES_VALUE = 41;
    /**
     * <code>EXCHANGE_CRYSTAL_TIMES = 42;</code>
     *
     * <pre>
     *交换水晶
     * </pre>
     */
    public static final int EXCHANGE_CRYSTAL_TIMES_VALUE = 42;
    /**
     * <code>JING_JI_CHANG_TIMES = 43;</code>
     *
     * <pre>
     *竞技场挑战
     * </pre>
     */
    public static final int JING_JI_CHANG_TIMES_VALUE = 43;
    /**
     * <code>VIP_LEVEL_UP = 44;</code>
     *
     * <pre>
     *vip等级
     * </pre>
     */
    public static final int VIP_LEVEL_UP_VALUE = 44;
    /**
     * <code>JING_JI_CHANG_RANK = 45;</code>
     *
     * <pre>
     *竞技场排名
     * </pre>
     */
    public static final int JING_JI_CHANG_RANK_VALUE = 45;
    /**
     * <code>E_MO_RU_QIN_RANK = 46;</code>
     *
     * <pre>
     *恶魔入侵排名
     * </pre>
     */
    public static final int E_MO_RU_QIN_RANK_VALUE = 46;
    /**
     * <code>CROSS_MISSION_TIMES = 47;</code>
     *
     * <pre>
     *普通关卡通过次数
     * </pre>
     */
    public static final int CROSS_MISSION_TIMES_VALUE = 47;
    /**
     * <code>TOTAL_GAIN_COIN_COUNT = 48;</code>
     *
     * <pre>
     *累计获得金币数量
     * </pre>
     */
    public static final int TOTAL_GAIN_COIN_COUNT_VALUE = 48;
    /**
     * <code>HERO_COUNT = 49;</code>
     *
     * <pre>
     *佣兵拥有数量
     * </pre>
     */
    public static final int HERO_COUNT_VALUE = 49;
    /**
     * <code>DRESS_COMMON_GOD_EQUIP_STAR_LEVEL = 50;</code>
     *
     * <pre>
     *全身普通神器星级
     * </pre>
     */
    public static final int DRESS_COMMON_GOD_EQUIP_STAR_LEVEL_VALUE = 50;
    /**
     * <code>DRESS_HOUNOR_GOD_EQUIP_STAR_LEVEL = 51;</code>
     *
     * <pre>
     *全省声望神器星级
     * </pre>
     */
    public static final int DRESS_HOUNOR_GOD_EQUIP_STAR_LEVEL_VALUE = 51;
    /**
     * <code>DRESS_R_SUIT_COUNT = 52;</code>
     *
     * <pre>
     *装备R套装
     * </pre>
     */
    public static final int DRESS_R_SUIT_COUNT_VALUE = 52;
    /**
     * <code>DRESS_SR_SUIT_COUNT = 53;</code>
     *
     * <pre>
     *装备SR套装
     * </pre>
     */
    public static final int DRESS_SR_SUIT_COUNT_VALUE = 53;
    /**
     * <code>DRESS_SSR_SUIT_COUNT = 54;</code>
     *
     * <pre>
     *装备SSR套装
     * </pre>
     */
    public static final int DRESS_SSR_SUIT_COUNT_VALUE = 54;
    /**
     * <code>DRESS_UR_SUIT_COUNT = 55;</code>
     *
     * <pre>
     *装备UR套装
     * </pre>
     */
    public static final int DRESS_UR_SUIT_COUNT_VALUE = 55;
    /**
     * <code>PURPLE_HERO_COUNT = 56;</code>
     *
     * <pre>
     *获取紫色品质佣兵
     * </pre>
     */
    public static final int PURPLE_HERO_COUNT_VALUE = 56;
    /**
     * <code>GOLD_HERO_COUNT = 57;</code>
     *
     * <pre>
     *获取金色品质佣兵
     * </pre>
     */
    public static final int GOLD_HERO_COUNT_VALUE = 57;
    /**
     * <code>E_MO_RU_QIN_LAST_ATTACK_COUNT = 58;</code>
     *
     * <pre>
     *恶魔入侵最后一击
     * </pre>
     */
    public static final int E_MO_RU_QIN_LAST_ATTACK_COUNT_VALUE = 58;
    /**
     * <code>ROLE_UPGRADE_QUEST = 59;</code>
     *
     * <pre>
     *佣兵训练升星
     * </pre>
     */
    public static final int ROLE_UPGRADE_QUEST_VALUE = 59;
    /**
     * <code>EIGHTEENPRINCES_FIRST = 60;</code>
     *
     * <pre>
     *首次参与18路诸侯
     * </pre>
     */
    public static final int EIGHTEENPRINCES_FIRST_VALUE = 60;
    /**
     * <code>EIGHTEENPRINCES_PASS = 61;</code>
     *
     * <pre>
     *18路诸侯通关
     * </pre>
     */
    public static final int EIGHTEENPRINCES_PASS_VALUE = 61;
    /**
     * <code>NEWBIE_QUEST_FINISHI = 62;</code>
     *
     * <pre>
     *新手九級限定完成次數
     * </pre>
     */
    public static final int NEWBIE_QUEST_FINISHI_VALUE = 62;
    /**
     * <code>GET_LIGHT_DARK_HERO = 63;</code>
     *
     * <pre>
     *獲得光暗屬性的英雄
     * </pre>
     */
    public static final int GET_LIGHT_DARK_HERO_VALUE = 63;


    public final int getNumber() { return value; }

    public static QuestEventType valueOf(int value) {
      switch (value) {
        case 1: return KILL_BOSS;
        case 2: return ADD_FRIEND;
        case 3: return JOIN_ALLIANCE;
        case 4: return MODIFY_SIN;
        case 5: return MAKE_EQUIP;
        case 6: return QUICK_BATTLE;
        case 7: return SMELT_EQUIP;
        case 8: return WORLD_SPEAK;
        case 9: return ARENA_BATTLE;
        case 10: return HERO_FOSTER;
        case 11: return ELITE_STATE;
        case 12: return GU_BAO_SHAN;
        case 13: return JI_LIU_GU;
        case 14: return MO_HUA_RU_QIN;
        case 15: return DUO_REN_FU_BEN;
        case 16: return GONG_HUI_ZHENG_BA;
        case 17: return GONG_HUI_BOSS;
        case 18: return HERO_LEVEL;
        case 19: return GEM_LEVEL;
        case 20: return EQUIP_ENHANCE_LEVEL;
        case 21: return COMMON_GOD_EQUIP_LEVEL;
        case 22: return HOUNOR_GOD_EQUIP_LEVEL;
        case 23: return SKILL_ENHANCE_LEVEL;
        case 24: return MAIN_ROLE_LEVEL;
        case 25: return TOTAL_LOGIN_TIMES;
        case 26: return EQUIP_ENHANCE_TIMES;
        case 27: return CROSS_MISSION_NUMBER;
        case 28: return FIGHT_POINT_UP;
        case 29: return EQUIP_ENHANCE_ALL_LEVEL;
        case 30: return HERO_EXPEND_TIMES;
        case 31: return HOUNOR_MAKE_TIMES;
        case 32: return BAPTIZE_EQUIP_TIMES;
        case 33: return SMELT_EQUIP_COUNT;
        case 34: return COMMON_GOD_EQUIP_SWALLOW_TIMES;
        case 35: return HOUNOR_GOD_EQUIP_WALLOW_TIMES;
        case 36: return GOD_EQUIP_COMPOUND_TIMES;
        case 37: return GOD_EQUIP_EXTEND_TIMES;
        case 38: return GEM_DRESS_TIMES;
        case 39: return COMMON_SHOP_BUY_TIMES;
        case 40: return SUIT_FRAGMENT_TIMES;
        case 41: return SUIT_DECOMPOSE_TIMES;
        case 42: return EXCHANGE_CRYSTAL_TIMES;
        case 43: return JING_JI_CHANG_TIMES;
        case 44: return VIP_LEVEL_UP;
        case 45: return JING_JI_CHANG_RANK;
        case 46: return E_MO_RU_QIN_RANK;
        case 47: return CROSS_MISSION_TIMES;
        case 48: return TOTAL_GAIN_COIN_COUNT;
        case 49: return HERO_COUNT;
        case 50: return DRESS_COMMON_GOD_EQUIP_STAR_LEVEL;
        case 51: return DRESS_HOUNOR_GOD_EQUIP_STAR_LEVEL;
        case 52: return DRESS_R_SUIT_COUNT;
        case 53: return DRESS_SR_SUIT_COUNT;
        case 54: return DRESS_SSR_SUIT_COUNT;
        case 55: return DRESS_UR_SUIT_COUNT;
        case 56: return PURPLE_HERO_COUNT;
        case 57: return GOLD_HERO_COUNT;
        case 58: return E_MO_RU_QIN_LAST_ATTACK_COUNT;
        case 59: return ROLE_UPGRADE_QUEST;
        case 60: return EIGHTEENPRINCES_FIRST;
        case 61: return EIGHTEENPRINCES_PASS;
        case 62: return NEWBIE_QUEST_FINISHI;
        case 63: return GET_LIGHT_DARK_HERO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<QuestEventType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<QuestEventType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<QuestEventType>() {
            public QuestEventType findValueByNumber(int number) {
              return QuestEventType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(32);
    }

    private static final QuestEventType[] VALUES = values();

    public static QuestEventType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private QuestEventType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:QuestEventType)
  }

  /**
   * Protobuf enum {@code QuestType}
   *
   * <pre>
   * 任务类型
   * </pre>
   */
  public enum QuestType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COUNT = 1;</code>
     *
     * <pre>
     * 走操作次数的情况且比较大于等于(比如快速战斗多少次)
     * </pre>
     */
    COUNT(0, 1),
    /**
     * <code>STATEFUL = 2;</code>
     *
     * <pre>
     * 走状态的情况且比较大约等于(比如装备强化到多少级)
     * </pre>
     */
    STATEFUL(1, 2),
    /**
     * <code>LESS_THAN_COUNT = 3;</code>
     *
     * <pre>
     *减少次数且比较小于等于
     * </pre>
     */
    LESS_THAN_COUNT(2, 3),
    /**
     * <code>LESS_THAN_STATEFUL = 4;</code>
     *
     * <pre>
     *直接赋值且小雨等于
     * </pre>
     */
    LESS_THAN_STATEFUL(3, 4),
    ;

    /**
     * <code>COUNT = 1;</code>
     *
     * <pre>
     * 走操作次数的情况且比较大于等于(比如快速战斗多少次)
     * </pre>
     */
    public static final int COUNT_VALUE = 1;
    /**
     * <code>STATEFUL = 2;</code>
     *
     * <pre>
     * 走状态的情况且比较大约等于(比如装备强化到多少级)
     * </pre>
     */
    public static final int STATEFUL_VALUE = 2;
    /**
     * <code>LESS_THAN_COUNT = 3;</code>
     *
     * <pre>
     *减少次数且比较小于等于
     * </pre>
     */
    public static final int LESS_THAN_COUNT_VALUE = 3;
    /**
     * <code>LESS_THAN_STATEFUL = 4;</code>
     *
     * <pre>
     *直接赋值且小雨等于
     * </pre>
     */
    public static final int LESS_THAN_STATEFUL_VALUE = 4;


    public final int getNumber() { return value; }

    public static QuestType valueOf(int value) {
      switch (value) {
        case 1: return COUNT;
        case 2: return STATEFUL;
        case 3: return LESS_THAN_COUNT;
        case 4: return LESS_THAN_STATEFUL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<QuestType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<QuestType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<QuestType>() {
            public QuestType findValueByNumber(int number) {
              return QuestType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(33);
    }

    private static final QuestType[] VALUES = values();

    public static QuestType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private QuestType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:QuestType)
  }

  /**
   * Protobuf enum {@code YaYaMsgType}
   *
   * <pre>
   * 呀呀主播消息类型
   * </pre>
   */
  public enum YaYaMsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>GET_TYPE = 1;</code>
     *
     * <pre>
     * 客户端主动获取消息
     * </pre>
     */
    GET_TYPE(0, 1),
    /**
     * <code>PUSH_TYPE = 2;</code>
     *
     * <pre>
     * 服务端推送
     * </pre>
     */
    PUSH_TYPE(1, 2),
    ;

    /**
     * <code>GET_TYPE = 1;</code>
     *
     * <pre>
     * 客户端主动获取消息
     * </pre>
     */
    public static final int GET_TYPE_VALUE = 1;
    /**
     * <code>PUSH_TYPE = 2;</code>
     *
     * <pre>
     * 服务端推送
     * </pre>
     */
    public static final int PUSH_TYPE_VALUE = 2;


    public final int getNumber() { return value; }

    public static YaYaMsgType valueOf(int value) {
      switch (value) {
        case 1: return GET_TYPE;
        case 2: return PUSH_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<YaYaMsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<YaYaMsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<YaYaMsgType>() {
            public YaYaMsgType findValueByNumber(int number) {
              return YaYaMsgType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(34);
    }

    private static final YaYaMsgType[] VALUES = values();

    public static YaYaMsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private YaYaMsgType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:YaYaMsgType)
  }

  /**
   * Protobuf enum {@code ElementType}
   *
   * <pre>
   * 元素类型
   * </pre>
   */
  public enum ElementType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ALL = 1;</code>
     *
     * <pre>
     * 全部元素
     * </pre>
     */
    ALL(0, 1),
    /**
     * <code>ICE = 2;</code>
     *
     * <pre>
     * 冰
     * </pre>
     */
    ICE(1, 2),
    /**
     * <code>FIRE = 3;</code>
     *
     * <pre>
     * 火
     * </pre>
     */
    FIRE(2, 3),
    /**
     * <code>THUNDER = 4;</code>
     *
     * <pre>
     * 雷
     * </pre>
     */
    THUNDER(3, 4),
    ;

    /**
     * <code>ALL = 1;</code>
     *
     * <pre>
     * 全部元素
     * </pre>
     */
    public static final int ALL_VALUE = 1;
    /**
     * <code>ICE = 2;</code>
     *
     * <pre>
     * 冰
     * </pre>
     */
    public static final int ICE_VALUE = 2;
    /**
     * <code>FIRE = 3;</code>
     *
     * <pre>
     * 火
     * </pre>
     */
    public static final int FIRE_VALUE = 3;
    /**
     * <code>THUNDER = 4;</code>
     *
     * <pre>
     * 雷
     * </pre>
     */
    public static final int THUNDER_VALUE = 4;


    public final int getNumber() { return value; }

    public static ElementType valueOf(int value) {
      switch (value) {
        case 1: return ALL;
        case 2: return ICE;
        case 3: return FIRE;
        case 4: return THUNDER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ElementType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ElementType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ElementType>() {
            public ElementType findValueByNumber(int number) {
              return ElementType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(35);
    }

    private static final ElementType[] VALUES = values();

    public static ElementType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ElementType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ElementType)
  }

  /**
   * Protobuf enum {@code HeroTokenMsgType}
   *
   * <pre>
   * 英雄令消息类型
   * </pre>
   */
  public enum HeroTokenMsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CONSUME_ITEM = 1;</code>
     *
     * <pre>
     * 合成英雄令
     * </pre>
     */
    CONSUME_ITEM(0, 1),
    /**
     * <code>GET_TASK = 2;</code>
     *
     * <pre>
     * 领取任务
     * </pre>
     */
    GET_TASK(1, 2),
    /**
     * <code>GEM_COMPOUND_ONCE = 3;</code>
     *
     * <pre>
     * 宝石一键合成
     * </pre>
     */
    GEM_COMPOUND_ONCE(2, 3),
    ;

    /**
     * <code>CONSUME_ITEM = 1;</code>
     *
     * <pre>
     * 合成英雄令
     * </pre>
     */
    public static final int CONSUME_ITEM_VALUE = 1;
    /**
     * <code>GET_TASK = 2;</code>
     *
     * <pre>
     * 领取任务
     * </pre>
     */
    public static final int GET_TASK_VALUE = 2;
    /**
     * <code>GEM_COMPOUND_ONCE = 3;</code>
     *
     * <pre>
     * 宝石一键合成
     * </pre>
     */
    public static final int GEM_COMPOUND_ONCE_VALUE = 3;


    public final int getNumber() { return value; }

    public static HeroTokenMsgType valueOf(int value) {
      switch (value) {
        case 1: return CONSUME_ITEM;
        case 2: return GET_TASK;
        case 3: return GEM_COMPOUND_ONCE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HeroTokenMsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<HeroTokenMsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HeroTokenMsgType>() {
            public HeroTokenMsgType findValueByNumber(int number) {
              return HeroTokenMsgType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(36);
    }

    private static final HeroTokenMsgType[] VALUES = values();

    public static HeroTokenMsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private HeroTokenMsgType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:HeroTokenMsgType)
  }

  /**
   * Protobuf enum {@code RankType}
   *
   * <pre>
   * 排行类型
   * </pre>
   */
  public enum RankType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WING_WHITE_TIME_RANK = 1;</code>
     *
     * <pre>
     * 白色翅膀10星耗时
     * </pre>
     */
    WING_WHITE_TIME_RANK(0, 1),
    /**
     * <code>WING_GREEN_TIME_RANK = 2;</code>
     *
     * <pre>
     * 绿色翅膀10星耗时
     * </pre>
     */
    WING_GREEN_TIME_RANK(1, 2),
    /**
     * <code>WING_BLUE_TIME_RANK = 3;</code>
     *
     * <pre>
     * 蓝色翅膀10星耗时
     * </pre>
     */
    WING_BLUE_TIME_RANK(2, 3),
    /**
     * <code>WING_PURPLE_TIME_RANK = 4;</code>
     *
     * <pre>
     * 紫色翅膀10星耗时
     * </pre>
     */
    WING_PURPLE_TIME_RANK(3, 4),
    /**
     * <code>WING_ORANGE_TIME_RANK = 5;</code>
     *
     * <pre>
     * 橙色翅膀10星耗时
     * </pre>
     */
    WING_ORANGE_TIME_RANK(4, 5),
    /**
     * <code>LEVEL_ALL_RANK = 21;</code>
     *
     * <pre>
     *综合等级排行榜
     * </pre>
     */
    LEVEL_ALL_RANK(5, 21),
    /**
     * <code>LEVEL_PROFJS_RANK = 22;</code>
     *
     * <pre>
     *剑士等级排行榜
     * </pre>
     */
    LEVEL_PROFJS_RANK(6, 22),
    /**
     * <code>LEVEL_PROFGS_RANK = 23;</code>
     *
     * <pre>
     *弓士等级排行榜
     * </pre>
     */
    LEVEL_PROFGS_RANK(7, 23),
    /**
     * <code>LEVEL_PROFCS_RANK = 24;</code>
     *
     * <pre>
     *策士等级排行榜
     * </pre>
     */
    LEVEL_PROFCS_RANK(8, 24),
    /**
     * <code>CUSTOMPASS_BOSS_RANK = 31;</code>
     *
     * <pre>
     *世界Boss关卡排行榜
     * </pre>
     */
    CUSTOMPASS_BOSS_RANK(9, 31),
    /**
     * <code>CUSTOMPASS_TRAINING_RANK = 32;</code>
     *
     * <pre>
     *训练所关卡排行榜
     * </pre>
     */
    CUSTOMPASS_TRAINING_RANK(10, 32),
    /**
     * <code>ALLIANCE_LEVEL_RANK = 41;</code>
     *
     * <pre>
     *公会等级排行榜
     * </pre>
     */
    ALLIANCE_LEVEL_RANK(11, 41),
    /**
     * <code>ALLIANCE_VITALITY_RANK = 42;</code>
     *
     * <pre>
     *公会活跃度排行榜
     * </pre>
     */
    ALLIANCE_VITALITY_RANK(12, 42),
    /**
     * <code>ALLIANCE_BOSSHARM_RANK = 43;</code>
     *
     * <pre>
     *BOSS伤害排行榜
     * </pre>
     */
    ALLIANCE_BOSSHARM_RANK(13, 43),
    /**
     * <code>SCORE_ALL_RANK = 51;</code>
     *
     * <pre>
     *综合战力排行榜
     * </pre>
     */
    SCORE_ALL_RANK(14, 51),
    /**
     * <code>SCORE_PROFJS_RANK = 52;</code>
     *
     * <pre>
     *剑士战力排行榜
     * </pre>
     */
    SCORE_PROFJS_RANK(15, 52),
    /**
     * <code>SCORE_PROFGS_RANK = 53;</code>
     *
     * <pre>
     *弓士战力排行榜
     * </pre>
     */
    SCORE_PROFGS_RANK(16, 53),
    /**
     * <code>SCORE_PROFCS_RANK = 54;</code>
     *
     * <pre>
     *策士战力排行榜
     * </pre>
     */
    SCORE_PROFCS_RANK(17, 54),
    /**
     * <code>HERO_FIRE_RANK = 55;</code>
     *
     * <pre>
     *火屬英雄戰力排行榜
     * </pre>
     */
    HERO_FIRE_RANK(18, 55),
    /**
     * <code>HERO_WATER_RANK = 56;</code>
     *
     * <pre>
     *水屬英雄戰力排行榜
     * </pre>
     */
    HERO_WATER_RANK(19, 56),
    /**
     * <code>HERO_WIND_RANK = 57;</code>
     *
     * <pre>
     *風屬英雄戰力排行榜
     * </pre>
     */
    HERO_WIND_RANK(20, 57),
    /**
     * <code>HERO_LIGHT_RANK = 58;</code>
     *
     * <pre>
     *光屬英雄戰力排行榜
     * </pre>
     */
    HERO_LIGHT_RANK(21, 58),
    /**
     * <code>HERO_DARK_RANK = 59;</code>
     *
     * <pre>
     *暗屬英雄戰力排行榜
     * </pre>
     */
    HERO_DARK_RANK(22, 59),
    ;

    /**
     * <code>WING_WHITE_TIME_RANK = 1;</code>
     *
     * <pre>
     * 白色翅膀10星耗时
     * </pre>
     */
    public static final int WING_WHITE_TIME_RANK_VALUE = 1;
    /**
     * <code>WING_GREEN_TIME_RANK = 2;</code>
     *
     * <pre>
     * 绿色翅膀10星耗时
     * </pre>
     */
    public static final int WING_GREEN_TIME_RANK_VALUE = 2;
    /**
     * <code>WING_BLUE_TIME_RANK = 3;</code>
     *
     * <pre>
     * 蓝色翅膀10星耗时
     * </pre>
     */
    public static final int WING_BLUE_TIME_RANK_VALUE = 3;
    /**
     * <code>WING_PURPLE_TIME_RANK = 4;</code>
     *
     * <pre>
     * 紫色翅膀10星耗时
     * </pre>
     */
    public static final int WING_PURPLE_TIME_RANK_VALUE = 4;
    /**
     * <code>WING_ORANGE_TIME_RANK = 5;</code>
     *
     * <pre>
     * 橙色翅膀10星耗时
     * </pre>
     */
    public static final int WING_ORANGE_TIME_RANK_VALUE = 5;
    /**
     * <code>LEVEL_ALL_RANK = 21;</code>
     *
     * <pre>
     *综合等级排行榜
     * </pre>
     */
    public static final int LEVEL_ALL_RANK_VALUE = 21;
    /**
     * <code>LEVEL_PROFJS_RANK = 22;</code>
     *
     * <pre>
     *剑士等级排行榜
     * </pre>
     */
    public static final int LEVEL_PROFJS_RANK_VALUE = 22;
    /**
     * <code>LEVEL_PROFGS_RANK = 23;</code>
     *
     * <pre>
     *弓士等级排行榜
     * </pre>
     */
    public static final int LEVEL_PROFGS_RANK_VALUE = 23;
    /**
     * <code>LEVEL_PROFCS_RANK = 24;</code>
     *
     * <pre>
     *策士等级排行榜
     * </pre>
     */
    public static final int LEVEL_PROFCS_RANK_VALUE = 24;
    /**
     * <code>CUSTOMPASS_BOSS_RANK = 31;</code>
     *
     * <pre>
     *世界Boss关卡排行榜
     * </pre>
     */
    public static final int CUSTOMPASS_BOSS_RANK_VALUE = 31;
    /**
     * <code>CUSTOMPASS_TRAINING_RANK = 32;</code>
     *
     * <pre>
     *训练所关卡排行榜
     * </pre>
     */
    public static final int CUSTOMPASS_TRAINING_RANK_VALUE = 32;
    /**
     * <code>ALLIANCE_LEVEL_RANK = 41;</code>
     *
     * <pre>
     *公会等级排行榜
     * </pre>
     */
    public static final int ALLIANCE_LEVEL_RANK_VALUE = 41;
    /**
     * <code>ALLIANCE_VITALITY_RANK = 42;</code>
     *
     * <pre>
     *公会活跃度排行榜
     * </pre>
     */
    public static final int ALLIANCE_VITALITY_RANK_VALUE = 42;
    /**
     * <code>ALLIANCE_BOSSHARM_RANK = 43;</code>
     *
     * <pre>
     *BOSS伤害排行榜
     * </pre>
     */
    public static final int ALLIANCE_BOSSHARM_RANK_VALUE = 43;
    /**
     * <code>SCORE_ALL_RANK = 51;</code>
     *
     * <pre>
     *综合战力排行榜
     * </pre>
     */
    public static final int SCORE_ALL_RANK_VALUE = 51;
    /**
     * <code>SCORE_PROFJS_RANK = 52;</code>
     *
     * <pre>
     *剑士战力排行榜
     * </pre>
     */
    public static final int SCORE_PROFJS_RANK_VALUE = 52;
    /**
     * <code>SCORE_PROFGS_RANK = 53;</code>
     *
     * <pre>
     *弓士战力排行榜
     * </pre>
     */
    public static final int SCORE_PROFGS_RANK_VALUE = 53;
    /**
     * <code>SCORE_PROFCS_RANK = 54;</code>
     *
     * <pre>
     *策士战力排行榜
     * </pre>
     */
    public static final int SCORE_PROFCS_RANK_VALUE = 54;
    /**
     * <code>HERO_FIRE_RANK = 55;</code>
     *
     * <pre>
     *火屬英雄戰力排行榜
     * </pre>
     */
    public static final int HERO_FIRE_RANK_VALUE = 55;
    /**
     * <code>HERO_WATER_RANK = 56;</code>
     *
     * <pre>
     *水屬英雄戰力排行榜
     * </pre>
     */
    public static final int HERO_WATER_RANK_VALUE = 56;
    /**
     * <code>HERO_WIND_RANK = 57;</code>
     *
     * <pre>
     *風屬英雄戰力排行榜
     * </pre>
     */
    public static final int HERO_WIND_RANK_VALUE = 57;
    /**
     * <code>HERO_LIGHT_RANK = 58;</code>
     *
     * <pre>
     *光屬英雄戰力排行榜
     * </pre>
     */
    public static final int HERO_LIGHT_RANK_VALUE = 58;
    /**
     * <code>HERO_DARK_RANK = 59;</code>
     *
     * <pre>
     *暗屬英雄戰力排行榜
     * </pre>
     */
    public static final int HERO_DARK_RANK_VALUE = 59;


    public final int getNumber() { return value; }

    public static RankType valueOf(int value) {
      switch (value) {
        case 1: return WING_WHITE_TIME_RANK;
        case 2: return WING_GREEN_TIME_RANK;
        case 3: return WING_BLUE_TIME_RANK;
        case 4: return WING_PURPLE_TIME_RANK;
        case 5: return WING_ORANGE_TIME_RANK;
        case 21: return LEVEL_ALL_RANK;
        case 22: return LEVEL_PROFJS_RANK;
        case 23: return LEVEL_PROFGS_RANK;
        case 24: return LEVEL_PROFCS_RANK;
        case 31: return CUSTOMPASS_BOSS_RANK;
        case 32: return CUSTOMPASS_TRAINING_RANK;
        case 41: return ALLIANCE_LEVEL_RANK;
        case 42: return ALLIANCE_VITALITY_RANK;
        case 43: return ALLIANCE_BOSSHARM_RANK;
        case 51: return SCORE_ALL_RANK;
        case 52: return SCORE_PROFJS_RANK;
        case 53: return SCORE_PROFGS_RANK;
        case 54: return SCORE_PROFCS_RANK;
        case 55: return HERO_FIRE_RANK;
        case 56: return HERO_WATER_RANK;
        case 57: return HERO_WIND_RANK;
        case 58: return HERO_LIGHT_RANK;
        case 59: return HERO_DARK_RANK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RankType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<RankType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RankType>() {
            public RankType findValueByNumber(int number) {
              return RankType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(37);
    }

    private static final RankType[] VALUES = values();

    public static RankType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private RankType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:RankType)
  }

  /**
   * Protobuf enum {@code WingsConstant}
   */
  public enum WingsConstant
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MAX_LUCKY_NUM = 100;</code>
     */
    MAX_LUCKY_NUM(0, 100),
    /**
     * <code>WINGS_OPEN_LEVEL = 40;</code>
     */
    WINGS_OPEN_LEVEL(1, 40),
    ;

    /**
     * <code>MAX_LUCKY_NUM = 100;</code>
     */
    public static final int MAX_LUCKY_NUM_VALUE = 100;
    /**
     * <code>WINGS_OPEN_LEVEL = 40;</code>
     */
    public static final int WINGS_OPEN_LEVEL_VALUE = 40;


    public final int getNumber() { return value; }

    public static WingsConstant valueOf(int value) {
      switch (value) {
        case 100: return MAX_LUCKY_NUM;
        case 40: return WINGS_OPEN_LEVEL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WingsConstant>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<WingsConstant>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WingsConstant>() {
            public WingsConstant findValueByNumber(int number) {
              return WingsConstant.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(38);
    }

    private static final WingsConstant[] VALUES = values();

    public static WingsConstant valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private WingsConstant(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:WingsConstant)
  }

  /**
   * Protobuf enum {@code BattleUseItemType}
   */
  public enum BattleUseItemType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NONE = 0;</code>
     */
    NONE(0, 0),
    /**
     * <code>USE_ITEM = 1;</code>
     */
    USE_ITEM(1, 1),
    ;

    /**
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <code>USE_ITEM = 1;</code>
     */
    public static final int USE_ITEM_VALUE = 1;


    public final int getNumber() { return value; }

    public static BattleUseItemType valueOf(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return USE_ITEM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BattleUseItemType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<BattleUseItemType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BattleUseItemType>() {
            public BattleUseItemType findValueByNumber(int number) {
              return BattleUseItemType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(39);
    }

    private static final BattleUseItemType[] VALUES = values();

    public static BattleUseItemType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private BattleUseItemType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:BattleUseItemType)
  }

  /**
   * Protobuf enum {@code GemShopBuy}
   *
   * <pre>
   * 宝石商店购买类型
   * </pre>
   */
  public enum GemShopBuy
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>GOLDBUY = 1;</code>
     *
     * <pre>
     *钻石购买
     * </pre>
     */
    GOLDBUY(0, 1),
    /**
     * <code>GEMVOLUMEBUY = 2;</code>
     *
     * <pre>
     *宝石卷购买
     * </pre>
     */
    GEMVOLUMEBUY(1, 2),
    ;

    /**
     * <code>GOLDBUY = 1;</code>
     *
     * <pre>
     *钻石购买
     * </pre>
     */
    public static final int GOLDBUY_VALUE = 1;
    /**
     * <code>GEMVOLUMEBUY = 2;</code>
     *
     * <pre>
     *宝石卷购买
     * </pre>
     */
    public static final int GEMVOLUMEBUY_VALUE = 2;


    public final int getNumber() { return value; }

    public static GemShopBuy valueOf(int value) {
      switch (value) {
        case 1: return GOLDBUY;
        case 2: return GEMVOLUMEBUY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GemShopBuy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GemShopBuy>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GemShopBuy>() {
            public GemShopBuy findValueByNumber(int number) {
              return GemShopBuy.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(40);
    }

    private static final GemShopBuy[] VALUES = values();

    public static GemShopBuy valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private GemShopBuy(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:GemShopBuy)
  }

  /**
   * Protobuf enum {@code AllianCheckButton}
   *
   * <pre>
   * 勾选状态.发送会长邮件同意
   * </pre>
   */
  public enum AllianCheckButton
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CHECK_BUTTON_TYPE_1 = 0;</code>
     *
     * <pre>
     *未勾选
     * </pre>
     */
    CHECK_BUTTON_TYPE_1(0, 0),
    /**
     * <code>CHECK_BUTTON_TYPE_2 = 1;</code>
     *
     * <pre>
     *已勾选
     * </pre>
     */
    CHECK_BUTTON_TYPE_2(1, 1),
    ;

    /**
     * <code>CHECK_BUTTON_TYPE_1 = 0;</code>
     *
     * <pre>
     *未勾选
     * </pre>
     */
    public static final int CHECK_BUTTON_TYPE_1_VALUE = 0;
    /**
     * <code>CHECK_BUTTON_TYPE_2 = 1;</code>
     *
     * <pre>
     *已勾选
     * </pre>
     */
    public static final int CHECK_BUTTON_TYPE_2_VALUE = 1;


    public final int getNumber() { return value; }

    public static AllianCheckButton valueOf(int value) {
      switch (value) {
        case 0: return CHECK_BUTTON_TYPE_1;
        case 1: return CHECK_BUTTON_TYPE_2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AllianCheckButton>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AllianCheckButton>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AllianCheckButton>() {
            public AllianCheckButton findValueByNumber(int number) {
              return AllianCheckButton.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(41);
    }

    private static final AllianCheckButton[] VALUES = values();

    public static AllianCheckButton valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AllianCheckButton(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AllianCheckButton)
  }

  /**
   * Protobuf enum {@code ApplyState}
   *
   * <pre>
   * 加入公会审核状态
   * </pre>
   */
  public enum ApplyState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>APPLY_STATE_1 = 1;</code>
     *
     * <pre>
     *待审核
     * </pre>
     */
    APPLY_STATE_1(0, 1),
    /**
     * <code>APPLY_STATE_2 = 2;</code>
     *
     * <pre>
     *拒绝加入
     * </pre>
     */
    APPLY_STATE_2(1, 2),
    ;

    /**
     * <code>APPLY_STATE_1 = 1;</code>
     *
     * <pre>
     *待审核
     * </pre>
     */
    public static final int APPLY_STATE_1_VALUE = 1;
    /**
     * <code>APPLY_STATE_2 = 2;</code>
     *
     * <pre>
     *拒绝加入
     * </pre>
     */
    public static final int APPLY_STATE_2_VALUE = 2;


    public final int getNumber() { return value; }

    public static ApplyState valueOf(int value) {
      switch (value) {
        case 1: return APPLY_STATE_1;
        case 2: return APPLY_STATE_2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ApplyState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ApplyState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ApplyState>() {
            public ApplyState findValueByNumber(int number) {
              return ApplyState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(42);
    }

    private static final ApplyState[] VALUES = values();

    public static ApplyState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ApplyState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ApplyState)
  }

  /**
   * Protobuf enum {@code AllianOperState}
   *
   * <pre>
   * 公会操作状态 
   * </pre>
   */
  public enum AllianOperState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Refused_TYPE_2 = 0;</code>
     *
     * <pre>
     *拒绝
     * </pre>
     */
    Refused_TYPE_2(0, 0),
    /**
     * <code>APPROVAL_TYPE_1 = 1;</code>
     *
     * <pre>
     *同意
     * </pre>
     */
    APPROVAL_TYPE_1(1, 1),
    ;

    /**
     * <code>Refused_TYPE_2 = 0;</code>
     *
     * <pre>
     *拒绝
     * </pre>
     */
    public static final int Refused_TYPE_2_VALUE = 0;
    /**
     * <code>APPROVAL_TYPE_1 = 1;</code>
     *
     * <pre>
     *同意
     * </pre>
     */
    public static final int APPROVAL_TYPE_1_VALUE = 1;


    public final int getNumber() { return value; }

    public static AllianOperState valueOf(int value) {
      switch (value) {
        case 0: return Refused_TYPE_2;
        case 1: return APPROVAL_TYPE_1;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AllianOperState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AllianOperState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AllianOperState>() {
            public AllianOperState findValueByNumber(int number) {
              return AllianOperState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(43);
    }

    private static final AllianOperState[] VALUES = values();

    public static AllianOperState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AllianOperState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AllianOperState)
  }

  /**
   * Protobuf enum {@code ApplyAddAllianceUpEmail}
   *
   * <pre>
   * 申请加入公会邮件变更处理
   * </pre>
   */
  public enum ApplyAddAllianceUpEmail
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UPEMAIL_TYPE_1 = 1;</code>
     *
     * <pre>
     *过期删除
     * </pre>
     */
    UPEMAIL_TYPE_1(0, 1),
    /**
     * <code>UPEMAIL_TYPE_2 = 2;</code>
     *
     * <pre>
     *公会会长自动转让
     * </pre>
     */
    UPEMAIL_TYPE_2(1, 2),
    ;

    /**
     * <code>UPEMAIL_TYPE_1 = 1;</code>
     *
     * <pre>
     *过期删除
     * </pre>
     */
    public static final int UPEMAIL_TYPE_1_VALUE = 1;
    /**
     * <code>UPEMAIL_TYPE_2 = 2;</code>
     *
     * <pre>
     *公会会长自动转让
     * </pre>
     */
    public static final int UPEMAIL_TYPE_2_VALUE = 2;


    public final int getNumber() { return value; }

    public static ApplyAddAllianceUpEmail valueOf(int value) {
      switch (value) {
        case 1: return UPEMAIL_TYPE_1;
        case 2: return UPEMAIL_TYPE_2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ApplyAddAllianceUpEmail>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ApplyAddAllianceUpEmail>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ApplyAddAllianceUpEmail>() {
            public ApplyAddAllianceUpEmail findValueByNumber(int number) {
              return ApplyAddAllianceUpEmail.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(44);
    }

    private static final ApplyAddAllianceUpEmail[] VALUES = values();

    public static ApplyAddAllianceUpEmail valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ApplyAddAllianceUpEmail(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ApplyAddAllianceUpEmail)
  }

  /**
   * Protobuf enum {@code AddAllianceState}
   *
   * <pre>
   *加入公会类型
   * </pre>
   */
  public enum AddAllianceState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INITIATIVE_ADD_TYPE_1 = 1;</code>
     *
     * <pre>
     *主动参加加入
     * </pre>
     */
    INITIATIVE_ADD_TYPE_1(0, 1),
    /**
     * <code>MAIN_AGREE_TYPE_2 = 2;</code>
     *
     * <pre>
     *申请同意加入
     * </pre>
     */
    MAIN_AGREE_TYPE_2(1, 2),
    ;

    /**
     * <code>INITIATIVE_ADD_TYPE_1 = 1;</code>
     *
     * <pre>
     *主动参加加入
     * </pre>
     */
    public static final int INITIATIVE_ADD_TYPE_1_VALUE = 1;
    /**
     * <code>MAIN_AGREE_TYPE_2 = 2;</code>
     *
     * <pre>
     *申请同意加入
     * </pre>
     */
    public static final int MAIN_AGREE_TYPE_2_VALUE = 2;


    public final int getNumber() { return value; }

    public static AddAllianceState valueOf(int value) {
      switch (value) {
        case 1: return INITIATIVE_ADD_TYPE_1;
        case 2: return MAIN_AGREE_TYPE_2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AddAllianceState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AddAllianceState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AddAllianceState>() {
            public AddAllianceState findValueByNumber(int number) {
              return AddAllianceState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(45);
    }

    private static final AddAllianceState[] VALUES = values();

    public static AddAllianceState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AddAllianceState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AddAllianceState)
  }

  /**
   * Protobuf enum {@code ExitAllianceState}
   *
   * <pre>
   *退出公会类型
   * </pre>
   */
  public enum ExitAllianceState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INITIATIVE_TYPE_1 = 1;</code>
     *
     * <pre>
     *主动退出
     * </pre>
     */
    INITIATIVE_TYPE_1(0, 1),
    /**
     * <code>MAIN_KICK_TYPE_2 = 2;</code>
     *
     * <pre>
     *管理员踢出
     * </pre>
     */
    MAIN_KICK_TYPE_2(1, 2),
    ;

    /**
     * <code>INITIATIVE_TYPE_1 = 1;</code>
     *
     * <pre>
     *主动退出
     * </pre>
     */
    public static final int INITIATIVE_TYPE_1_VALUE = 1;
    /**
     * <code>MAIN_KICK_TYPE_2 = 2;</code>
     *
     * <pre>
     *管理员踢出
     * </pre>
     */
    public static final int MAIN_KICK_TYPE_2_VALUE = 2;


    public final int getNumber() { return value; }

    public static ExitAllianceState valueOf(int value) {
      switch (value) {
        case 1: return INITIATIVE_TYPE_1;
        case 2: return MAIN_KICK_TYPE_2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExitAllianceState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ExitAllianceState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExitAllianceState>() {
            public ExitAllianceState findValueByNumber(int number) {
              return ExitAllianceState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(46);
    }

    private static final ExitAllianceState[] VALUES = values();

    public static ExitAllianceState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ExitAllianceState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ExitAllianceState)
  }

  /**
   * Protobuf enum {@code AddOrExitAlliance}
   *
   * <pre>
   *加入退出公会
   * </pre>
   */
  public enum AddOrExitAlliance
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ADD_ALLIANCE_TYPE_1 = 1;</code>
     *
     * <pre>
     *加入公会类型
     * </pre>
     */
    ADD_ALLIANCE_TYPE_1(0, 1),
    /**
     * <code>EXIT_ALLIANCE_TYPE_2 = 2;</code>
     *
     * <pre>
     *退出公会类型
     * </pre>
     */
    EXIT_ALLIANCE_TYPE_2(1, 2),
    ;

    /**
     * <code>ADD_ALLIANCE_TYPE_1 = 1;</code>
     *
     * <pre>
     *加入公会类型
     * </pre>
     */
    public static final int ADD_ALLIANCE_TYPE_1_VALUE = 1;
    /**
     * <code>EXIT_ALLIANCE_TYPE_2 = 2;</code>
     *
     * <pre>
     *退出公会类型
     * </pre>
     */
    public static final int EXIT_ALLIANCE_TYPE_2_VALUE = 2;


    public final int getNumber() { return value; }

    public static AddOrExitAlliance valueOf(int value) {
      switch (value) {
        case 1: return ADD_ALLIANCE_TYPE_1;
        case 2: return EXIT_ALLIANCE_TYPE_2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AddOrExitAlliance>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AddOrExitAlliance>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AddOrExitAlliance>() {
            public AddOrExitAlliance findValueByNumber(int number) {
              return AddOrExitAlliance.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(47);
    }

    private static final AddOrExitAlliance[] VALUES = values();

    public static AddOrExitAlliance valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AddOrExitAlliance(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AddOrExitAlliance)
  }

  /**
   * Protobuf enum {@code IosGitState}
   *
   * <pre>
   * ios专属礼包
   * </pre>
   */
  public enum IosGitState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HAVE_GET = 1;</code>
     *
     * <pre>
     * 已领取
     * </pre>
     */
    HAVE_GET(0, 1),
    /**
     * <code>NOT_GET = 0;</code>
     *
     * <pre>
     * 未领取
     * </pre>
     */
    NOT_GET(1, 0),
    ;

    /**
     * <code>HAVE_GET = 1;</code>
     *
     * <pre>
     * 已领取
     * </pre>
     */
    public static final int HAVE_GET_VALUE = 1;
    /**
     * <code>NOT_GET = 0;</code>
     *
     * <pre>
     * 未领取
     * </pre>
     */
    public static final int NOT_GET_VALUE = 0;


    public final int getNumber() { return value; }

    public static IosGitState valueOf(int value) {
      switch (value) {
        case 1: return HAVE_GET;
        case 0: return NOT_GET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<IosGitState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<IosGitState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<IosGitState>() {
            public IosGitState findValueByNumber(int number) {
              return IosGitState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(48);
    }

    private static final IosGitState[] VALUES = values();

    public static IosGitState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private IosGitState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:IosGitState)
  }

  /**
   * Protobuf enum {@code DataType}
   *
   * <pre>
   * 商店数据类型
   * </pre>
   */
  public enum DataType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COIN_TYPE = 1;</code>
     *
     * <pre>
     * 金币
     * </pre>
     */
    COIN_TYPE(0, 1),
    /**
     * <code>GOLD_TYPE = 2;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    GOLD_TYPE(1, 2),
    /**
     * <code>VALOR_SCORE = 3;</code>
     *
     * <pre>
     * 勇气积分
     * </pre>
     */
    VALOR_SCORE(2, 3),
    /**
     * <code>HISTORY_VALOR = 4;</code>
     *
     * <pre>
     * 历史勇气积分
     * </pre>
     */
    HISTORY_VALOR(3, 4),
    /**
     * <code>HONOR = 5;</code>
     *
     * <pre>
     * 荣誉值
     * </pre>
     */
    HONOR(4, 5),
    /**
     * <code>REPUTATION = 6;</code>
     *
     * <pre>
     * 声望
     * </pre>
     */
    REPUTATION(5, 6),
    /**
     * <code>CONTRIBUTION_VALUE = 7;</code>
     *
     * <pre>
     * 公会贡献值
     * </pre>
     */
    CONTRIBUTION_VALUE(6, 7),
    /**
     * <code>CROSS_COIN_TYPE = 8;</code>
     *
     * <pre>
     * 跨服币
     * </pre>
     */
    CROSS_COIN_TYPE(7, 8),
    /**
     * <code>LUCK_SCORE = 9;</code>
     *
     * <pre>
     * 幸运值
     * </pre>
     */
    LUCK_SCORE(8, 9),
    /**
     * <code>CAN_BUY_TIMES = 10;</code>
     *
     * <pre>
     * 金币商店还可购买次数
     * </pre>
     */
    CAN_BUY_TIMES(9, 10),
    /**
     * <code>CRYSTAL_CHANGE = 11;</code>
     *
     * <pre>
     * 水晶
     * </pre>
     */
    CRYSTAL_CHANGE(10, 11),
    /**
     * <code>GEM_TYPE = 12;</code>
     *
     * <pre>
     * 宝石商店
     * </pre>
     */
    GEM_TYPE(11, 12),
    /**
     * <code>ITEM_LEFT = 13;</code>
     *
     * <pre>
     * 商品剩餘
     * </pre>
     */
    ITEM_LEFT(12, 13),
    /**
     * <code>LEVEL_LIMIT = 14;</code>
     *
     * <pre>
     * 等級限制
     * </pre>
     */
    LEVEL_LIMIT(13, 14),
    ;

    /**
     * <code>COIN_TYPE = 1;</code>
     *
     * <pre>
     * 金币
     * </pre>
     */
    public static final int COIN_TYPE_VALUE = 1;
    /**
     * <code>GOLD_TYPE = 2;</code>
     *
     * <pre>
     * 钻石
     * </pre>
     */
    public static final int GOLD_TYPE_VALUE = 2;
    /**
     * <code>VALOR_SCORE = 3;</code>
     *
     * <pre>
     * 勇气积分
     * </pre>
     */
    public static final int VALOR_SCORE_VALUE = 3;
    /**
     * <code>HISTORY_VALOR = 4;</code>
     *
     * <pre>
     * 历史勇气积分
     * </pre>
     */
    public static final int HISTORY_VALOR_VALUE = 4;
    /**
     * <code>HONOR = 5;</code>
     *
     * <pre>
     * 荣誉值
     * </pre>
     */
    public static final int HONOR_VALUE = 5;
    /**
     * <code>REPUTATION = 6;</code>
     *
     * <pre>
     * 声望
     * </pre>
     */
    public static final int REPUTATION_VALUE = 6;
    /**
     * <code>CONTRIBUTION_VALUE = 7;</code>
     *
     * <pre>
     * 公会贡献值
     * </pre>
     */
    public static final int CONTRIBUTION_VALUE_VALUE = 7;
    /**
     * <code>CROSS_COIN_TYPE = 8;</code>
     *
     * <pre>
     * 跨服币
     * </pre>
     */
    public static final int CROSS_COIN_TYPE_VALUE = 8;
    /**
     * <code>LUCK_SCORE = 9;</code>
     *
     * <pre>
     * 幸运值
     * </pre>
     */
    public static final int LUCK_SCORE_VALUE = 9;
    /**
     * <code>CAN_BUY_TIMES = 10;</code>
     *
     * <pre>
     * 金币商店还可购买次数
     * </pre>
     */
    public static final int CAN_BUY_TIMES_VALUE = 10;
    /**
     * <code>CRYSTAL_CHANGE = 11;</code>
     *
     * <pre>
     * 水晶
     * </pre>
     */
    public static final int CRYSTAL_CHANGE_VALUE = 11;
    /**
     * <code>GEM_TYPE = 12;</code>
     *
     * <pre>
     * 宝石商店
     * </pre>
     */
    public static final int GEM_TYPE_VALUE = 12;
    /**
     * <code>ITEM_LEFT = 13;</code>
     *
     * <pre>
     * 商品剩餘
     * </pre>
     */
    public static final int ITEM_LEFT_VALUE = 13;
    /**
     * <code>LEVEL_LIMIT = 14;</code>
     *
     * <pre>
     * 等級限制
     * </pre>
     */
    public static final int LEVEL_LIMIT_VALUE = 14;


    public final int getNumber() { return value; }

    public static DataType valueOf(int value) {
      switch (value) {
        case 1: return COIN_TYPE;
        case 2: return GOLD_TYPE;
        case 3: return VALOR_SCORE;
        case 4: return HISTORY_VALOR;
        case 5: return HONOR;
        case 6: return REPUTATION;
        case 7: return CONTRIBUTION_VALUE;
        case 8: return CROSS_COIN_TYPE;
        case 9: return LUCK_SCORE;
        case 10: return CAN_BUY_TIMES;
        case 11: return CRYSTAL_CHANGE;
        case 12: return GEM_TYPE;
        case 13: return ITEM_LEFT;
        case 14: return LEVEL_LIMIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DataType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataType>() {
            public DataType findValueByNumber(int number) {
              return DataType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(49);
    }

    private static final DataType[] VALUES = values();

    public static DataType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private DataType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataType)
  }

  /**
   * Protobuf enum {@code ShopType}
   *
   * <pre>
   * 商店类型
   * </pre>
   */
  public enum ShopType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>GOBLIN_MARKET = 1;</code>
     *
     * <pre>
     * 地精商店
     * </pre>
     */
    GOBLIN_MARKET(0, 1),
    /**
     * <code>COINS_MARKET = 2;</code>
     *
     * <pre>
     * 购买金币商店
     * </pre>
     */
    COINS_MARKET(1, 2),
    /**
     * <code>ALLIANCE_MARKET = 3;</code>
     *
     * <pre>
     *公会商店
     * </pre>
     */
    ALLIANCE_MARKET(2, 3),
    /**
     * <code>ARENA_MARKET = 4;</code>
     *
     * <pre>
     * 竞技场商店
     * </pre>
     */
    ARENA_MARKET(3, 4),
    /**
     * <code>VALOR_MARKET = 5;</code>
     *
     * <pre>
     * 勇气商店
     * </pre>
     */
    VALOR_MARKET(4, 5),
    /**
     * <code>CROSS_MARKET = 6;</code>
     *
     * <pre>
     * 跨服商店
     * </pre>
     */
    CROSS_MARKET(5, 6),
    /**
     * <code>BLACK_MARKET = 7;</code>
     *
     * <pre>
     * 黑市商店
     * </pre>
     */
    BLACK_MARKET(6, 7),
    /**
     * <code>CRYSTAL_MARKET = 8;</code>
     *
     * <pre>
     * 水晶商店
     * </pre>
     */
    CRYSTAL_MARKET(7, 8),
    /**
     * <code>GEM_MARKET = 9;</code>
     *
     * <pre>
     * 宝石商店
     * </pre>
     */
    GEM_MARKET(8, 9),
    /**
     * <code>DAILY_MARKET = 10;</code>
     *
     * <pre>
     * 每日商店
     * </pre>
     */
    DAILY_MARKET(9, 10),
    /**
     * <code>MYSTERY_MARKET = 11;</code>
     *
     * <pre>
     *神秘商店
     * </pre>
     */
    MYSTERY_MARKET(10, 11),
    /**
     * <code>GUILD_MARKET = 12;</code>
     *
     * <pre>
     *新公會商店
     * </pre>
     */
    GUILD_MARKET(11, 12),
    /**
     * <code>TEMPLE_MARKET = 13;</code>
     *
     * <pre>
     *殿堂商店
     * </pre>
     */
    TEMPLE_MARKET(12, 13),
    /**
     * <code>RACE_MARKET = 14;</code>
     *
     * <pre>
     *種族商店
     * </pre>
     */
    RACE_MARKET(13, 14),
    /**
     * <code>GODSEA_MARKET = 15;</code>
     *
     * <pre>
     *神海商店
     * </pre>
     */
    GODSEA_MARKET(14, 15),
    /**
     * <code>SKIN_MARKET = 16;</code>
     *
     * <pre>
     *皮膚商店
     * </pre>
     */
    SKIN_MARKET(15, 16),
    /**
     * <code>CYCLESTAGE_MARKET = 17;</code>
     *
     * <pre>
     *神海商店2(循環活動複製用)
     * </pre>
     */
    CYCLESTAGE_MARKET(16, 17),
    ;

    /**
     * <code>GOBLIN_MARKET = 1;</code>
     *
     * <pre>
     * 地精商店
     * </pre>
     */
    public static final int GOBLIN_MARKET_VALUE = 1;
    /**
     * <code>COINS_MARKET = 2;</code>
     *
     * <pre>
     * 购买金币商店
     * </pre>
     */
    public static final int COINS_MARKET_VALUE = 2;
    /**
     * <code>ALLIANCE_MARKET = 3;</code>
     *
     * <pre>
     *公会商店
     * </pre>
     */
    public static final int ALLIANCE_MARKET_VALUE = 3;
    /**
     * <code>ARENA_MARKET = 4;</code>
     *
     * <pre>
     * 竞技场商店
     * </pre>
     */
    public static final int ARENA_MARKET_VALUE = 4;
    /**
     * <code>VALOR_MARKET = 5;</code>
     *
     * <pre>
     * 勇气商店
     * </pre>
     */
    public static final int VALOR_MARKET_VALUE = 5;
    /**
     * <code>CROSS_MARKET = 6;</code>
     *
     * <pre>
     * 跨服商店
     * </pre>
     */
    public static final int CROSS_MARKET_VALUE = 6;
    /**
     * <code>BLACK_MARKET = 7;</code>
     *
     * <pre>
     * 黑市商店
     * </pre>
     */
    public static final int BLACK_MARKET_VALUE = 7;
    /**
     * <code>CRYSTAL_MARKET = 8;</code>
     *
     * <pre>
     * 水晶商店
     * </pre>
     */
    public static final int CRYSTAL_MARKET_VALUE = 8;
    /**
     * <code>GEM_MARKET = 9;</code>
     *
     * <pre>
     * 宝石商店
     * </pre>
     */
    public static final int GEM_MARKET_VALUE = 9;
    /**
     * <code>DAILY_MARKET = 10;</code>
     *
     * <pre>
     * 每日商店
     * </pre>
     */
    public static final int DAILY_MARKET_VALUE = 10;
    /**
     * <code>MYSTERY_MARKET = 11;</code>
     *
     * <pre>
     *神秘商店
     * </pre>
     */
    public static final int MYSTERY_MARKET_VALUE = 11;
    /**
     * <code>GUILD_MARKET = 12;</code>
     *
     * <pre>
     *新公會商店
     * </pre>
     */
    public static final int GUILD_MARKET_VALUE = 12;
    /**
     * <code>TEMPLE_MARKET = 13;</code>
     *
     * <pre>
     *殿堂商店
     * </pre>
     */
    public static final int TEMPLE_MARKET_VALUE = 13;
    /**
     * <code>RACE_MARKET = 14;</code>
     *
     * <pre>
     *種族商店
     * </pre>
     */
    public static final int RACE_MARKET_VALUE = 14;
    /**
     * <code>GODSEA_MARKET = 15;</code>
     *
     * <pre>
     *神海商店
     * </pre>
     */
    public static final int GODSEA_MARKET_VALUE = 15;
    /**
     * <code>SKIN_MARKET = 16;</code>
     *
     * <pre>
     *皮膚商店
     * </pre>
     */
    public static final int SKIN_MARKET_VALUE = 16;
    /**
     * <code>CYCLESTAGE_MARKET = 17;</code>
     *
     * <pre>
     *神海商店2(循環活動複製用)
     * </pre>
     */
    public static final int CYCLESTAGE_MARKET_VALUE = 17;


    public final int getNumber() { return value; }

    public static ShopType valueOf(int value) {
      switch (value) {
        case 1: return GOBLIN_MARKET;
        case 2: return COINS_MARKET;
        case 3: return ALLIANCE_MARKET;
        case 4: return ARENA_MARKET;
        case 5: return VALOR_MARKET;
        case 6: return CROSS_MARKET;
        case 7: return BLACK_MARKET;
        case 8: return CRYSTAL_MARKET;
        case 9: return GEM_MARKET;
        case 10: return DAILY_MARKET;
        case 11: return MYSTERY_MARKET;
        case 12: return GUILD_MARKET;
        case 13: return TEMPLE_MARKET;
        case 14: return RACE_MARKET;
        case 15: return GODSEA_MARKET;
        case 16: return SKIN_MARKET;
        case 17: return CYCLESTAGE_MARKET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ShopType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ShopType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ShopType>() {
            public ShopType findValueByNumber(int number) {
              return ShopType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(50);
    }

    private static final ShopType[] VALUES = values();

    public static ShopType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ShopType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ShopType)
  }

  /**
   * Protobuf enum {@code ShopOperationType}
   *
   * <pre>
   * 商店操作类型
   * </pre>
   */
  public enum ShopOperationType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INIT_TYPE = 1;</code>
     *
     * <pre>
     * 初始化
     * </pre>
     */
    INIT_TYPE(0, 1),
    /**
     * <code>REFRESH_TYPE = 2;</code>
     *
     * <pre>
     * 刷新
     * </pre>
     */
    REFRESH_TYPE(1, 2),
    ;

    /**
     * <code>INIT_TYPE = 1;</code>
     *
     * <pre>
     * 初始化
     * </pre>
     */
    public static final int INIT_TYPE_VALUE = 1;
    /**
     * <code>REFRESH_TYPE = 2;</code>
     *
     * <pre>
     * 刷新
     * </pre>
     */
    public static final int REFRESH_TYPE_VALUE = 2;


    public final int getNumber() { return value; }

    public static ShopOperationType valueOf(int value) {
      switch (value) {
        case 1: return INIT_TYPE;
        case 2: return REFRESH_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ShopOperationType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ShopOperationType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ShopOperationType>() {
            public ShopOperationType findValueByNumber(int number) {
              return ShopOperationType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(51);
    }

    private static final ShopOperationType[] VALUES = values();

    public static ShopOperationType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ShopOperationType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ShopOperationType)
  }

  /**
   * Protobuf enum {@code RoleActiviteState}
   *
   * <pre>
   * 英雄激活状态
   * </pre>
   */
  public enum RoleActiviteState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>IS_ACTIVITE = 1;</code>
     *
     * <pre>
     * 已激活
     * </pre>
     */
    IS_ACTIVITE(0, 1),
    /**
     * <code>NOT_ACTIVITE = 0;</code>
     *
     * <pre>
     * 未激活
     * </pre>
     */
    NOT_ACTIVITE(1, 0),
    /**
     * <code>CAN_ACTIVITE = 2;</code>
     *
     * <pre>
     * 可激活
     * </pre>
     */
    CAN_ACTIVITE(2, 2),
    ;

    /**
     * <code>IS_ACTIVITE = 1;</code>
     *
     * <pre>
     * 已激活
     * </pre>
     */
    public static final int IS_ACTIVITE_VALUE = 1;
    /**
     * <code>NOT_ACTIVITE = 0;</code>
     *
     * <pre>
     * 未激活
     * </pre>
     */
    public static final int NOT_ACTIVITE_VALUE = 0;
    /**
     * <code>CAN_ACTIVITE = 2;</code>
     *
     * <pre>
     * 可激活
     * </pre>
     */
    public static final int CAN_ACTIVITE_VALUE = 2;


    public final int getNumber() { return value; }

    public static RoleActiviteState valueOf(int value) {
      switch (value) {
        case 1: return IS_ACTIVITE;
        case 0: return NOT_ACTIVITE;
        case 2: return CAN_ACTIVITE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RoleActiviteState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<RoleActiviteState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RoleActiviteState>() {
            public RoleActiviteState findValueByNumber(int number) {
              return RoleActiviteState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(52);
    }

    private static final RoleActiviteState[] VALUES = values();

    public static RoleActiviteState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private RoleActiviteState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:RoleActiviteState)
  }

  /**
   * Protobuf enum {@code RoleTrainType}
   */
  public enum RoleTrainType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COMMON_TYPE = 1;</code>
     *
     * <pre>
     * 普通(金币)
     * </pre>
     */
    COMMON_TYPE(0, 1),
    /**
     * <code>ADVANCED_TYPE = 2;</code>
     *
     * <pre>
     * 高级
     * </pre>
     */
    ADVANCED_TYPE(1, 2),
    /**
     * <code>PLATINA_TYPE = 3;</code>
     *
     * <pre>
     * 白金
     * </pre>
     */
    PLATINA_TYPE(2, 3),
    /**
     * <code>DIAMOND_TYPE = 4;</code>
     *
     * <pre>
     * 钻石(至尊)
     * </pre>
     */
    DIAMOND_TYPE(3, 4),
    ;

    /**
     * <code>COMMON_TYPE = 1;</code>
     *
     * <pre>
     * 普通(金币)
     * </pre>
     */
    public static final int COMMON_TYPE_VALUE = 1;
    /**
     * <code>ADVANCED_TYPE = 2;</code>
     *
     * <pre>
     * 高级
     * </pre>
     */
    public static final int ADVANCED_TYPE_VALUE = 2;
    /**
     * <code>PLATINA_TYPE = 3;</code>
     *
     * <pre>
     * 白金
     * </pre>
     */
    public static final int PLATINA_TYPE_VALUE = 3;
    /**
     * <code>DIAMOND_TYPE = 4;</code>
     *
     * <pre>
     * 钻石(至尊)
     * </pre>
     */
    public static final int DIAMOND_TYPE_VALUE = 4;


    public final int getNumber() { return value; }

    public static RoleTrainType valueOf(int value) {
      switch (value) {
        case 1: return COMMON_TYPE;
        case 2: return ADVANCED_TYPE;
        case 3: return PLATINA_TYPE;
        case 4: return DIAMOND_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RoleTrainType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<RoleTrainType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RoleTrainType>() {
            public RoleTrainType findValueByNumber(int number) {
              return RoleTrainType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(53);
    }

    private static final RoleTrainType[] VALUES = values();

    public static RoleTrainType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private RoleTrainType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:RoleTrainType)
  }

  /**
   * Protobuf enum {@code MultiEliteState}
   *
   * <pre>
   * 多人副本准备状态
   * </pre>
   */
  public enum MultiEliteState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>IS_AWAIT = 1;</code>
     *
     * <pre>
     * 等待状态
     * </pre>
     */
    IS_AWAIT(0, 1),
    /**
     * <code>IS_SETOUT = 2;</code>
     *
     * <pre>
     * 准备状态
     * </pre>
     */
    IS_SETOUT(1, 2),
    /**
     * <code>IS_HOUSE_OWNER = 3;</code>
     *
     * <pre>
     * 房主
     * </pre>
     */
    IS_HOUSE_OWNER(2, 3),
    ;

    /**
     * <code>IS_AWAIT = 1;</code>
     *
     * <pre>
     * 等待状态
     * </pre>
     */
    public static final int IS_AWAIT_VALUE = 1;
    /**
     * <code>IS_SETOUT = 2;</code>
     *
     * <pre>
     * 准备状态
     * </pre>
     */
    public static final int IS_SETOUT_VALUE = 2;
    /**
     * <code>IS_HOUSE_OWNER = 3;</code>
     *
     * <pre>
     * 房主
     * </pre>
     */
    public static final int IS_HOUSE_OWNER_VALUE = 3;


    public final int getNumber() { return value; }

    public static MultiEliteState valueOf(int value) {
      switch (value) {
        case 1: return IS_AWAIT;
        case 2: return IS_SETOUT;
        case 3: return IS_HOUSE_OWNER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MultiEliteState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MultiEliteState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MultiEliteState>() {
            public MultiEliteState findValueByNumber(int number) {
              return MultiEliteState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(54);
    }

    private static final MultiEliteState[] VALUES = values();

    public static MultiEliteState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MultiEliteState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:MultiEliteState)
  }

  /**
   * Protobuf enum {@code AddRoleAttrType}
   */
  public enum AddRoleAttrType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ONESELF = 0;</code>
     *
     * <pre>
     * 自己
     * </pre>
     */
    ONESELF(0, 0),
    /**
     * <code>MAIN_ROLE_AND_ONESELF = 1;</code>
     *
     * <pre>
     * 主角 + 自己
     * </pre>
     */
    MAIN_ROLE_AND_ONESELF(1, 1),
    /**
     * <code>ALL_ROLE = 2;</code>
     *
     * <pre>
     * 全体
     * </pre>
     */
    ALL_ROLE(2, 2),
    ;

    /**
     * <code>ONESELF = 0;</code>
     *
     * <pre>
     * 自己
     * </pre>
     */
    public static final int ONESELF_VALUE = 0;
    /**
     * <code>MAIN_ROLE_AND_ONESELF = 1;</code>
     *
     * <pre>
     * 主角 + 自己
     * </pre>
     */
    public static final int MAIN_ROLE_AND_ONESELF_VALUE = 1;
    /**
     * <code>ALL_ROLE = 2;</code>
     *
     * <pre>
     * 全体
     * </pre>
     */
    public static final int ALL_ROLE_VALUE = 2;


    public final int getNumber() { return value; }

    public static AddRoleAttrType valueOf(int value) {
      switch (value) {
        case 0: return ONESELF;
        case 1: return MAIN_ROLE_AND_ONESELF;
        case 2: return ALL_ROLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AddRoleAttrType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AddRoleAttrType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AddRoleAttrType>() {
            public AddRoleAttrType findValueByNumber(int number) {
              return AddRoleAttrType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(55);
    }

    private static final AddRoleAttrType[] VALUES = values();

    public static AddRoleAttrType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AddRoleAttrType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AddRoleAttrType)
  }

  /**
   * Protobuf enum {@code WorldBossBuffType}
   *
   * <pre>
   * 世界boss，buff作用类型
   * </pre>
   */
  public enum WorldBossBuffType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ONESELF_TYPE = 1;</code>
     *
     * <pre>
     * 自己
     * </pre>
     */
    ONESELF_TYPE(0, 1),
    /**
     * <code>MERCENARY_TYPE = 2;</code>
     *
     * <pre>
     * 佣兵
     * </pre>
     */
    MERCENARY_TYPE(1, 2),
    /**
     * <code>ALL_TYPE = 3;</code>
     *
     * <pre>
     * 全部
     * </pre>
     */
    ALL_TYPE(2, 3),
    ;

    /**
     * <code>ONESELF_TYPE = 1;</code>
     *
     * <pre>
     * 自己
     * </pre>
     */
    public static final int ONESELF_TYPE_VALUE = 1;
    /**
     * <code>MERCENARY_TYPE = 2;</code>
     *
     * <pre>
     * 佣兵
     * </pre>
     */
    public static final int MERCENARY_TYPE_VALUE = 2;
    /**
     * <code>ALL_TYPE = 3;</code>
     *
     * <pre>
     * 全部
     * </pre>
     */
    public static final int ALL_TYPE_VALUE = 3;


    public final int getNumber() { return value; }

    public static WorldBossBuffType valueOf(int value) {
      switch (value) {
        case 1: return ONESELF_TYPE;
        case 2: return MERCENARY_TYPE;
        case 3: return ALL_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WorldBossBuffType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<WorldBossBuffType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WorldBossBuffType>() {
            public WorldBossBuffType findValueByNumber(int number) {
              return WorldBossBuffType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(56);
    }

    private static final WorldBossBuffType[] VALUES = values();

    public static WorldBossBuffType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private WorldBossBuffType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:WorldBossBuffType)
  }

  /**
   * Protobuf enum {@code ActionRecordType}
   *
   * <pre>
   * /“点击曝光”打点需求，行为类型
   * </pre>
   */
  public enum ActionRecordType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>RED_POINT_INTO = 1;</code>
     *
     * <pre>
     * 主界面红点进入
     * </pre>
     */
    RED_POINT_INTO(0, 1),
    /**
     * <code>MAIN_BANNER_INTO = 2;</code>
     *
     * <pre>
     * 主界面Banner按钮进入
     * </pre>
     */
    MAIN_BANNER_INTO(1, 2),
    /**
     * <code>SEL_PAGINATION_INTO = 3;</code>
     *
     * <pre>
     * 玩家打开特典界面各分界面进入
     * </pre>
     */
    SEL_PAGINATION_INTO(2, 3),
    /**
     * <code>SEL_LIMIT_PAGINATION_INTO = 4;</code>
     *
     * <pre>
     * 玩家打开限时活动界面各分界面进入
     * </pre>
     */
    SEL_LIMIT_PAGINATION_INTO(3, 4),
    /**
     * <code>MULTIELITE_INTO = 5;</code>
     *
     * <pre>
     * 多人副本进入
     * </pre>
     */
    MULTIELITE_INTO(4, 5),
    /**
     * <code>MULTIELITE_START = 6;</code>
     *
     * <pre>
     * 多人副本开始
     * </pre>
     */
    MULTIELITE_START(5, 6),
    /**
     * <code>GVG_ENTER = 7;</code>
     *
     * <pre>
     * GVG进入
     * </pre>
     */
    GVG_ENTER(6, 7),
    ;

    /**
     * <code>RED_POINT_INTO = 1;</code>
     *
     * <pre>
     * 主界面红点进入
     * </pre>
     */
    public static final int RED_POINT_INTO_VALUE = 1;
    /**
     * <code>MAIN_BANNER_INTO = 2;</code>
     *
     * <pre>
     * 主界面Banner按钮进入
     * </pre>
     */
    public static final int MAIN_BANNER_INTO_VALUE = 2;
    /**
     * <code>SEL_PAGINATION_INTO = 3;</code>
     *
     * <pre>
     * 玩家打开特典界面各分界面进入
     * </pre>
     */
    public static final int SEL_PAGINATION_INTO_VALUE = 3;
    /**
     * <code>SEL_LIMIT_PAGINATION_INTO = 4;</code>
     *
     * <pre>
     * 玩家打开限时活动界面各分界面进入
     * </pre>
     */
    public static final int SEL_LIMIT_PAGINATION_INTO_VALUE = 4;
    /**
     * <code>MULTIELITE_INTO = 5;</code>
     *
     * <pre>
     * 多人副本进入
     * </pre>
     */
    public static final int MULTIELITE_INTO_VALUE = 5;
    /**
     * <code>MULTIELITE_START = 6;</code>
     *
     * <pre>
     * 多人副本开始
     * </pre>
     */
    public static final int MULTIELITE_START_VALUE = 6;
    /**
     * <code>GVG_ENTER = 7;</code>
     *
     * <pre>
     * GVG进入
     * </pre>
     */
    public static final int GVG_ENTER_VALUE = 7;


    public final int getNumber() { return value; }

    public static ActionRecordType valueOf(int value) {
      switch (value) {
        case 1: return RED_POINT_INTO;
        case 2: return MAIN_BANNER_INTO;
        case 3: return SEL_PAGINATION_INTO;
        case 4: return SEL_LIMIT_PAGINATION_INTO;
        case 5: return MULTIELITE_INTO;
        case 6: return MULTIELITE_START;
        case 7: return GVG_ENTER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ActionRecordType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ActionRecordType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ActionRecordType>() {
            public ActionRecordType findValueByNumber(int number) {
              return ActionRecordType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(57);
    }

    private static final ActionRecordType[] VALUES = values();

    public static ActionRecordType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ActionRecordType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ActionRecordType)
  }

  /**
   * Protobuf enum {@code ActionModuleId}
   *
   * <pre>
   *点击曝光” 模块id
   * </pre>
   */
  public enum ActionModuleId
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MODULE_MULTIELITE = 10000;</code>
     *
     * <pre>
     *多人副本
     * </pre>
     */
    MODULE_MULTIELITE(0, 10000),
    /**
     * <code>MODULE_GVG = 10001;</code>
     *
     * <pre>
     *GVG模块
     * </pre>
     */
    MODULE_GVG(1, 10001),
    ;

    /**
     * <code>MODULE_MULTIELITE = 10000;</code>
     *
     * <pre>
     *多人副本
     * </pre>
     */
    public static final int MODULE_MULTIELITE_VALUE = 10000;
    /**
     * <code>MODULE_GVG = 10001;</code>
     *
     * <pre>
     *GVG模块
     * </pre>
     */
    public static final int MODULE_GVG_VALUE = 10001;


    public final int getNumber() { return value; }

    public static ActionModuleId valueOf(int value) {
      switch (value) {
        case 10000: return MODULE_MULTIELITE;
        case 10001: return MODULE_GVG;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ActionModuleId>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ActionModuleId>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ActionModuleId>() {
            public ActionModuleId findValueByNumber(int number) {
              return ActionModuleId.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(58);
    }

    private static final ActionModuleId[] VALUES = values();

    public static ActionModuleId valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ActionModuleId(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ActionModuleId)
  }

  /**
   * Protobuf enum {@code MutliNoticeType}
   *
   * <pre>
   * 多人副本通知类型
   * </pre>
   */
  public enum MutliNoticeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>START_TYPE = 1;</code>
     *
     * <pre>
     * 开始，通知队员
     * </pre>
     */
    START_TYPE(0, 1),
    /**
     * <code>SETOUT_TYPE = 2;</code>
     *
     * <pre>
     * 准备，通知队长
     * </pre>
     */
    SETOUT_TYPE(1, 2),
    /**
     * <code>INVITE_TYPE = 3;</code>
     *
     * <pre>
     * 邀请通知
     * </pre>
     */
    INVITE_TYPE(2, 3),
    ;

    /**
     * <code>START_TYPE = 1;</code>
     *
     * <pre>
     * 开始，通知队员
     * </pre>
     */
    public static final int START_TYPE_VALUE = 1;
    /**
     * <code>SETOUT_TYPE = 2;</code>
     *
     * <pre>
     * 准备，通知队长
     * </pre>
     */
    public static final int SETOUT_TYPE_VALUE = 2;
    /**
     * <code>INVITE_TYPE = 3;</code>
     *
     * <pre>
     * 邀请通知
     * </pre>
     */
    public static final int INVITE_TYPE_VALUE = 3;


    public final int getNumber() { return value; }

    public static MutliNoticeType valueOf(int value) {
      switch (value) {
        case 1: return START_TYPE;
        case 2: return SETOUT_TYPE;
        case 3: return INVITE_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MutliNoticeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MutliNoticeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MutliNoticeType>() {
            public MutliNoticeType findValueByNumber(int number) {
              return MutliNoticeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(59);
    }

    private static final MutliNoticeType[] VALUES = values();

    public static MutliNoticeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MutliNoticeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:MutliNoticeType)
  }

  /**
   * Protobuf enum {@code HaremType}
   *
   * <pre>
   * 魔法召唤
   * </pre>
   */
  public enum HaremType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HAREM_TYPE_COMMON = 1;</code>
     *
     * <pre>
     * 普通
     * </pre>
     */
    HAREM_TYPE_COMMON(0, 1),
    /**
     * <code>HAREM_TYPE_MIDDLE = 2;</code>
     *
     * <pre>
     * 中级
     * </pre>
     */
    HAREM_TYPE_MIDDLE(1, 2),
    /**
     * <code>HAREM_TYPE_ADVANCED = 3;</code>
     *
     * <pre>
     * 高级
     * </pre>
     */
    HAREM_TYPE_ADVANCED(2, 3),
    /**
     * <code>HAREM_TYPE_STRICT = 4;</code>
     *
     * <pre>
     * 限定
     * </pre>
     */
    HAREM_TYPE_STRICT(3, 4),
    /**
     * <code>HAREM_TYPE_NEW_STRICT = 5;</code>
     *
     * <pre>
     * 新手限定活动
     * </pre>
     */
    HAREM_TYPE_NEW_STRICT(4, 5),
    /**
     * <code>HAREM_TYPE_LIMIT = 6;</code>
     *
     * <pre>
     * 限购奖池活动
     * </pre>
     */
    HAREM_TYPE_LIMIT(5, 6),
    ;

    /**
     * <code>HAREM_TYPE_COMMON = 1;</code>
     *
     * <pre>
     * 普通
     * </pre>
     */
    public static final int HAREM_TYPE_COMMON_VALUE = 1;
    /**
     * <code>HAREM_TYPE_MIDDLE = 2;</code>
     *
     * <pre>
     * 中级
     * </pre>
     */
    public static final int HAREM_TYPE_MIDDLE_VALUE = 2;
    /**
     * <code>HAREM_TYPE_ADVANCED = 3;</code>
     *
     * <pre>
     * 高级
     * </pre>
     */
    public static final int HAREM_TYPE_ADVANCED_VALUE = 3;
    /**
     * <code>HAREM_TYPE_STRICT = 4;</code>
     *
     * <pre>
     * 限定
     * </pre>
     */
    public static final int HAREM_TYPE_STRICT_VALUE = 4;
    /**
     * <code>HAREM_TYPE_NEW_STRICT = 5;</code>
     *
     * <pre>
     * 新手限定活动
     * </pre>
     */
    public static final int HAREM_TYPE_NEW_STRICT_VALUE = 5;
    /**
     * <code>HAREM_TYPE_LIMIT = 6;</code>
     *
     * <pre>
     * 限购奖池活动
     * </pre>
     */
    public static final int HAREM_TYPE_LIMIT_VALUE = 6;


    public final int getNumber() { return value; }

    public static HaremType valueOf(int value) {
      switch (value) {
        case 1: return HAREM_TYPE_COMMON;
        case 2: return HAREM_TYPE_MIDDLE;
        case 3: return HAREM_TYPE_ADVANCED;
        case 4: return HAREM_TYPE_STRICT;
        case 5: return HAREM_TYPE_NEW_STRICT;
        case 6: return HAREM_TYPE_LIMIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HaremType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<HaremType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HaremType>() {
            public HaremType findValueByNumber(int number) {
              return HaremType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(60);
    }

    private static final HaremType[] VALUES = values();

    public static HaremType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private HaremType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:HaremType)
  }

  /**
   * Protobuf enum {@code BossAutoBattleType}
   *
   * <pre>
   * 世界boss自动战斗类型
   * </pre>
   */
  public enum BossAutoBattleType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BOSS_NO_AUTO_TYPE = 0;</code>
     *
     * <pre>
     * 不自动
     * </pre>
     */
    BOSS_NO_AUTO_TYPE(0, 0),
    /**
     * <code>BOSS_COMMON_TYPE = 1;</code>
     *
     * <pre>
     * 普通自动
     * </pre>
     */
    BOSS_COMMON_TYPE(1, 1),
    /**
     * <code>BOSS_ADVANCED_TYPE = 2;</code>
     *
     * <pre>
     * 高级自动
     * </pre>
     */
    BOSS_ADVANCED_TYPE(2, 2),
    ;

    /**
     * <code>BOSS_NO_AUTO_TYPE = 0;</code>
     *
     * <pre>
     * 不自动
     * </pre>
     */
    public static final int BOSS_NO_AUTO_TYPE_VALUE = 0;
    /**
     * <code>BOSS_COMMON_TYPE = 1;</code>
     *
     * <pre>
     * 普通自动
     * </pre>
     */
    public static final int BOSS_COMMON_TYPE_VALUE = 1;
    /**
     * <code>BOSS_ADVANCED_TYPE = 2;</code>
     *
     * <pre>
     * 高级自动
     * </pre>
     */
    public static final int BOSS_ADVANCED_TYPE_VALUE = 2;


    public final int getNumber() { return value; }

    public static BossAutoBattleType valueOf(int value) {
      switch (value) {
        case 0: return BOSS_NO_AUTO_TYPE;
        case 1: return BOSS_COMMON_TYPE;
        case 2: return BOSS_ADVANCED_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BossAutoBattleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<BossAutoBattleType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BossAutoBattleType>() {
            public BossAutoBattleType findValueByNumber(int number) {
              return BossAutoBattleType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(61);
    }

    private static final BossAutoBattleType[] VALUES = values();

    public static BossAutoBattleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private BossAutoBattleType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:BossAutoBattleType)
  }

  /**
   * Protobuf enum {@code WorldBossRankType}
   *
   * <pre>
   * 世界boss排行类型
   * </pre>
   */
  public enum WorldBossRankType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BOSS_PERSON_RANK_TYPE = 1;</code>
     *
     * <pre>
     * 个人排行
     * </pre>
     */
    BOSS_PERSON_RANK_TYPE(0, 1),
    /**
     * <code>BOSS_LAST_KILL_RANT_TYPE = 2;</code>
     *
     * <pre>
     * 最后击杀排行
     * </pre>
     */
    BOSS_LAST_KILL_RANT_TYPE(1, 2),
    /**
     * <code>BOSS_ALLIANCE_RANK_TYPE = 3;</code>
     *
     * <pre>
     * 联盟排行
     * </pre>
     */
    BOSS_ALLIANCE_RANK_TYPE(2, 3),
    ;

    /**
     * <code>BOSS_PERSON_RANK_TYPE = 1;</code>
     *
     * <pre>
     * 个人排行
     * </pre>
     */
    public static final int BOSS_PERSON_RANK_TYPE_VALUE = 1;
    /**
     * <code>BOSS_LAST_KILL_RANT_TYPE = 2;</code>
     *
     * <pre>
     * 最后击杀排行
     * </pre>
     */
    public static final int BOSS_LAST_KILL_RANT_TYPE_VALUE = 2;
    /**
     * <code>BOSS_ALLIANCE_RANK_TYPE = 3;</code>
     *
     * <pre>
     * 联盟排行
     * </pre>
     */
    public static final int BOSS_ALLIANCE_RANK_TYPE_VALUE = 3;


    public final int getNumber() { return value; }

    public static WorldBossRankType valueOf(int value) {
      switch (value) {
        case 1: return BOSS_PERSON_RANK_TYPE;
        case 2: return BOSS_LAST_KILL_RANT_TYPE;
        case 3: return BOSS_ALLIANCE_RANK_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WorldBossRankType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<WorldBossRankType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WorldBossRankType>() {
            public WorldBossRankType findValueByNumber(int number) {
              return WorldBossRankType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(62);
    }

    private static final WorldBossRankType[] VALUES = values();

    public static WorldBossRankType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private WorldBossRankType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:WorldBossRankType)
  }

  /**
   * Protobuf enum {@code WorldBossFailingType}
   *
   * <pre>
   * 世界boss弱点部位类型
   * </pre>
   */
  public enum WorldBossFailingType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NOT_PART = 0;</code>
     *
     * <pre>
     * 没有
     * </pre>
     */
    NOT_PART(0, 0),
    /**
     * <code>HEAD_TYPE = 1;</code>
     *
     * <pre>
     * 头部
     * </pre>
     */
    HEAD_TYPE(1, 1),
    /**
     * <code>CHEST_TYPE = 2;</code>
     *
     * <pre>
     * 胸部
     * </pre>
     */
    CHEST_TYPE(2, 2),
    /**
     * <code>HAUNCH_TYPE = 3;</code>
     *
     * <pre>
     * 臀部
     * </pre>
     */
    HAUNCH_TYPE(3, 3),
    ;

    /**
     * <code>NOT_PART = 0;</code>
     *
     * <pre>
     * 没有
     * </pre>
     */
    public static final int NOT_PART_VALUE = 0;
    /**
     * <code>HEAD_TYPE = 1;</code>
     *
     * <pre>
     * 头部
     * </pre>
     */
    public static final int HEAD_TYPE_VALUE = 1;
    /**
     * <code>CHEST_TYPE = 2;</code>
     *
     * <pre>
     * 胸部
     * </pre>
     */
    public static final int CHEST_TYPE_VALUE = 2;
    /**
     * <code>HAUNCH_TYPE = 3;</code>
     *
     * <pre>
     * 臀部
     * </pre>
     */
    public static final int HAUNCH_TYPE_VALUE = 3;


    public final int getNumber() { return value; }

    public static WorldBossFailingType valueOf(int value) {
      switch (value) {
        case 0: return NOT_PART;
        case 1: return HEAD_TYPE;
        case 2: return CHEST_TYPE;
        case 3: return HAUNCH_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WorldBossFailingType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<WorldBossFailingType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WorldBossFailingType>() {
            public WorldBossFailingType findValueByNumber(int number) {
              return WorldBossFailingType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(63);
    }

    private static final WorldBossFailingType[] VALUES = values();

    public static WorldBossFailingType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private WorldBossFailingType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:WorldBossFailingType)
  }

  /**
   * Protobuf enum {@code WorldBossIsFree}
   *
   * <pre>
   * 是否免费
   * </pre>
   */
  public enum WorldBossIsFree
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WORLD_BOSS_FREE = 1;</code>
     *
     * <pre>
     * 免费
     * </pre>
     */
    WORLD_BOSS_FREE(0, 1),
    /**
     * <code>WORLD_BOSS_GOLD = 2;</code>
     *
     * <pre>
     * 收费
     * </pre>
     */
    WORLD_BOSS_GOLD(1, 2),
    ;

    /**
     * <code>WORLD_BOSS_FREE = 1;</code>
     *
     * <pre>
     * 免费
     * </pre>
     */
    public static final int WORLD_BOSS_FREE_VALUE = 1;
    /**
     * <code>WORLD_BOSS_GOLD = 2;</code>
     *
     * <pre>
     * 收费
     * </pre>
     */
    public static final int WORLD_BOSS_GOLD_VALUE = 2;


    public final int getNumber() { return value; }

    public static WorldBossIsFree valueOf(int value) {
      switch (value) {
        case 1: return WORLD_BOSS_FREE;
        case 2: return WORLD_BOSS_GOLD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WorldBossIsFree>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<WorldBossIsFree>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WorldBossIsFree>() {
            public WorldBossIsFree findValueByNumber(int number) {
              return WorldBossIsFree.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(64);
    }

    private static final WorldBossIsFree[] VALUES = values();

    public static WorldBossIsFree valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private WorldBossIsFree(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:WorldBossIsFree)
  }

  /**
   * Protobuf enum {@code EquipEnhanceType}
   *
   * <pre>
   * 装备强化类型
   * </pre>
   */
  public enum EquipEnhanceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EQUIP_ONCE = 1;</code>
     *
     * <pre>
     * 强化1次
     * </pre>
     */
    EQUIP_ONCE(0, 1),
    /**
     * <code>EQUIP_TEN_TIMES = 2;</code>
     *
     * <pre>
     * 强化10次
     * </pre>
     */
    EQUIP_TEN_TIMES(1, 2),
    ;

    /**
     * <code>EQUIP_ONCE = 1;</code>
     *
     * <pre>
     * 强化1次
     * </pre>
     */
    public static final int EQUIP_ONCE_VALUE = 1;
    /**
     * <code>EQUIP_TEN_TIMES = 2;</code>
     *
     * <pre>
     * 强化10次
     * </pre>
     */
    public static final int EQUIP_TEN_TIMES_VALUE = 2;


    public final int getNumber() { return value; }

    public static EquipEnhanceType valueOf(int value) {
      switch (value) {
        case 1: return EQUIP_ONCE;
        case 2: return EQUIP_TEN_TIMES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EquipEnhanceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EquipEnhanceType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EquipEnhanceType>() {
            public EquipEnhanceType findValueByNumber(int number) {
              return EquipEnhanceType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(65);
    }

    private static final EquipEnhanceType[] VALUES = values();

    public static EquipEnhanceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EquipEnhanceType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EquipEnhanceType)
  }

  /**
   * Protobuf enum {@code SevenDayEventType}
   *
   * <pre>
   * 7 日之诗任务时间类型
   * </pre>
   */
  public enum SevenDayEventType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LOGIN = 1;</code>
     *
     * <pre>
     * 登录
     * </pre>
     */
    LOGIN(0, 1),
    /**
     * <code>RECHARGE = 2;</code>
     *
     * <pre>
     * 充值
     * </pre>
     */
    RECHARGE(1, 2),
    /**
     * <code>LEVELUP = 3;</code>
     *
     * <pre>
     * 角色升级
     * </pre>
     */
    LEVELUP(2, 3),
    /**
     * <code>CHALLENGE = 4;</code>
     *
     * <pre>
     * 关卡挑战
     * </pre>
     */
    CHALLENGE(3, 4),
    /**
     * <code>BUYDISCOUNT = 5;</code>
     *
     * <pre>
     * 优惠折扣
     * </pre>
     */
    BUYDISCOUNT(4, 5),
    /**
     * <code>FASTBATTLE = 6;</code>
     *
     * <pre>
     * 快速战斗
     * </pre>
     */
    FASTBATTLE(5, 6),
    /**
     * <code>ATHLETICS = 7;</code>
     *
     * <pre>
     * 竞技场
     * </pre>
     */
    ATHLETICS(6, 7),
    /**
     * <code>EQUIPMENT = 8;</code>
     *
     * <pre>
     * 装备铸造
     * </pre>
     */
    EQUIPMENT(7, 8),
    /**
     * <code>EQUIPSUCCINCT = 9;</code>
     *
     * <pre>
     * 装备洗练
     * </pre>
     */
    EQUIPSUCCINCT(8, 9),
    /**
     * <code>EQUIPSTRAN = 10;</code>
     *
     * <pre>
     * 装备强化
     * </pre>
     */
    EQUIPSTRAN(9, 10),
    /**
     * <code>AUTOPVE = 11;</code>
     *
     * <pre>
     * 自动打怪
     * </pre>
     */
    AUTOPVE(10, 11),
    /**
     * <code>TRAINING = 12;</code>
     *
     * <pre>
     * 训练所突破
     * </pre>
     */
    TRAINING(11, 12),
    /**
     * <code>DEPUTYTRAIN = 13;</code>
     *
     * <pre>
     * 英雄突破
     * </pre>
     */
    DEPUTYTRAIN(12, 13),
    /**
     * <code>DEPUTYTRAVEL = 14;</code>
     *
     * <pre>
     * 副将游历
     * </pre>
     */
    DEPUTYTRAVEL(13, 14),
    /**
     * <code>DEPUTYDEVELOP = 15;</code>
     *
     * <pre>
     * 英雄升級
     * </pre>
     */
    DEPUTYDEVELOP(14, 15),
    /**
     * <code>DEPUTYNUM = 17;</code>
     *
     * <pre>
     * 副将人数
     * </pre>
     */
    DEPUTYNUM(15, 17),
    /**
     * <code>MAIDENTRAIN = 18;</code>
     *
     * <pre>
     * 少女调教
     * </pre>
     */
    MAIDENTRAIN(16, 18),
    /**
     * <code>PVPARENA = 19;</code>
     *
     * <pre>
     * 竞技
     * </pre>
     */
    PVPARENA(17, 19),
    /**
     * <code>MAINROLE_SCORE = 20;</code>
     *
     * <pre>
     * 主角战力
     * </pre>
     */
    MAINROLE_SCORE(18, 20),
    /**
     * <code>EQUIP_FORGE = 21;</code>
     *
     * <pre>
     * 裝備再造
     * </pre>
     */
    EQUIP_FORGE(19, 21),
    /**
     * <code>TAKE_FIGHT_AWARD = 22;</code>
     *
     * <pre>
     * 掛機新增
     * </pre>
     */
    TAKE_FIGHT_AWARD(20, 22),
    /**
     * <code>PASS_MISSION = 23;</code>
     *
     * <pre>
     * 過關
     * </pre>
     */
    PASS_MISSION(21, 23),
    ;

    /**
     * <code>LOGIN = 1;</code>
     *
     * <pre>
     * 登录
     * </pre>
     */
    public static final int LOGIN_VALUE = 1;
    /**
     * <code>RECHARGE = 2;</code>
     *
     * <pre>
     * 充值
     * </pre>
     */
    public static final int RECHARGE_VALUE = 2;
    /**
     * <code>LEVELUP = 3;</code>
     *
     * <pre>
     * 角色升级
     * </pre>
     */
    public static final int LEVELUP_VALUE = 3;
    /**
     * <code>CHALLENGE = 4;</code>
     *
     * <pre>
     * 关卡挑战
     * </pre>
     */
    public static final int CHALLENGE_VALUE = 4;
    /**
     * <code>BUYDISCOUNT = 5;</code>
     *
     * <pre>
     * 优惠折扣
     * </pre>
     */
    public static final int BUYDISCOUNT_VALUE = 5;
    /**
     * <code>FASTBATTLE = 6;</code>
     *
     * <pre>
     * 快速战斗
     * </pre>
     */
    public static final int FASTBATTLE_VALUE = 6;
    /**
     * <code>ATHLETICS = 7;</code>
     *
     * <pre>
     * 竞技场
     * </pre>
     */
    public static final int ATHLETICS_VALUE = 7;
    /**
     * <code>EQUIPMENT = 8;</code>
     *
     * <pre>
     * 装备铸造
     * </pre>
     */
    public static final int EQUIPMENT_VALUE = 8;
    /**
     * <code>EQUIPSUCCINCT = 9;</code>
     *
     * <pre>
     * 装备洗练
     * </pre>
     */
    public static final int EQUIPSUCCINCT_VALUE = 9;
    /**
     * <code>EQUIPSTRAN = 10;</code>
     *
     * <pre>
     * 装备强化
     * </pre>
     */
    public static final int EQUIPSTRAN_VALUE = 10;
    /**
     * <code>AUTOPVE = 11;</code>
     *
     * <pre>
     * 自动打怪
     * </pre>
     */
    public static final int AUTOPVE_VALUE = 11;
    /**
     * <code>TRAINING = 12;</code>
     *
     * <pre>
     * 训练所突破
     * </pre>
     */
    public static final int TRAINING_VALUE = 12;
    /**
     * <code>DEPUTYTRAIN = 13;</code>
     *
     * <pre>
     * 英雄突破
     * </pre>
     */
    public static final int DEPUTYTRAIN_VALUE = 13;
    /**
     * <code>DEPUTYTRAVEL = 14;</code>
     *
     * <pre>
     * 副将游历
     * </pre>
     */
    public static final int DEPUTYTRAVEL_VALUE = 14;
    /**
     * <code>DEPUTYDEVELOP = 15;</code>
     *
     * <pre>
     * 英雄升級
     * </pre>
     */
    public static final int DEPUTYDEVELOP_VALUE = 15;
    /**
     * <code>DEPUTYNUM = 17;</code>
     *
     * <pre>
     * 副将人数
     * </pre>
     */
    public static final int DEPUTYNUM_VALUE = 17;
    /**
     * <code>MAIDENTRAIN = 18;</code>
     *
     * <pre>
     * 少女调教
     * </pre>
     */
    public static final int MAIDENTRAIN_VALUE = 18;
    /**
     * <code>PVPARENA = 19;</code>
     *
     * <pre>
     * 竞技
     * </pre>
     */
    public static final int PVPARENA_VALUE = 19;
    /**
     * <code>MAINROLE_SCORE = 20;</code>
     *
     * <pre>
     * 主角战力
     * </pre>
     */
    public static final int MAINROLE_SCORE_VALUE = 20;
    /**
     * <code>EQUIP_FORGE = 21;</code>
     *
     * <pre>
     * 裝備再造
     * </pre>
     */
    public static final int EQUIP_FORGE_VALUE = 21;
    /**
     * <code>TAKE_FIGHT_AWARD = 22;</code>
     *
     * <pre>
     * 掛機新增
     * </pre>
     */
    public static final int TAKE_FIGHT_AWARD_VALUE = 22;
    /**
     * <code>PASS_MISSION = 23;</code>
     *
     * <pre>
     * 過關
     * </pre>
     */
    public static final int PASS_MISSION_VALUE = 23;


    public final int getNumber() { return value; }

    public static SevenDayEventType valueOf(int value) {
      switch (value) {
        case 1: return LOGIN;
        case 2: return RECHARGE;
        case 3: return LEVELUP;
        case 4: return CHALLENGE;
        case 5: return BUYDISCOUNT;
        case 6: return FASTBATTLE;
        case 7: return ATHLETICS;
        case 8: return EQUIPMENT;
        case 9: return EQUIPSUCCINCT;
        case 10: return EQUIPSTRAN;
        case 11: return AUTOPVE;
        case 12: return TRAINING;
        case 13: return DEPUTYTRAIN;
        case 14: return DEPUTYTRAVEL;
        case 15: return DEPUTYDEVELOP;
        case 17: return DEPUTYNUM;
        case 18: return MAIDENTRAIN;
        case 19: return PVPARENA;
        case 20: return MAINROLE_SCORE;
        case 21: return EQUIP_FORGE;
        case 22: return TAKE_FIGHT_AWARD;
        case 23: return PASS_MISSION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SevenDayEventType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SevenDayEventType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SevenDayEventType>() {
            public SevenDayEventType findValueByNumber(int number) {
              return SevenDayEventType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(66);
    }

    private static final SevenDayEventType[] VALUES = values();

    public static SevenDayEventType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SevenDayEventType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SevenDayEventType)
  }

  /**
   * Protobuf enum {@code TenDayEventType}
   *
   * <pre>
   * 10 日挑戰任务时间类型
   * </pre>
   */
  public enum TenDayEventType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TEN_LOGIN = 1;</code>
     *
     * <pre>
     * 登录
     * </pre>
     */
    TEN_LOGIN(0, 1),
    /**
     * <code>TEN_FASTBATTLE = 2;</code>
     *
     * <pre>
     * 快速战斗
     * </pre>
     */
    TEN_FASTBATTLE(1, 2),
    /**
     * <code>TEN_AUTOPVE = 3;</code>
     *
     * <pre>
     * 自动打怪
     * </pre>
     */
    TEN_AUTOPVE(2, 3),
    /**
     * <code>TEN_EQUIPMENT = 4;</code>
     *
     * <pre>
     * 装备铸造
     * </pre>
     */
    TEN_EQUIPMENT(3, 4),
    /**
     * <code>TEN_PVPARENA = 5;</code>
     *
     * <pre>
     *竞技场挑战
     * </pre>
     */
    TEN_PVPARENA(4, 5),
    /**
     * <code>TEN_DEPUTYTRAVEL = 6;</code>
     *
     * <pre>
     * 遠足
     * </pre>
     */
    TEN_DEPUTYTRAVEL(5, 6),
    /**
     * <code>TEN_TRAINING = 7;</code>
     *
     * <pre>
     * 訓練所
     * </pre>
     */
    TEN_TRAINING(6, 7),
    /**
     * <code>TEN_ACCCONSUME = 8;</code>
     *
     * <pre>
     * 消耗鑽石
     * </pre>
     */
    TEN_ACCCONSUME(7, 8),
    /**
     * <code>TEN_DEPUTYTRAIN = 9;</code>
     *
     * <pre>
     * 副将训练
     * </pre>
     */
    TEN_DEPUTYTRAIN(8, 9),
    ;

    /**
     * <code>TEN_LOGIN = 1;</code>
     *
     * <pre>
     * 登录
     * </pre>
     */
    public static final int TEN_LOGIN_VALUE = 1;
    /**
     * <code>TEN_FASTBATTLE = 2;</code>
     *
     * <pre>
     * 快速战斗
     * </pre>
     */
    public static final int TEN_FASTBATTLE_VALUE = 2;
    /**
     * <code>TEN_AUTOPVE = 3;</code>
     *
     * <pre>
     * 自动打怪
     * </pre>
     */
    public static final int TEN_AUTOPVE_VALUE = 3;
    /**
     * <code>TEN_EQUIPMENT = 4;</code>
     *
     * <pre>
     * 装备铸造
     * </pre>
     */
    public static final int TEN_EQUIPMENT_VALUE = 4;
    /**
     * <code>TEN_PVPARENA = 5;</code>
     *
     * <pre>
     *竞技场挑战
     * </pre>
     */
    public static final int TEN_PVPARENA_VALUE = 5;
    /**
     * <code>TEN_DEPUTYTRAVEL = 6;</code>
     *
     * <pre>
     * 遠足
     * </pre>
     */
    public static final int TEN_DEPUTYTRAVEL_VALUE = 6;
    /**
     * <code>TEN_TRAINING = 7;</code>
     *
     * <pre>
     * 訓練所
     * </pre>
     */
    public static final int TEN_TRAINING_VALUE = 7;
    /**
     * <code>TEN_ACCCONSUME = 8;</code>
     *
     * <pre>
     * 消耗鑽石
     * </pre>
     */
    public static final int TEN_ACCCONSUME_VALUE = 8;
    /**
     * <code>TEN_DEPUTYTRAIN = 9;</code>
     *
     * <pre>
     * 副将训练
     * </pre>
     */
    public static final int TEN_DEPUTYTRAIN_VALUE = 9;


    public final int getNumber() { return value; }

    public static TenDayEventType valueOf(int value) {
      switch (value) {
        case 1: return TEN_LOGIN;
        case 2: return TEN_FASTBATTLE;
        case 3: return TEN_AUTOPVE;
        case 4: return TEN_EQUIPMENT;
        case 5: return TEN_PVPARENA;
        case 6: return TEN_DEPUTYTRAVEL;
        case 7: return TEN_TRAINING;
        case 8: return TEN_ACCCONSUME;
        case 9: return TEN_DEPUTYTRAIN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TenDayEventType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TenDayEventType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TenDayEventType>() {
            public TenDayEventType findValueByNumber(int number) {
              return TenDayEventType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(67);
    }

    private static final TenDayEventType[] VALUES = values();

    public static TenDayEventType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TenDayEventType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:TenDayEventType)
  }

  /**
   * Protobuf enum {@code LoginSignAwdType}
   *
   * <pre>
   * 30天签到活动领奖类型
   * </pre>
   */
  public enum LoginSignAwdType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SIGNAWARD = 1;</code>
     *
     * <pre>
     * 签到领奖
     * </pre>
     */
    SIGNAWARD(0, 1),
    /**
     * <code>SIGNOPENCHEST = 2;</code>
     *
     * <pre>
     * 开箱子领奖
     * </pre>
     */
    SIGNOPENCHEST(1, 2),
    ;

    /**
     * <code>SIGNAWARD = 1;</code>
     *
     * <pre>
     * 签到领奖
     * </pre>
     */
    public static final int SIGNAWARD_VALUE = 1;
    /**
     * <code>SIGNOPENCHEST = 2;</code>
     *
     * <pre>
     * 开箱子领奖
     * </pre>
     */
    public static final int SIGNOPENCHEST_VALUE = 2;


    public final int getNumber() { return value; }

    public static LoginSignAwdType valueOf(int value) {
      switch (value) {
        case 1: return SIGNAWARD;
        case 2: return SIGNOPENCHEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LoginSignAwdType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<LoginSignAwdType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LoginSignAwdType>() {
            public LoginSignAwdType findValueByNumber(int number) {
              return LoginSignAwdType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(68);
    }

    private static final LoginSignAwdType[] VALUES = values();

    public static LoginSignAwdType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private LoginSignAwdType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:LoginSignAwdType)
  }

  /**
   * Protobuf enum {@code EighteenPrincesLayerStatus}
   *
   * <pre>
   * 十八路诸侯层级状态
   * </pre>
   */
  public enum EighteenPrincesLayerStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NOT_OPEN = 0;</code>
     */
    NOT_OPEN(0, 0),
    /**
     * <code>CAN_CHANLLENGE = 1;</code>
     */
    CAN_CHANLLENGE(1, 1),
    /**
     * <code>ALL_PASS = 2;</code>
     */
    ALL_PASS(2, 2),
    ;

    /**
     * <code>NOT_OPEN = 0;</code>
     */
    public static final int NOT_OPEN_VALUE = 0;
    /**
     * <code>CAN_CHANLLENGE = 1;</code>
     */
    public static final int CAN_CHANLLENGE_VALUE = 1;
    /**
     * <code>ALL_PASS = 2;</code>
     */
    public static final int ALL_PASS_VALUE = 2;


    public final int getNumber() { return value; }

    public static EighteenPrincesLayerStatus valueOf(int value) {
      switch (value) {
        case 0: return NOT_OPEN;
        case 1: return CAN_CHANLLENGE;
        case 2: return ALL_PASS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EighteenPrincesLayerStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EighteenPrincesLayerStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EighteenPrincesLayerStatus>() {
            public EighteenPrincesLayerStatus findValueByNumber(int number) {
              return EighteenPrincesLayerStatus.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(69);
    }

    private static final EighteenPrincesLayerStatus[] VALUES = values();

    public static EighteenPrincesLayerStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EighteenPrincesLayerStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EighteenPrincesLayerStatus)
  }

  /**
   * Protobuf enum {@code EighteenPrincesMedicalKitTYPE}
   *
   * <pre>
   * 十八路诸侯药箱类型
   * </pre>
   */
  public enum EighteenPrincesMedicalKitTYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BIGMEDICALKIT = 1;</code>
     */
    BIGMEDICALKIT(0, 1),
    /**
     * <code>MIDLEMEDICALKIT = 2;</code>
     */
    MIDLEMEDICALKIT(1, 2),
    /**
     * <code>SMALLMEDICALKIT = 3;</code>
     */
    SMALLMEDICALKIT(2, 3),
    ;

    /**
     * <code>BIGMEDICALKIT = 1;</code>
     */
    public static final int BIGMEDICALKIT_VALUE = 1;
    /**
     * <code>MIDLEMEDICALKIT = 2;</code>
     */
    public static final int MIDLEMEDICALKIT_VALUE = 2;
    /**
     * <code>SMALLMEDICALKIT = 3;</code>
     */
    public static final int SMALLMEDICALKIT_VALUE = 3;


    public final int getNumber() { return value; }

    public static EighteenPrincesMedicalKitTYPE valueOf(int value) {
      switch (value) {
        case 1: return BIGMEDICALKIT;
        case 2: return MIDLEMEDICALKIT;
        case 3: return SMALLMEDICALKIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EighteenPrincesMedicalKitTYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EighteenPrincesMedicalKitTYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EighteenPrincesMedicalKitTYPE>() {
            public EighteenPrincesMedicalKitTYPE findValueByNumber(int number) {
              return EighteenPrincesMedicalKitTYPE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(70);
    }

    private static final EighteenPrincesMedicalKitTYPE[] VALUES = values();

    public static EighteenPrincesMedicalKitTYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EighteenPrincesMedicalKitTYPE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EighteenPrincesMedicalKitTYPE)
  }

  /**
   * Protobuf enum {@code BadgeAttrGrade}
   *
   * <pre>
   * 徽章属性类型
   * </pre>
   */
  public enum BadgeAttrGrade
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BADGE_PRIMARY_ATTR = 1;</code>
     *
     * <pre>
     * 主属性
     * </pre>
     */
    BADGE_PRIMARY_ATTR(0, 1),
    /**
     * <code>BADGE_EXTRA_ATTR = 2;</code>
     *
     * <pre>
     * 副属性
     * </pre>
     */
    BADGE_EXTRA_ATTR(1, 2),
    ;

    /**
     * <code>BADGE_PRIMARY_ATTR = 1;</code>
     *
     * <pre>
     * 主属性
     * </pre>
     */
    public static final int BADGE_PRIMARY_ATTR_VALUE = 1;
    /**
     * <code>BADGE_EXTRA_ATTR = 2;</code>
     *
     * <pre>
     * 副属性
     * </pre>
     */
    public static final int BADGE_EXTRA_ATTR_VALUE = 2;


    public final int getNumber() { return value; }

    public static BadgeAttrGrade valueOf(int value) {
      switch (value) {
        case 1: return BADGE_PRIMARY_ATTR;
        case 2: return BADGE_EXTRA_ATTR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BadgeAttrGrade>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<BadgeAttrGrade>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BadgeAttrGrade>() {
            public BadgeAttrGrade findValueByNumber(int number) {
              return BadgeAttrGrade.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(71);
    }

    private static final BadgeAttrGrade[] VALUES = values();

    public static BadgeAttrGrade valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private BadgeAttrGrade(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:BadgeAttrGrade)
  }

  /**
   * Protobuf enum {@code BadgeType}
   *
   * <pre>
   * 徽章类型
   * </pre>
   */
  public enum BadgeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>POWERFUL_BADGE = 1;</code>
     *
     * <pre>
     * 强力
     * </pre>
     */
    POWERFUL_BADGE(0, 1),
    /**
     * <code>COURAGE_BADGE = 2;</code>
     *
     * <pre>
     * 勇气
     * </pre>
     */
    COURAGE_BADGE(1, 2),
    /**
     * <code>PRECISION_BADGE = 3;</code>
     *
     * <pre>
     * 精准
     * </pre>
     */
    PRECISION_BADGE(2, 3),
    /**
     * <code>STRONG_BADGE = 4;</code>
     *
     * <pre>
     * 强固
     * </pre>
     */
    STRONG_BADGE(3, 4),
    /**
     * <code>SOFT_BADGE = 5;</code>
     *
     * <pre>
     * 柔软
     * </pre>
     */
    SOFT_BADGE(4, 5),
    /**
     * <code>QUICK_BADGE = 6;</code>
     *
     * <pre>
     * 迅速
     * </pre>
     */
    QUICK_BADGE(5, 6),
    ;

    /**
     * <code>POWERFUL_BADGE = 1;</code>
     *
     * <pre>
     * 强力
     * </pre>
     */
    public static final int POWERFUL_BADGE_VALUE = 1;
    /**
     * <code>COURAGE_BADGE = 2;</code>
     *
     * <pre>
     * 勇气
     * </pre>
     */
    public static final int COURAGE_BADGE_VALUE = 2;
    /**
     * <code>PRECISION_BADGE = 3;</code>
     *
     * <pre>
     * 精准
     * </pre>
     */
    public static final int PRECISION_BADGE_VALUE = 3;
    /**
     * <code>STRONG_BADGE = 4;</code>
     *
     * <pre>
     * 强固
     * </pre>
     */
    public static final int STRONG_BADGE_VALUE = 4;
    /**
     * <code>SOFT_BADGE = 5;</code>
     *
     * <pre>
     * 柔软
     * </pre>
     */
    public static final int SOFT_BADGE_VALUE = 5;
    /**
     * <code>QUICK_BADGE = 6;</code>
     *
     * <pre>
     * 迅速
     * </pre>
     */
    public static final int QUICK_BADGE_VALUE = 6;


    public final int getNumber() { return value; }

    public static BadgeType valueOf(int value) {
      switch (value) {
        case 1: return POWERFUL_BADGE;
        case 2: return COURAGE_BADGE;
        case 3: return PRECISION_BADGE;
        case 4: return STRONG_BADGE;
        case 5: return SOFT_BADGE;
        case 6: return QUICK_BADGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BadgeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<BadgeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BadgeType>() {
            public BadgeType findValueByNumber(int number) {
              return BadgeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(72);
    }

    private static final BadgeType[] VALUES = values();

    public static BadgeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private BadgeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:BadgeType)
  }

  /**
   * Protobuf enum {@code BadgeQuality}
   *
   * <pre>
   * 装备品质
   * </pre>
   */
  public enum BadgeQuality
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>GREEN_BADGE = 2;</code>
     *
     * <pre>
     * 绿
     * </pre>
     */
    GREEN_BADGE(0, 2),
    /**
     * <code>BLUE_BADGE = 3;</code>
     *
     * <pre>
     * 蓝
     * </pre>
     */
    BLUE_BADGE(1, 3),
    /**
     * <code>PURPLE_BADGE = 4;</code>
     *
     * <pre>
     * 紫
     * </pre>
     */
    PURPLE_BADGE(2, 4),
    /**
     * <code>ORANGE_BADGE = 5;</code>
     *
     * <pre>
     * 橙
     * </pre>
     */
    ORANGE_BADGE(3, 5),
    /**
     * <code>RED_BADGE = 6;</code>
     *
     * <pre>
     * 红
     * </pre>
     */
    RED_BADGE(4, 6),
    ;

    /**
     * <code>GREEN_BADGE = 2;</code>
     *
     * <pre>
     * 绿
     * </pre>
     */
    public static final int GREEN_BADGE_VALUE = 2;
    /**
     * <code>BLUE_BADGE = 3;</code>
     *
     * <pre>
     * 蓝
     * </pre>
     */
    public static final int BLUE_BADGE_VALUE = 3;
    /**
     * <code>PURPLE_BADGE = 4;</code>
     *
     * <pre>
     * 紫
     * </pre>
     */
    public static final int PURPLE_BADGE_VALUE = 4;
    /**
     * <code>ORANGE_BADGE = 5;</code>
     *
     * <pre>
     * 橙
     * </pre>
     */
    public static final int ORANGE_BADGE_VALUE = 5;
    /**
     * <code>RED_BADGE = 6;</code>
     *
     * <pre>
     * 红
     * </pre>
     */
    public static final int RED_BADGE_VALUE = 6;


    public final int getNumber() { return value; }

    public static BadgeQuality valueOf(int value) {
      switch (value) {
        case 2: return GREEN_BADGE;
        case 3: return BLUE_BADGE;
        case 4: return PURPLE_BADGE;
        case 5: return ORANGE_BADGE;
        case 6: return RED_BADGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BadgeQuality>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<BadgeQuality>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BadgeQuality>() {
            public BadgeQuality findValueByNumber(int number) {
              return BadgeQuality.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(73);
    }

    private static final BadgeQuality[] VALUES = values();

    public static BadgeQuality valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private BadgeQuality(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:BadgeQuality)
  }

  /**
   * Protobuf enum {@code SupportCalendarAction}
   *
   * <pre>
   * 收費簽到動作
   * </pre>
   */
  public enum SupportCalendarAction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SYNC = 0;</code>
     *
     * <pre>
     *同步
     * </pre>
     */
    SYNC(0, 0),
    /**
     * <code>BUY = 1;</code>
     *
     * <pre>
     *購買活動
     * </pre>
     */
    BUY(1, 1),
    /**
     * <code>SIGN = 2;</code>
     *
     * <pre>
     * 签到领奖
     * </pre>
     */
    SIGN(2, 2),
    ;

    /**
     * <code>SYNC = 0;</code>
     *
     * <pre>
     *同步
     * </pre>
     */
    public static final int SYNC_VALUE = 0;
    /**
     * <code>BUY = 1;</code>
     *
     * <pre>
     *購買活動
     * </pre>
     */
    public static final int BUY_VALUE = 1;
    /**
     * <code>SIGN = 2;</code>
     *
     * <pre>
     * 签到领奖
     * </pre>
     */
    public static final int SIGN_VALUE = 2;


    public final int getNumber() { return value; }

    public static SupportCalendarAction valueOf(int value) {
      switch (value) {
        case 0: return SYNC;
        case 1: return BUY;
        case 2: return SIGN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SupportCalendarAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SupportCalendarAction>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SupportCalendarAction>() {
            public SupportCalendarAction findValueByNumber(int number) {
              return SupportCalendarAction.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(74);
    }

    private static final SupportCalendarAction[] VALUES = values();

    public static SupportCalendarAction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SupportCalendarAction(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SupportCalendarAction)
  }

  /**
   * Protobuf enum {@code SupportCalendarType}
   *
   * <pre>
   * 收費簽到類別
   * </pre>
   */
  public enum SupportCalendarType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Normal = 1;</code>
     *
     * <pre>
     *普通
     * </pre>
     */
    Normal(0, 1),
    /**
     * <code>Premium = 2;</code>
     *
     * <pre>
     *優良
     * </pre>
     */
    Premium(1, 2),
    ;

    /**
     * <code>Normal = 1;</code>
     *
     * <pre>
     *普通
     * </pre>
     */
    public static final int Normal_VALUE = 1;
    /**
     * <code>Premium = 2;</code>
     *
     * <pre>
     *優良
     * </pre>
     */
    public static final int Premium_VALUE = 2;


    public final int getNumber() { return value; }

    public static SupportCalendarType valueOf(int value) {
      switch (value) {
        case 1: return Normal;
        case 2: return Premium;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SupportCalendarType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SupportCalendarType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SupportCalendarType>() {
            public SupportCalendarType findValueByNumber(int number) {
              return SupportCalendarType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(75);
    }

    private static final SupportCalendarType[] VALUES = values();

    public static SupportCalendarType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SupportCalendarType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SupportCalendarType)
  }

  /**
   * Protobuf enum {@code FunctionType}
   *
   * <pre>
   * 功能定義類別
   * </pre>
   */
  public enum FunctionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Wish_Unlock = 1;</code>
     *
     * <pre>
     *占星(WishingWell147)
     * </pre>
     */
    Wish_Unlock(0, 1),
    /**
     * <code>SecretMessage_Unlock = 2;</code>
     *
     * <pre>
     *秘密信條(SecretMessage)
     * </pre>
     */
    SecretMessage_Unlock(1, 2),
    /**
     * <code>quest_Unlock = 3;</code>
     *
     * <pre>
     *任務(quest)
     * </pre>
     */
    quest_Unlock(2, 3),
    /**
     * <code>workshop_Unlock = 4;</code>
     *
     * <pre>
     *工坊(指裝備再造的入口按紐)
     * </pre>
     */
    workshop_Unlock(3, 4),
    /**
     * <code>guild_Unlock = 5;</code>
     *
     * <pre>
     *公會()
     * </pre>
     */
    guild_Unlock(4, 5),
    /**
     * <code>sprite_Unlock = 6;</code>
     *
     * <pre>
     *精靈()
     * </pre>
     */
    sprite_Unlock(5, 6),
    /**
     * <code>shop_Unlock = 7;</code>
     *
     * <pre>
     *商店(指商店的入口按紐，同dailyShop)
     * </pre>
     */
    shop_Unlock(6, 7),
    /**
     * <code>mercenary_Unlock = 8;</code>
     *
     * <pre>
     *派遣(mercenaryExpedition)
     * </pre>
     */
    mercenary_Unlock(7, 8),
    /**
     * <code>LeaderSoul_Unlock = 101;</code>
     *
     * <pre>
     *聖所(LeaderSoul)
     * </pre>
     */
    LeaderSoul_Unlock(8, 101),
    /**
     * <code>PVPARENA_Unlock = 102;</code>
     *
     * <pre>
     *競技場(指競技場的入口按紐)
     * </pre>
     */
    PVPARENA_Unlock(9, 102),
    /**
     * <code>multiMap_Unlock = 103;</code>
     *
     * <pre>
     *地下城(multiMap)
     * </pre>
     */
    multiMap_Unlock(10, 103),
    /**
     * <code>Mile_Unlock = 104;</code>
     *
     * <pre>
     *金礦()
     * </pre>
     */
    Mile_Unlock(11, 104),
    /**
     * <code>dungeon_Unlock = 105;</code>
     *
     * <pre>
     *屬性迴廊(dungeon)
     * </pre>
     */
    dungeon_Unlock(12, 105),
    /**
     * <code>worldBoss_Unlock = 106;</code>
     *
     * <pre>
     *世界BOSS(worldBoss)
     * </pre>
     */
    worldBoss_Unlock(13, 106),
    /**
     * <code>tower_Unlock = 107;</code>
     *
     * <pre>
     *塔樓(pvepatabasic)
     * </pre>
     */
    tower_Unlock(14, 107),
    /**
     * <code>free1500_Unlock = 201;</code>
     *
     * <pre>
     *免費1500抽(FreeSummon167)
     * </pre>
     */
    free1500_Unlock(15, 201),
    /**
     * <code>skinshop_Unlock = 202;</code>
     *
     * <pre>
     *皮膚商店(SkinShop)
     * </pre>
     */
    skinshop_Unlock(16, 202),
    /**
     * <code>Newbie_Unlock = 203;</code>
     *
     * <pre>
     *新手七日祭任務
     * </pre>
     */
    Newbie_Unlock(17, 203),
    /**
     * <code>levelquest_Unlock = 204;</code>
     *
     * <pre>
     *等級成就任務
     * </pre>
     */
    levelquest_Unlock(18, 204),
    /**
     * <code>powerlevel_Unlock = 205;</code>
     *
     * <pre>
     *戰力任務
     * </pre>
     */
    powerlevel_Unlock(19, 205),
    /**
     * <code>badge_Unlock = 301;</code>
     *
     * <pre>
     *符文合成(badge)
     * </pre>
     */
    badge_Unlock(20, 301),
    /**
     * <code>dailyShop_Unlock = 401;</code>
     *
     * <pre>
     *每日商店(dailyShop)
     * </pre>
     */
    dailyShop_Unlock(21, 401),
    /**
     * <code>arenaShop_Unlock = 402;</code>
     *
     * <pre>
     *競技商店(arenaShop)
     * </pre>
     */
    arenaShop_Unlock(22, 402),
    /**
     * <code>mysteryShop_Unlock = 403;</code>
     *
     * <pre>
     *神秘商店(mysteryShop)
     * </pre>
     */
    mysteryShop_Unlock(23, 403),
    /**
     * <code>raceShop_Unlock = 404;</code>
     *
     * <pre>
     *種族商店(raceShop)
     * </pre>
     */
    raceShop_Unlock(24, 404),
    /**
     * <code>godseaShop_Unlock = 405;</code>
     *
     * <pre>
     *神海商店(godseaShop)
     * </pre>
     */
    godseaShop_Unlock(25, 405),
    /**
     * <code>racegacha_Unlock = 501;</code>
     *
     * <pre>
     *屬性召喚(releaseURDrop158)
     * </pre>
     */
    racegacha_Unlock(26, 501),
    /**
     * <code>gacha_Unlock = 601;</code>
     *
     * <pre>
     *召喚入口(activity_146)
     * </pre>
     */
    gacha_Unlock(27, 601),
    /**
     * <code>chat_Unlock = 701;</code>
     *
     * <pre>
     *聊天發話()
     * </pre>
     */
    chat_Unlock(28, 701),
    /**
     * <code>mainequip_Unlock = 801;</code>
     *
     * <pre>
     *裝備專武()
     * </pre>
     */
    mainequip_Unlock(29, 801),
    /**
     * <code>rune01_Unlock = 802;</code>
     *
     * <pre>
     *裝備符文1()
     * </pre>
     */
    rune01_Unlock(30, 802),
    /**
     * <code>rune02_Unlock = 803;</code>
     *
     * <pre>
     *裝備符文2()
     * </pre>
     */
    rune02_Unlock(31, 803),
    /**
     * <code>rune03_Unlock = 804;</code>
     *
     * <pre>
     *裝備符文3()
     * </pre>
     */
    rune03_Unlock(32, 804),
    /**
     * <code>rune04_Unlock = 805;</code>
     *
     * <pre>
     *裝備符文4()
     * </pre>
     */
    rune04_Unlock(33, 805),
    /**
     * <code>speedpve_Unlock = 901;</code>
     *
     * <pre>
     *快速戰鬥()
     * </pre>
     */
    speedpve_Unlock(34, 901),
    ;

    /**
     * <code>Wish_Unlock = 1;</code>
     *
     * <pre>
     *占星(WishingWell147)
     * </pre>
     */
    public static final int Wish_Unlock_VALUE = 1;
    /**
     * <code>SecretMessage_Unlock = 2;</code>
     *
     * <pre>
     *秘密信條(SecretMessage)
     * </pre>
     */
    public static final int SecretMessage_Unlock_VALUE = 2;
    /**
     * <code>quest_Unlock = 3;</code>
     *
     * <pre>
     *任務(quest)
     * </pre>
     */
    public static final int quest_Unlock_VALUE = 3;
    /**
     * <code>workshop_Unlock = 4;</code>
     *
     * <pre>
     *工坊(指裝備再造的入口按紐)
     * </pre>
     */
    public static final int workshop_Unlock_VALUE = 4;
    /**
     * <code>guild_Unlock = 5;</code>
     *
     * <pre>
     *公會()
     * </pre>
     */
    public static final int guild_Unlock_VALUE = 5;
    /**
     * <code>sprite_Unlock = 6;</code>
     *
     * <pre>
     *精靈()
     * </pre>
     */
    public static final int sprite_Unlock_VALUE = 6;
    /**
     * <code>shop_Unlock = 7;</code>
     *
     * <pre>
     *商店(指商店的入口按紐，同dailyShop)
     * </pre>
     */
    public static final int shop_Unlock_VALUE = 7;
    /**
     * <code>mercenary_Unlock = 8;</code>
     *
     * <pre>
     *派遣(mercenaryExpedition)
     * </pre>
     */
    public static final int mercenary_Unlock_VALUE = 8;
    /**
     * <code>LeaderSoul_Unlock = 101;</code>
     *
     * <pre>
     *聖所(LeaderSoul)
     * </pre>
     */
    public static final int LeaderSoul_Unlock_VALUE = 101;
    /**
     * <code>PVPARENA_Unlock = 102;</code>
     *
     * <pre>
     *競技場(指競技場的入口按紐)
     * </pre>
     */
    public static final int PVPARENA_Unlock_VALUE = 102;
    /**
     * <code>multiMap_Unlock = 103;</code>
     *
     * <pre>
     *地下城(multiMap)
     * </pre>
     */
    public static final int multiMap_Unlock_VALUE = 103;
    /**
     * <code>Mile_Unlock = 104;</code>
     *
     * <pre>
     *金礦()
     * </pre>
     */
    public static final int Mile_Unlock_VALUE = 104;
    /**
     * <code>dungeon_Unlock = 105;</code>
     *
     * <pre>
     *屬性迴廊(dungeon)
     * </pre>
     */
    public static final int dungeon_Unlock_VALUE = 105;
    /**
     * <code>worldBoss_Unlock = 106;</code>
     *
     * <pre>
     *世界BOSS(worldBoss)
     * </pre>
     */
    public static final int worldBoss_Unlock_VALUE = 106;
    /**
     * <code>tower_Unlock = 107;</code>
     *
     * <pre>
     *塔樓(pvepatabasic)
     * </pre>
     */
    public static final int tower_Unlock_VALUE = 107;
    /**
     * <code>free1500_Unlock = 201;</code>
     *
     * <pre>
     *免費1500抽(FreeSummon167)
     * </pre>
     */
    public static final int free1500_Unlock_VALUE = 201;
    /**
     * <code>skinshop_Unlock = 202;</code>
     *
     * <pre>
     *皮膚商店(SkinShop)
     * </pre>
     */
    public static final int skinshop_Unlock_VALUE = 202;
    /**
     * <code>Newbie_Unlock = 203;</code>
     *
     * <pre>
     *新手七日祭任務
     * </pre>
     */
    public static final int Newbie_Unlock_VALUE = 203;
    /**
     * <code>levelquest_Unlock = 204;</code>
     *
     * <pre>
     *等級成就任務
     * </pre>
     */
    public static final int levelquest_Unlock_VALUE = 204;
    /**
     * <code>powerlevel_Unlock = 205;</code>
     *
     * <pre>
     *戰力任務
     * </pre>
     */
    public static final int powerlevel_Unlock_VALUE = 205;
    /**
     * <code>badge_Unlock = 301;</code>
     *
     * <pre>
     *符文合成(badge)
     * </pre>
     */
    public static final int badge_Unlock_VALUE = 301;
    /**
     * <code>dailyShop_Unlock = 401;</code>
     *
     * <pre>
     *每日商店(dailyShop)
     * </pre>
     */
    public static final int dailyShop_Unlock_VALUE = 401;
    /**
     * <code>arenaShop_Unlock = 402;</code>
     *
     * <pre>
     *競技商店(arenaShop)
     * </pre>
     */
    public static final int arenaShop_Unlock_VALUE = 402;
    /**
     * <code>mysteryShop_Unlock = 403;</code>
     *
     * <pre>
     *神秘商店(mysteryShop)
     * </pre>
     */
    public static final int mysteryShop_Unlock_VALUE = 403;
    /**
     * <code>raceShop_Unlock = 404;</code>
     *
     * <pre>
     *種族商店(raceShop)
     * </pre>
     */
    public static final int raceShop_Unlock_VALUE = 404;
    /**
     * <code>godseaShop_Unlock = 405;</code>
     *
     * <pre>
     *神海商店(godseaShop)
     * </pre>
     */
    public static final int godseaShop_Unlock_VALUE = 405;
    /**
     * <code>racegacha_Unlock = 501;</code>
     *
     * <pre>
     *屬性召喚(releaseURDrop158)
     * </pre>
     */
    public static final int racegacha_Unlock_VALUE = 501;
    /**
     * <code>gacha_Unlock = 601;</code>
     *
     * <pre>
     *召喚入口(activity_146)
     * </pre>
     */
    public static final int gacha_Unlock_VALUE = 601;
    /**
     * <code>chat_Unlock = 701;</code>
     *
     * <pre>
     *聊天發話()
     * </pre>
     */
    public static final int chat_Unlock_VALUE = 701;
    /**
     * <code>mainequip_Unlock = 801;</code>
     *
     * <pre>
     *裝備專武()
     * </pre>
     */
    public static final int mainequip_Unlock_VALUE = 801;
    /**
     * <code>rune01_Unlock = 802;</code>
     *
     * <pre>
     *裝備符文1()
     * </pre>
     */
    public static final int rune01_Unlock_VALUE = 802;
    /**
     * <code>rune02_Unlock = 803;</code>
     *
     * <pre>
     *裝備符文2()
     * </pre>
     */
    public static final int rune02_Unlock_VALUE = 803;
    /**
     * <code>rune03_Unlock = 804;</code>
     *
     * <pre>
     *裝備符文3()
     * </pre>
     */
    public static final int rune03_Unlock_VALUE = 804;
    /**
     * <code>rune04_Unlock = 805;</code>
     *
     * <pre>
     *裝備符文4()
     * </pre>
     */
    public static final int rune04_Unlock_VALUE = 805;
    /**
     * <code>speedpve_Unlock = 901;</code>
     *
     * <pre>
     *快速戰鬥()
     * </pre>
     */
    public static final int speedpve_Unlock_VALUE = 901;


    public final int getNumber() { return value; }

    public static FunctionType valueOf(int value) {
      switch (value) {
        case 1: return Wish_Unlock;
        case 2: return SecretMessage_Unlock;
        case 3: return quest_Unlock;
        case 4: return workshop_Unlock;
        case 5: return guild_Unlock;
        case 6: return sprite_Unlock;
        case 7: return shop_Unlock;
        case 8: return mercenary_Unlock;
        case 101: return LeaderSoul_Unlock;
        case 102: return PVPARENA_Unlock;
        case 103: return multiMap_Unlock;
        case 104: return Mile_Unlock;
        case 105: return dungeon_Unlock;
        case 106: return worldBoss_Unlock;
        case 107: return tower_Unlock;
        case 201: return free1500_Unlock;
        case 202: return skinshop_Unlock;
        case 203: return Newbie_Unlock;
        case 204: return levelquest_Unlock;
        case 205: return powerlevel_Unlock;
        case 301: return badge_Unlock;
        case 401: return dailyShop_Unlock;
        case 402: return arenaShop_Unlock;
        case 403: return mysteryShop_Unlock;
        case 404: return raceShop_Unlock;
        case 405: return godseaShop_Unlock;
        case 501: return racegacha_Unlock;
        case 601: return gacha_Unlock;
        case 701: return chat_Unlock;
        case 801: return mainequip_Unlock;
        case 802: return rune01_Unlock;
        case 803: return rune02_Unlock;
        case 804: return rune03_Unlock;
        case 805: return rune04_Unlock;
        case 901: return speedpve_Unlock;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FunctionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FunctionType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FunctionType>() {
            public FunctionType findValueByNumber(int number) {
              return FunctionType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.guaji.game.protocol.Const.getDescriptor().getEnumTypes().get(76);
    }

    private static final FunctionType[] VALUES = values();

    public static FunctionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private FunctionType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:FunctionType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013Const.proto*s\n\010itemType\022\017\n\013PLAYER_ATTR" +
      "\020\001\022\010\n\004SKIN\020\002\022\010\n\004TOOL\020\003\022\t\n\005EQUIP\020\004\022\t\n\005SKI" +
      "LL\020\005\022\013\n\007ELEMENT\020\006\022\010\n\004SOUL\020\007\022\n\n\006AVATAR\020\010\022" +
      "\t\n\005BADGE\020\t*\341\003\n\nplayerAttr\022\t\n\004GOLD\020\351\007\022\t\n\004" +
      "COIN\020\352\007\022\n\n\005LEVEL\020\353\007\022\010\n\003EXP\020\354\007\022\r\n\010VIPLEVE" +
      "L\020\355\007\022\020\n\013SMELT_VALUE\020\356\007\022\021\n\014CONTRIBUTION\020\357" +
      "\007\022\021\n\014ALLIANCE_EXP\020\360\007\022\017\n\nBOSS_TIMES\020\361\007\022\020\n" +
      "\013HONOR_VALUE\020\362\007\022\025\n\020REPUTATION_VALUE\020\363\007\022\024" +
      "\n\017ELITE_MAP_TIMES\020\364\007\022\026\n\021MULTI_ELITE_SCOR" +
      "E\020\365\007\022\016\n\tGOLD_BEAN\020\366\007\022\017\n\nCROSS_COIN\020\367\007\022\026\n",
      "\021MULTI_ELITE_TIMES\020\370\007\022\022\n\rCRYSTAL_VALUE\020\374" +
      "\007\022\026\n\021ALLIANCE_VITALITY\020\321\017\022\024\n\017FASTFIGHT_T" +
      "IMES\020\217N\022\016\n\tROLE_SOUL\020\375\007\022\023\n\016BIG_MEDICALKI" +
      "T\020\376\007\022\025\n\020MIDLE_MEDICALKIT\020\377\007\022\025\n\020SMALL_MED" +
      "ICALKIT\020\200\010\022\025\n\020FRIENDSHIP_VALUE\020\201\010\022\023\n\016VIP" +
      "POINT_VALUE\020\202\010*Q\n\010roleType\022\r\n\tMAIN_ROLE\020" +
      "\001\022\r\n\tMERCENARY\020\002\022\013\n\007MONSTER\020\003\022\013\n\007RETINUE" +
      "\020\004\022\r\n\tWORLDBOSS\020\005*\261\001\n\010chatType\022\016\n\nCHAT_W" +
      "ORLD\020\000\022\021\n\rCHAT_ALLIANCE\020\001\022\022\n\016CHAT_BROADC" +
      "AST\020\002\022\023\n\017WORLD_BROADCAST\020\003\022\021\n\rCHAT_PERSO",
      "NAL\020\004\022\030\n\024CHAT_ALLIANCE_SYSTEM\020\005\022\030\n\024CHAT_" +
      "PERSONAL_SYSTEM\020\006\022\022\n\016CHAT_CROSS_PVP\020\007*\354\005" +
      "\n\010toolType\022\n\n\006NORMAL\020\000\022\014\n\010FRAGMENT\020\001\022\007\n\003" +
      "GEM\020\002\022\n\n\006HAMMER\020\003\022\014\n\010TREASURE\020\004\022\007\n\003KEY\020\005" +
      "\022\t\n\005ELITE\020\006\022\010\n\004GIFT\020\007\022\017\n\013GEM_PACKAGE\020\010\022\031" +
      "\n\025WORDS_EXCHANGE_NORMAL\020\t\022\032\n\026WORDS_EXCHA" +
      "NGE_SPECIAL\020\n\022\030\n\024BOSS_CHALLENGE_TIMES\020\013\022" +
      "\021\n\rLUCK_TREASURE\020\014\022\016\n\nSOUL_STONE\020\r\022\022\n\016EL" +
      "ITE_MAP_BOOK\020\016\022\032\n\026ALLOANCE_VITALITY_PILL" +
      "\020\017\022\022\n\016GOODS_COMPOUND\020\020\022\024\n\020COMMON_GODLY_E",
      "XP\020\021\022\030\n\024REPUTATION_GODLY_EXP\020\022\022\021\n\rSUIT_F" +
      "RAGMENT\020\023\022\022\n\016EQUIP_EXCHANGE\020\024\022\024\n\020ELEMENT" +
      "_EXCHANGE\020\025\022\016\n\nHERO_TOKEN\020\026\022\013\n\007FEATHER\020\027" +
      "\022\024\n\020ELEMENT_FRAGMENT\020\030\022\032\n\026EXPEDITION_ARM" +
      "ORY_ITEM\020\031\022\027\n\023HOUR_PLACENENT_CARD\020\032\022\014\n\010E" +
      "XP_REEL\020\033\022\024\n\020TREASURE_SELITEM\020\034\022\016\n\nGEM_V" +
      "OLUME\020#\022\020\n\014SUIT_DRAWING\020$\022\017\n\013AVATAR_GIFT" +
      "\020%\022\036\n\032MULTIELITE_CHALLENGE_TIMES\020&\022\016\n\nQU" +
      "ICK_GOLD\020\'\022\r\n\tQUICK_EXP\020(\022\017\n\013QUICK_STONE" +
      "\020)\022\016\n\nFAKE_ITEMS\020c\022\026\n\022RECYCLE_SEVEN_ITEM",
      "\020d\022\030\n\024FASTFIGHT_TIMES_BOOK\020e*\204\001\n\tequipPa" +
      "rt\022\n\n\006HELMET\020\001\022\010\n\004RING\020\002\022\010\n\004BELT\020\003\022\013\n\007CU" +
      "IRASS\020\004\022\013\n\007WEAPON1\020\005\022\013\n\007WEAPON2\020\006\022\014\n\010LEG" +
      "GUARD\020\007\022\t\n\005SHOES\020\010\022\t\n\005GLOVE\020\t\022\014\n\010NECKLAC" +
      "E\020\n*O\n\014equipQuality\022\t\n\005WHITE\020\001\022\t\n\005GREEN\020" +
      "\002\022\010\n\004BLUE\020\003\022\n\n\006PURPLE\020\004\022\n\n\006ORANGE\020\005\022\007\n\003R" +
      "ED\020\006*|\n\requipAutoSell\022\023\n\017AUTO_SELL_WHITE" +
      "\020\001\022\023\n\017AUTO_SELL_GREEN\020\002\022\022\n\016AUTO_SELL_BLU" +
      "E\020\004\022\024\n\020AUTO_SELL_PURPLE\020\010\022\027\n\023AUTO_SELL_D" +
      "IFF_PROF\020\020*\201\001\n\016elementQuality\022\021\n\rELEMENT",
      "_WHITE\020\001\022\021\n\rELEMENT_GREEN\020\002\022\020\n\014ELEMENT_B" +
      "LUE\020\003\022\022\n\016ELEMENT_PURPLE\020\004\022\022\n\016ELEMENT_ORA" +
      "NGE\020\005\022\017\n\013ELEMENT_RED\020\006*\246\001\n\017elementAutoSe" +
      "ll\022\033\n\027AUTO_SELL_ELEMENT_WHITE\020\001\022\033\n\027AUTO_" +
      "SELL_ELEMENT_GREEN\020\002\022\032\n\026AUTO_SELL_ELEMEN" +
      "T_BLUE\020\004\022\034\n\030AUTO_SELL_ELEMENT_PURPLE\020\010\022\037" +
      "\n\033AUTO_SELL_ELEMENT_DIFF_PROF\020\020*\306\001\n\004prof" +
      "\022\013\n\007WARRIOR\020\n\022\014\n\010MAGICIAN\020\024\022\013\n\007ACOLYTE\020\036" +
      "\022\t\n\005THIEF\020(\022\n\n\006ARCHER\0202\022\025\n\021MERCENARY_WAR" +
      "RIOR\020\001\022\024\n\020MERCENARY_HUNTER\020\002\022\023\n\017MERCENAR",
      "Y_MAGIC\020\003\022\024\n\017MONSTER_WARRIOR\020\321\017\022\023\n\016MONST" +
      "ER_HUNTER\020\322\017\022\022\n\rMONSTER_MAGIC\020\323\017*[\n\010attr" +
      "Cond\022\031\n\025ALL_EQUIP_INTENSIFY_1\020\001\022\031\n\025ALL_E" +
      "QUIP_INTENSIFY_2\020\002\022\031\n\025ALL_EQUIP_INTENSIF" +
      "Y_3\020\003*F\n\016equipAttrGrade\022\020\n\014PRIMARY_ATTR\020" +
      "\001\022\022\n\016SECONDARY_ATTR\020\002\022\016\n\nGODLY_ATTR\020\003*\376\007" +
      "\n\004attr\022\014\n\010STRENGHT\020\001\022\013\n\007AGILITY\020\002\022\r\n\tINT" +
      "ELLECT\020\003\022\013\n\007STAMINA\020\004\022\006\n\002HP\020e\022\006\n\002MP\020f\022\n\n" +
      "\006MINDMG\020g\022\n\n\006MAXDMG\020h\022\t\n\005ARMOR\020i\022\n\n\006PHYD" +
      "EF\020j\022\n\n\006MAGDEF\020k\022\014\n\010CRITICAL\020l\022\007\n\003HIT\020m\022",
      "\t\n\005DODGE\020n\022\016\n\nRESILIENCE\020o\022\r\n\tRECOVERMP\020" +
      "p\022\017\n\013ATTACK_attr\020q\022\016\n\nMAGIC_attr\020r\022\023\n\016BU" +
      "FF_COIN_DROP\020\351\007\022\022\n\rBUFF_EXP_DROP\020\352\007\022\024\n\017B" +
      "UFF_EQUIP_DROP\020\353\007\022\020\n\013BUFF_MAX_HP\020\354\007\022\027\n\022B" +
      "UFF_AVOID_CONTROL\020\355\007\022\030\n\023BUFF_REVERSE_DAM" +
      "AGE\020\356\007\022\025\n\020BUFF_AVOID_ARMOR\020\357\007\022\024\n\017BUFF_SU" +
      "CK_BLOOD\020\360\007\022\026\n\021BUFF_RETURN_BLOOD\020\361\007\022\031\n\024B" +
      "UFF_CRITICAL_DAMAGE\020\362\007\022\024\n\017BUFF_PHYDEF_AD" +
      "D\020\321\017\022\024\n\017BUFF_MAGDEF_ADD\020\322\017\022\032\n\025BUFF_PHYDE" +
      "F_PENETRATE\020\267\020\022\032\n\025BUFF_MAGDEF_PENETRATE\020",
      "\270\020\022\026\n\021BUFF_CRITICAL_ADD\020\325\017\022\030\n\023BUFF_RESIL" +
      "IENCE_ADD\020\326\017\022\023\n\016BUFF_DODGE_ADD\020\327\017\022\023\n\016BUF" +
      "F_ARMOR_ADD\020\330\017\022\032\n\025BUFF_SKILL_DAMAGE_ADD\020" +
      "\331\017\022\021\n\014BUFF_HIT_ADD\020\332\017\022\021\n\014BUFF_WARRIOR\020\271\027" +
      "\022\020\n\013BUFF_HUNTER\020\272\027\022\016\n\tBUFF_MAGE\020\273\027\022\017\n\nIC" +
      "E_ATTACK\020\241\037\022\020\n\013ICE_DEFENCE\020\242\037\022\020\n\013FIRE_AT" +
      "TACK\020\243\037\022\021\n\014FIRE_DEFENCE\020\244\037\022\023\n\016THUNDER_AT" +
      "TACK\020\245\037\022\025\n\020THUNDER_DENFENCE\020\246\037\022\025\n\020ICE_AT" +
      "TACK_RATIO\020\247\037\022\026\n\021ICE_DEFENCE_RATIO\020\250\037\022\026\n" +
      "\021FIRE_ATTACK_RATIO\020\251\037\022\027\n\022FIRE_DEFENCE_RA",
      "TIO\020\252\037\022\031\n\024THUNDER_ATTACK_RATIO\020\253\037\022\033\n\026THU" +
      "NDER_DENFENCE_RATIO\020\254\037*\346\004\n\004Buff\022\r\n\tDIZZI" +
      "NESS\020\001\022\t\n\005FROST\020\002\022\013\n\007SILENCE\020\003\022\t\n\005BLIND\020" +
      "\004\022\t\n\005GUARD\020\005\022\013\n\007INSPIRE\020\006\022\014\n\010WEAKNESS\020\007\022" +
      "\010\n\004RAGE\020\010\022\n\n\006POISON\020\t\022\n\n\006ARMOUR\020\n\022\010\n\004BUR" +
      "N\020\013\022\017\n\013BEEN_FROZEN\020\014\022\t\n\005BLEED\020\r\022\020\n\014MAGIC" +
      "_ATTACK\020\016\022\020\n\014ADDITION_DMG\020\017\022\014\n\010CLOAKING\020" +
      "\020\022\020\n\014MAGIC_SHIELD\020\021\022\021\n\rSUPPLY_ENERGY\020\022\022\t" +
      "\n\005SNEER\020\023\022\014\n\010RECKLESS\020\024\022\010\n\004MARK\020\025\022\016\n\nSPE" +
      "LL_WARD\020\026\022\013\n\007BARRIER\020\027\022\010\n\004MISS\020\030\022\016\n\nHEMO",
      "RRHAGE\020\031\022\016\n\nDIS_ATTACK\020\032\022\017\n\013DIS_DEFENCE\020" +
      "\033\022\017\n\013SUPER_ARMOR\020\034\022\017\n\013IRON_ARMOUR\020\035\022\n\n\006F" +
      "RENZY\020\036\022\r\n\tWINDBREAK\020\037\022\017\n\013SHADOWARMOR\020 \022" +
      "\r\n\tSHREDDING\020!\022\r\n\tINTERVENE\020\"\022\020\n\014SHADOWA" +
      "RMOR2\020#\022\021\n\rFREEFROMDEATH\020$\022\014\n\010POWERFUL\020&" +
      "\022\t\n\005SCARE\020\'\022\017\n\013RAGE_DAMAGE\020d\022\020\n\014WARRIOR_" +
      "BUFF\020e\022\017\n\013HUNTER_BUFF\020f\022\016\n\nMAGIC_BUFF\020g*" +
      "\374\002\n\nchangeType\022\017\n\013CHANGE_NONE\020\000\022\017\n\013CHANG" +
      "E_GOLD\020\001\022\017\n\013CHANGE_COIN\020\002\022\016\n\nCHANGE_EXP\020" +
      "\003\022\020\n\014CHANGE_LEVEL\020\004\022\023\n\017CHANGE_RECHARGE\020\005",
      "\022\023\n\017CHANGE_VIPLEVEL\020\006\022\017\n\013CHANGE_ROLE\020\007\022\020" +
      "\n\014CHANGE_TOOLS\020\010\022\020\n\014CHANGE_EQUIP\020\t\022\026\n\022CH" +
      "ANGE_SMELT_VALUE\020\n\022\027\n\023CHANGE_CONTRIBUTIO" +
      "N\020\013\022\026\n\022CHANGE_HONOR_VALUE\020\014\022\033\n\027CHANGE_RE" +
      "PUTATION_VALUE\020\r\022\022\n\016CHANGE_ELEMENT\020\016\022\025\n\021" +
      "CHANGE_CROSS_COIN\020\017\022\025\n\021CHANGE_FRIENDSHIP" +
      "\020\020\022\022\n\016CHANGE_CRYSTAL\020\024*.\n\014buyMoneyType\022\016" +
      "\n\nMONEY_GOLD\020\001\022\016\n\nMONEY_COIN\020\002*8\n\tshootT" +
      "ype\022\013\n\007PRIMARY\020\001\022\020\n\014INTERMEDIATE\020\002\022\014\n\010AD" +
      "VANCED\020\003*/\n\rshootFreeType\022\016\n\nSHOOT_FREE\020",
      "\001\022\016\n\nSHOOT_GOLD\020\002*,\n\020shootRewardState\022\013\n" +
      "\007SHOOT_A\020\001\022\013\n\007SHOOT_B\020\002*G\n\013equipStatus\022\016" +
      "\n\nEQUIP_FREE\020\000\022\023\n\017EQUIP_MAIN_ROLE\020\001\022\023\n\017E" +
      "QUIP_MERCENARY\020\002*/\n\013monsterType\022\013\n\007DOGFA" +
      "CE\020\001\022\010\n\004BOSS\020\002\022\t\n\005ROBOT\020\003*E\n\nRoleStatus\022" +
      "\014\n\010RESTTING\020\000\022\014\n\010FIGHTING\020\001\022\016\n\nEXPEDITIO" +
      "N\020\002\022\013\n\007MIXTASK\020\003*\261\001\n\nNoticeType\022\014\n\010NEW_M" +
      "AIL\020\001\022\013\n\007NEW_MSG\020\002\022\020\n\014GIFT_NEW_MSG\020\003\022\026\n\022" +
      "ALLIANCE_BOSS_OPEN\020\004\022\026\n\022TEAM_BATTLE_SIGN" +
      "UP\020\005\022\024\n\020ARENA_ALL_SIGNUP\020\006\022\031\n\025MULTI_ELIT",
      "E_AVALIABLE\020\007\022\025\n\021ACHIEVEMENT_POINT\020\010*(\n\r" +
      "OpenLevelType\022\027\n\023ALLIANCE_OPEN_LEVEL\020\014*n" +
      "\n\nkickReason\022\023\n\017DUPLICATE_LOGIN\020\001\022\023\n\017SER" +
      "VER_SHUTDOWN\020\002\022\022\n\016LOGIN_FORBIDEN\020\003\022\016\n\nKI" +
      "CKED_OUT\020\004\022\022\n\016SERVER_RESTART\020\005*\310\035\n\nActiv" +
      "ityId\022\016\n\nMONTH_CARD\020S\022\031\n\025ACCUMULATIVE_RE" +
      "CHARGE\020\002\022\025\n\021CONTINUE_RECHARGE\020\003\022\022\n\016RECHA" +
      "RGE_RATIO\020\004\022\n\n\006WECHAT\020\005\022\030\n\024ACCUMULATIVE_" +
      "CONSUME\020\006\022\022\n\016WORDS_EXCHANGE\020\007\022\023\n\017MAP_DRO" +
      "P_REWARD\020\010\022\023\n\017DOUBLE_RECHARGE\020\t\022\024\n\020HOLID",
      "AY_TREASURE\020\n\022\023\n\017BETA_TEST_WORDS\020\013\022\030\n\024CO" +
      "INS_MAP_DROP_RATIO\020\014\022\026\n\022EXP_MAP_DROP_RAT" +
      "IO\020\r\022\026\n\022ARENA_REWARD_RATIO\020\016\022\030\n\024EQUIP_MA" +
      "P_DROP_RATIO\020\017\022\026\n\022QUICK_REWARD_RATIO\020\020\022\025" +
      "\n\021SMELT_VALUE_RATIO\020\021\022\024\n\020EQUIP_SELL_RATI" +
      "O\020\022\022\024\n\020QUICK_COST_RATIO\020\023\022\022\n\016REGISTER_CY" +
      "CLE\020\024\022\023\n\017SINGLE_RECHARGE\020\025\022\023\n\017RECHARGE_R" +
      "EBATE\020\026\022\017\n\013VIP_WELFARE\020\027\022\r\n\tWEEK_CARD\020\030\022" +
      "\025\n\021EXPEDITION_ARMORY\020\031\022\027\n\023TIME_LIMIT_PUR" +
      "CHASE\020\032\022\026\n\022ACCUMULATIVE_LOGIN\020\033\022\024\n\020RECHA",
      "RGE_REBATE2\020\034\022\020\n\014GEM_COMPOUND\020\035\022\022\n\016CRAZY" +
      "_ROULETTE\020\036\022\014\n\010LUCK_BOX\020\037\022\023\n\017STAR_EVALUA" +
      "TION\020 \022\021\n\rFRIEND_INVITE\020!\022\r\n\tTAXI_CODE\020\"" +
      "\022\026\n\022SNOWFIELD_TREASURE\020#\022\023\n\017TREASURE_RAI" +
      "DER\020$\022\026\n\022COMMENDATION_TRIBE\020%\022\013\n\007FORTUNE" +
      "\020&\022\034\n\030SHOP_REFRESH_PRICE_RATIO\020\'\022\021\n\rFIND" +
      "_TREASURE\020(\022\r\n\tGOLD_CLUB\020)\022\025\n\021GRAB_RED_E" +
      "NVELOPE\020*\022\r\n\tCHAT_LUCK\020+\022\r\n\tRANK_GIFT\020,\022" +
      "\020\n\014FOREVER_CARD\020-\022\017\n\013SALE_PACKET\020R\022\r\n\tHO" +
      "UR_CARD\0203\022\022\n\016FIRST_GIFTPACK\020T\022\020\n\014MYSTERY",
      "_SHOP\020Q\022\023\n\017HERO_TOKEN_SHOP\020R\022\022\n\016LIMIT_RE" +
      "CHARGE\020U\022\031\n\025EXCHANGE_DOUBLE_SEVEN\020V\022\017\n\013D" +
      "AILY_QUEST\020W\022\r\n\tGOLD_FISH\020X\022\024\n\020GODEQUIP_" +
      "FORGING\020Y\022\022\n\016SHOOT_ACTIVITY\020Z\022\021\n\rPRINCE_" +
      "DEVILS\020[\022\021\n\rDISCOUNT_GIFT\020^\022\017\n\013VIP_PACKA" +
      "GE\020_\022\021\n\rNEW_WEEK_CARD\020`\022\017\n\013GROWTH_FUND\020a" +
      "\022\023\n\017Lucky_MERCENARY\020b\022\027\n\023NEW_TREASURE_RA" +
      "IDER\020c\022\r\n\tCHAT_SKIN\020d\022\t\n\005HAREM\020e\022\025\n\021FRAG" +
      "MENT_EXCHANGE\020f\022\017\n\013FAIRY_BLESS\020g\022\024\n\020MAID" +
      "EN_ENCOUNTER\020h\022\010\n\004OBON\020i\022\022\n\016WELFARE_REWA",
      "RD\020j\022\n\n\006NEW_UR\020k\022\r\n\tTURNTABLE\020l\022\r\n\tHALLO" +
      "WEEN\020m\022\027\n\023QUICK_BATTLE_DOUBLE\020n\022\016\n\nRELEA" +
      "SE_UR\020o\022\020\n\014FUN_ACTIVITY\020p\022\035\n\031ACCUMULATIV" +
      "E_LOGIN_SIGNED\020q\022\034\n\030ACCUMULATIVE_LOGIN_S" +
      "EVEN\020r\022\n\n\006NEW_ND\020s\022\017\n\013RELEASE_UR2\020t\022\030\n\024N" +
      "EW_TREASURE_RAIDER2\020u\022\033\n\027CONTINUE_RECHAR" +
      "GE_MONEY\020v\022\034\n\030ACCUMULATIVE_CONSUMEITEM\020w" +
      "\022\030\n\024NEW_TREASURE_RAIDER3\020x\022\017\n\013RELEASE_UR" +
      "3\020y\022\024\n\020ACTIVECOMPLIANCE\020z\022\022\n\016ACTIVITY123" +
      "_UR\020{\022\037\n\033ACTIVITY124_RECHARGE_RETURN\020|\022\026",
      "\n\022ACTIVITY125_WEAPON\020}\022\033\n\027WELFAREBYREGDA" +
      "TE_REWARD\020~\022\022\n\016ACTIVITY127_UR\020\177\022\023\n\016ACTIV" +
      "ITY128_UR\020\200\001\022\026\n\021CONSUME_WEEK_CARD\020\201\001\022\027\n\022" +
      "CONSUME_MONTH_CARD\020\202\001\022\031\n\024CONTINUE_RECHAR" +
      "GE131\020\203\001\022\033\n\026ACTIVITY132_LEVEL_GIFT\020\204\001\022\034\n" +
      "\027ACTIVITY133_ONLINE_GIFT\020\205\001\022\035\n\030ACTIVITY1" +
      "34_WEEKEND_GIFT\020\206\001\022\031\n\024NEW_TREASURE_RAIDE" +
      "R4\020\207\001\022\022\n\rEXCHANGE_SHOP\020\210\001\022 \n\033ACTIVITY137" +
      "_RECHARGE_RETURN\020\211\001\022\033\n\026NEW_TREASURE_RAID" +
      "ER139\020\213\001\022\024\n\017RUSSIADISHWHEEL\020\214\001\022\030\n\023ACTIVI",
      "TY141_RICHMAN\020\215\001\022\036\n\031ACTIVITY142_EXCHANGE" +
      "_SHOP\020\216\001\022\027\n\022ACTIVITY143_PIRATE\020\217\001\022\034\n\027ACT" +
      "IVITY144_LITTLE_TEST\020\220\001\022!\n\034ACTIVITY145_T" +
      "ENDAY_CHALLENGE\020\221\001\022\033\n\026ACTIVITY146_CHOSEN" +
      "_ONE\020\222\001\022\035\n\030ACTIVITY147_WISHING_WELL\020\223\001\022\033" +
      "\n\026ACTIVITY148_MARRY_GAME\020\224\001\022\032\n\025ACTIVITY1" +
      "49_THREE_DAY\020\225\001\022\033\n\026ACTIVITY150_LIMIT_GIF" +
      "T\020\226\001\022\033\n\026ACTIVITY151_STAGE_GIFT\020\227\001\022\033\n\026ACT" +
      "IVITY152_DRAMA_GIFT\020\230\001\022\032\n\025ACTIVITY153_RA" +
      "NK_GIFT\020\231\001\022\037\n\032ACTIVITY154_CALL_OF_SPRITE",
      "\020\232\001\022\036\n\031ACTIVITY155_ACHIEVE_LEVEL\020\233\001\022#\n\036A" +
      "CTIVITY156_ACHIEVE_FIGHTVALUE\020\234\001\022\037\n\032ACTI" +
      "VITY157_LOGIN_TEN_DRAW\020\235\001\022\035\n\030ACTIVITY158" +
      "_CALL_OF_RACE\020\236\001\022\032\n\025ACTIVITY159_VIP_POIN" +
      "T\020\237\001\022%\n ACTIVITY160_NP_CONTINUE_RECHARGE" +
      "\020\240\001\022!\n\034ACTIVITY161_SUPPORT_CALENDER\020\241\001\022\032" +
      "\n\025ACTIVITY162_GROWTH_LV\020\242\001\022\032\n\025ACTIVITY16" +
      "3_GROWTH_CH\020\243\001\022\032\n\025ACTIVITY164_GROWTH_TW\020" +
      "\244\001\022\027\n\022ACTIVITY165_MINING\020\245\001\022#\n\036ACTIVITY1" +
      "66_CALL_OF_FRIENDSHIP\020\246\001\022\037\n\032ACTIVITY167_",
      "Consume_Summom\020\247\001\022\035\n\030ACTIVITY168_SubScri" +
      "ption\020\250\001\022\031\n\024ACTIVITY169_JumpGift\020\251\001\022\031\n\024A" +
      "CTIVITY170_JumpGift\020\252\001\022\027\n\022ACTIVITY172_PI" +
      "CKUP\020\254\001\022\030\n\023ACTIVITY173_NEWROLE\020\255\001\022\033\n\026ACT" +
      "IVITY175_Glory_Hole\020\257\001\022\"\n\035ACTIVITY176_Ac" +
      "tivity_Exchange\020\260\001\022\034\n\027ACTIVITY177_Failed" +
      "_Gift\020\261\001\022\036\n\031ACTIVITY178_CALL_OF_EQUIP\020\262\001" +
      "\022\032\n\025ACTIVITY179_Step_Gift\020\263\001\022\034\n\027ACTIVITY" +
      "180_Free_Summom\020\264\001\022\031\n\024ACTIVITY181_JumpGi" +
      "ft\020\265\001\022\031\n\024ACTIVITY182_JumpGift\020\266\001\022\031\n\024ACTI",
      "VITY183_JumpGift\020\267\001\022\031\n\024ACTIVITY184_JumpG" +
      "ift\020\270\001\022\031\n\024ACTIVITY185_JumpGift\020\271\001\022\031\n\024ACT" +
      "IVITY186_JumpGift\020\272\001\022\030\n\023ACTIVITY187_MaxJ" +
      "ump\020\273\001\022\033\n\026ACTIVITY190_StepSummom\020\276\001\022\033\n\026A" +
      "CTIVITY191_CycleStage\020\277\001\022\037\n\032ACTIVITY192_" +
      "RechargeBounce\020\300\001\022\033\n\026ACTIVITY193_SingleB" +
      "oss\020\301\001\022\034\n\027ACTIVITY194_SeasonTower\020\302\001\022\035\n\030" +
      "ACTIVITY195_PuzzleBattle\020\303\001\022!\n\034ACTIVITY1" +
      "96_CycleStage_Part2\020\304\001\022\035\n\030ACTIVITY197_SU" +
      "PER_PICKUP\020\305\001\032\002\020\001*B\n\021FriendChatMsgType\022\r",
      "\n\tLEAVE_MSG\020\000\022\016\n\nSYSTEM_MSG\020\002\022\016\n\nPLAYER_" +
      "MSG\020\003*!\n\nnotifyType\022\023\n\017NOTIFY_RECHARGE\020\001" +
      "*\316\t\n\020dailyRefreshType\022\025\n\021SHOP_ITEM_REFRE" +
      "SH\020\001\022\021\n\rALLIANCE_SIGN\020\002\022\030\n\024EQUIP_CREATE_" +
      "REFRESH\020\003\022\023\n\017ARENA_CHALLENGE\020\004\022\016\n\nFAST_F" +
      "IGHT\020\005\022\016\n\nBOSS_FIGHT\020\006\022\r\n\tELITE_MAP\020\007\022\016\n" +
      "\nSTAR_STONE\020\010\022\023\n\017ROLE_RING_LVLUP\020\t\022\025\n\021FB" +
      "_FRIEND_ASKTICK\020\n\022\035\n\031MYSTERY_SHOP_ITEM_R" +
      "EFRESH\020\013\022\025\n\021VIP_WELFARE_AWARD\020\014\022\027\n\023SHOP_" +
      "ITEM_REFRESH_2\020f\022\027\n\023SHOP_ITEM_REFRESH_3\020",
      "g\022\027\n\023SHOP_ITEM_REFRESH_4\020h\022\035\n\031CRYSTAL_SH" +
      "OP_ITEM_REFRESH\020o\022\037\n\033CRYSTAL_SHOP_ITEM_R" +
      "EFRESH_2\020p\022\037\n\033CRYSTAL_SHOP_ITEM_REFRESH_" +
      "3\020q\022\037\n\033CRYSTAL_SHOP_ITEM_REFRESH_4\020r\022&\n\"" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_1\020s\022&\n\"" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_2\020t\022&\n\"" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_3\020u\022&\n\"" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_4\020v\022&\n\"" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_5\020w\022&\n\"" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_6\020x\022&\n\"",
      "MERCENARY_EXPEDTION_ITEM_REFRESH_7\020y\022&\n\"" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_8\020z\022&\n\"" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_9\020{\022\'\n#" +
      "MERCENARY_EXPEDTION_ITEM_REFRESH_10\020|\022\'\n" +
      "#MERCENARY_EXPEDTION_ITEM_REFRESH_11\020}\022\'" +
      "\n#MERCENARY_EXPEDTION_ITEM_REFRESH_12\020~\022" +
      "#\n\036MULTIELITE_INIT_BATTLE_COUNT_1\020\202\001\022#\n\036" +
      "MULTIELITE_INIT_BATTLE_COUNT_2\020\203\001\022#\n\036MUL" +
      "TIELITE_INIT_BATTLE_COUNT_3\020\204\001\022#\n\036MULTIE" +
      "LITE_INIT_BATTLE_COUNT_4\020\205\001\022!\n\034WORLD_BOS",
      "S_BUFF_FREE_TIMES_1\020\214\001\022!\n\034WORLD_BOSS_BUF" +
      "F_FREE_TIMES_2\020\215\001\022\031\n\024DUNGEON_REERESH_TIM" +
      "E\020\216\001\022\033\n\026GLORYHOLE_REERESH_TIME\020\217\001*=\n\nQue" +
      "stState\022\014\n\010UNACTIVE\020\000\022\007\n\003ING\020\001\022\014\n\010FINISH" +
      "ED\020\002\022\n\n\006REWARD\020\003*\214\001\n\tQuestStep\022\t\n\005FIRST\020" +
      "\001\022\n\n\006SECOND\020\002\022\t\n\005THIRD\020\003\022\n\n\006FOURTH\020\004\022\t\n\005" +
      "FIFTH\020\005\022\t\n\005SIXTH\020\006\022\013\n\007SEVENTH\020\007\022\n\n\006EIGHT" +
      "H\020\010\022\t\n\005NINTH\020\t\022\t\n\005TENTH\020\n\022\014\n\010ELEVENTH\020\013*" +
      "\320\013\n\016QuestEventType\022\r\n\tKILL_BOSS\020\001\022\016\n\nADD" +
      "_FRIEND\020\002\022\021\n\rJOIN_ALLIANCE\020\003\022\016\n\nMODIFY_S",
      "IN\020\004\022\016\n\nMAKE_EQUIP\020\005\022\020\n\014QUICK_BATTLE\020\006\022\017" +
      "\n\013SMELT_EQUIP\020\007\022\017\n\013WORLD_SPEAK\020\010\022\020\n\014AREN" +
      "A_BATTLE\020\t\022\017\n\013HERO_FOSTER\020\n\022\017\n\013ELITE_STA" +
      "TE\020\013\022\017\n\013GU_BAO_SHAN\020\014\022\r\n\tJI_LIU_GU\020\r\022\021\n\r" +
      "MO_HUA_RU_QIN\020\016\022\022\n\016DUO_REN_FU_BEN\020\017\022\025\n\021G" +
      "ONG_HUI_ZHENG_BA\020\020\022\021\n\rGONG_HUI_BOSS\020\021\022\016\n" +
      "\nHERO_LEVEL\020\022\022\r\n\tGEM_LEVEL\020\023\022\027\n\023EQUIP_EN" +
      "HANCE_LEVEL\020\024\022\032\n\026COMMON_GOD_EQUIP_LEVEL\020" +
      "\025\022\032\n\026HOUNOR_GOD_EQUIP_LEVEL\020\026\022\027\n\023SKILL_E" +
      "NHANCE_LEVEL\020\027\022\023\n\017MAIN_ROLE_LEVEL\020\030\022\025\n\021T",
      "OTAL_LOGIN_TIMES\020\031\022\027\n\023EQUIP_ENHANCE_TIME" +
      "S\020\032\022\030\n\024CROSS_MISSION_NUMBER\020\033\022\022\n\016FIGHT_P" +
      "OINT_UP\020\034\022\033\n\027EQUIP_ENHANCE_ALL_LEVEL\020\035\022\025" +
      "\n\021HERO_EXPEND_TIMES\020\036\022\025\n\021HOUNOR_MAKE_TIM" +
      "ES\020\037\022\027\n\023BAPTIZE_EQUIP_TIMES\020 \022\025\n\021SMELT_E" +
      "QUIP_COUNT\020!\022\"\n\036COMMON_GOD_EQUIP_SWALLOW" +
      "_TIMES\020\"\022!\n\035HOUNOR_GOD_EQUIP_WALLOW_TIME" +
      "S\020#\022\034\n\030GOD_EQUIP_COMPOUND_TIMES\020$\022\032\n\026GOD" +
      "_EQUIP_EXTEND_TIMES\020%\022\023\n\017GEM_DRESS_TIMES" +
      "\020&\022\031\n\025COMMON_SHOP_BUY_TIMES\020\'\022\027\n\023SUIT_FR",
      "AGMENT_TIMES\020(\022\030\n\024SUIT_DECOMPOSE_TIMES\020)" +
      "\022\032\n\026EXCHANGE_CRYSTAL_TIMES\020*\022\027\n\023JING_JI_" +
      "CHANG_TIMES\020+\022\020\n\014VIP_LEVEL_UP\020,\022\026\n\022JING_" +
      "JI_CHANG_RANK\020-\022\024\n\020E_MO_RU_QIN_RANK\020.\022\027\n" +
      "\023CROSS_MISSION_TIMES\020/\022\031\n\025TOTAL_GAIN_COI" +
      "N_COUNT\0200\022\016\n\nHERO_COUNT\0201\022%\n!DRESS_COMMO" +
      "N_GOD_EQUIP_STAR_LEVEL\0202\022%\n!DRESS_HOUNOR" +
      "_GOD_EQUIP_STAR_LEVEL\0203\022\026\n\022DRESS_R_SUIT_" +
      "COUNT\0204\022\027\n\023DRESS_SR_SUIT_COUNT\0205\022\030\n\024DRES" +
      "S_SSR_SUIT_COUNT\0206\022\027\n\023DRESS_UR_SUIT_COUN",
      "T\0207\022\025\n\021PURPLE_HERO_COUNT\0208\022\023\n\017GOLD_HERO_" +
      "COUNT\0209\022!\n\035E_MO_RU_QIN_LAST_ATTACK_COUNT" +
      "\020:\022\026\n\022ROLE_UPGRADE_QUEST\020;\022\031\n\025EIGHTEENPR" +
      "INCES_FIRST\020<\022\030\n\024EIGHTEENPRINCES_PASS\020=\022" +
      "\030\n\024NEWBIE_QUEST_FINISHI\020>\022\027\n\023GET_LIGHT_D" +
      "ARK_HERO\020?*Q\n\tQuestType\022\t\n\005COUNT\020\001\022\014\n\010ST" +
      "ATEFUL\020\002\022\023\n\017LESS_THAN_COUNT\020\003\022\026\n\022LESS_TH" +
      "AN_STATEFUL\020\004**\n\013YaYaMsgType\022\014\n\010GET_TYPE" +
      "\020\001\022\r\n\tPUSH_TYPE\020\002*6\n\013ElementType\022\007\n\003ALL\020" +
      "\001\022\007\n\003ICE\020\002\022\010\n\004FIRE\020\003\022\013\n\007THUNDER\020\004*I\n\020Her",
      "oTokenMsgType\022\020\n\014CONSUME_ITEM\020\001\022\014\n\010GET_T" +
      "ASK\020\002\022\025\n\021GEM_COMPOUND_ONCE\020\003*\256\004\n\010RankTyp" +
      "e\022\030\n\024WING_WHITE_TIME_RANK\020\001\022\030\n\024WING_GREE" +
      "N_TIME_RANK\020\002\022\027\n\023WING_BLUE_TIME_RANK\020\003\022\031" +
      "\n\025WING_PURPLE_TIME_RANK\020\004\022\031\n\025WING_ORANGE" +
      "_TIME_RANK\020\005\022\022\n\016LEVEL_ALL_RANK\020\025\022\025\n\021LEVE" +
      "L_PROFJS_RANK\020\026\022\025\n\021LEVEL_PROFGS_RANK\020\027\022\025" +
      "\n\021LEVEL_PROFCS_RANK\020\030\022\030\n\024CUSTOMPASS_BOSS" +
      "_RANK\020\037\022\034\n\030CUSTOMPASS_TRAINING_RANK\020 \022\027\n" +
      "\023ALLIANCE_LEVEL_RANK\020)\022\032\n\026ALLIANCE_VITAL",
      "ITY_RANK\020*\022\032\n\026ALLIANCE_BOSSHARM_RANK\020+\022\022" +
      "\n\016SCORE_ALL_RANK\0203\022\025\n\021SCORE_PROFJS_RANK\020" +
      "4\022\025\n\021SCORE_PROFGS_RANK\0205\022\025\n\021SCORE_PROFCS" +
      "_RANK\0206\022\022\n\016HERO_FIRE_RANK\0207\022\023\n\017HERO_WATE" +
      "R_RANK\0208\022\022\n\016HERO_WIND_RANK\0209\022\023\n\017HERO_LIG" +
      "HT_RANK\020:\022\022\n\016HERO_DARK_RANK\020;*8\n\rWingsCo" +
      "nstant\022\021\n\rMAX_LUCKY_NUM\020d\022\024\n\020WINGS_OPEN_" +
      "LEVEL\020(*+\n\021BattleUseItemType\022\010\n\004NONE\020\000\022\014" +
      "\n\010USE_ITEM\020\001*+\n\nGemShopBuy\022\013\n\007GOLDBUY\020\001\022" +
      "\020\n\014GEMVOLUMEBUY\020\002*E\n\021AllianCheckButton\022\027",
      "\n\023CHECK_BUTTON_TYPE_1\020\000\022\027\n\023CHECK_BUTTON_" +
      "TYPE_2\020\001*2\n\nApplyState\022\021\n\rAPPLY_STATE_1\020" +
      "\001\022\021\n\rAPPLY_STATE_2\020\002*:\n\017AllianOperState\022" +
      "\022\n\016Refused_TYPE_2\020\000\022\023\n\017APPROVAL_TYPE_1\020\001" +
      "*A\n\027ApplyAddAllianceUpEmail\022\022\n\016UPEMAIL_T" +
      "YPE_1\020\001\022\022\n\016UPEMAIL_TYPE_2\020\002*D\n\020AddAllian" +
      "ceState\022\031\n\025INITIATIVE_ADD_TYPE_1\020\001\022\025\n\021MA" +
      "IN_AGREE_TYPE_2\020\002*@\n\021ExitAllianceState\022\025" +
      "\n\021INITIATIVE_TYPE_1\020\001\022\024\n\020MAIN_KICK_TYPE_" +
      "2\020\002*F\n\021AddOrExitAlliance\022\027\n\023ADD_ALLIANCE",
      "_TYPE_1\020\001\022\030\n\024EXIT_ALLIANCE_TYPE_2\020\002*(\n\013I" +
      "osGitState\022\014\n\010HAVE_GET\020\001\022\013\n\007NOT_GET\020\000*\371\001" +
      "\n\010DataType\022\r\n\tCOIN_TYPE\020\001\022\r\n\tGOLD_TYPE\020\002" +
      "\022\017\n\013VALOR_SCORE\020\003\022\021\n\rHISTORY_VALOR\020\004\022\t\n\005" +
      "HONOR\020\005\022\016\n\nREPUTATION\020\006\022\026\n\022CONTRIBUTION_" +
      "VALUE\020\007\022\023\n\017CROSS_COIN_TYPE\020\010\022\016\n\nLUCK_SCO" +
      "RE\020\t\022\021\n\rCAN_BUY_TIMES\020\n\022\022\n\016CRYSTAL_CHANG" +
      "E\020\013\022\014\n\010GEM_TYPE\020\014\022\r\n\tITEM_LEFT\020\r\022\017\n\013LEVE" +
      "L_LIMIT\020\016*\307\002\n\010ShopType\022\021\n\rGOBLIN_MARKET\020" +
      "\001\022\020\n\014COINS_MARKET\020\002\022\023\n\017ALLIANCE_MARKET\020\003",
      "\022\020\n\014ARENA_MARKET\020\004\022\020\n\014VALOR_MARKET\020\005\022\020\n\014" +
      "CROSS_MARKET\020\006\022\020\n\014BLACK_MARKET\020\007\022\022\n\016CRYS" +
      "TAL_MARKET\020\010\022\016\n\nGEM_MARKET\020\t\022\020\n\014DAILY_MA" +
      "RKET\020\n\022\022\n\016MYSTERY_MARKET\020\013\022\020\n\014GUILD_MARK" +
      "ET\020\014\022\021\n\rTEMPLE_MARKET\020\r\022\017\n\013RACE_MARKET\020\016" +
      "\022\021\n\rGODSEA_MARKET\020\017\022\017\n\013SKIN_MARKET\020\020\022\025\n\021" +
      "CYCLESTAGE_MARKET\020\021*4\n\021ShopOperationType" +
      "\022\r\n\tINIT_TYPE\020\001\022\020\n\014REFRESH_TYPE\020\002*H\n\021Rol" +
      "eActiviteState\022\017\n\013IS_ACTIVITE\020\001\022\020\n\014NOT_A" +
      "CTIVITE\020\000\022\020\n\014CAN_ACTIVITE\020\002*W\n\rRoleTrain",
      "Type\022\017\n\013COMMON_TYPE\020\001\022\021\n\rADVANCED_TYPE\020\002" +
      "\022\020\n\014PLATINA_TYPE\020\003\022\020\n\014DIAMOND_TYPE\020\004*B\n\017" +
      "MultiEliteState\022\014\n\010IS_AWAIT\020\001\022\r\n\tIS_SETO" +
      "UT\020\002\022\022\n\016IS_HOUSE_OWNER\020\003*G\n\017AddRoleAttrT" +
      "ype\022\013\n\007ONESELF\020\000\022\031\n\025MAIN_ROLE_AND_ONESEL" +
      "F\020\001\022\014\n\010ALL_ROLE\020\002*G\n\021WorldBossBuffType\022\020" +
      "\n\014ONESELF_TYPE\020\001\022\022\n\016MERCENARY_TYPE\020\002\022\014\n\010" +
      "ALL_TYPE\020\003*\256\001\n\020ActionRecordType\022\022\n\016RED_P" +
      "OINT_INTO\020\001\022\024\n\020MAIN_BANNER_INTO\020\002\022\027\n\023SEL" +
      "_PAGINATION_INTO\020\003\022\035\n\031SEL_LIMIT_PAGINATI",
      "ON_INTO\020\004\022\023\n\017MULTIELITE_INTO\020\005\022\024\n\020MULTIE" +
      "LITE_START\020\006\022\r\n\tGVG_ENTER\020\007*9\n\016ActionMod" +
      "uleId\022\026\n\021MODULE_MULTIELITE\020\220N\022\017\n\nMODULE_" +
      "GVG\020\221N*C\n\017MutliNoticeType\022\016\n\nSTART_TYPE\020" +
      "\001\022\017\n\013SETOUT_TYPE\020\002\022\017\n\013INVITE_TYPE\020\003*\232\001\n\t" +
      "HaremType\022\025\n\021HAREM_TYPE_COMMON\020\001\022\025\n\021HARE" +
      "M_TYPE_MIDDLE\020\002\022\027\n\023HAREM_TYPE_ADVANCED\020\003" +
      "\022\025\n\021HAREM_TYPE_STRICT\020\004\022\031\n\025HAREM_TYPE_NE" +
      "W_STRICT\020\005\022\024\n\020HAREM_TYPE_LIMIT\020\006*Y\n\022Boss" +
      "AutoBattleType\022\025\n\021BOSS_NO_AUTO_TYPE\020\000\022\024\n",
      "\020BOSS_COMMON_TYPE\020\001\022\026\n\022BOSS_ADVANCED_TYP" +
      "E\020\002*i\n\021WorldBossRankType\022\031\n\025BOSS_PERSON_" +
      "RANK_TYPE\020\001\022\034\n\030BOSS_LAST_KILL_RANT_TYPE\020" +
      "\002\022\033\n\027BOSS_ALLIANCE_RANK_TYPE\020\003*T\n\024WorldB" +
      "ossFailingType\022\014\n\010NOT_PART\020\000\022\r\n\tHEAD_TYP" +
      "E\020\001\022\016\n\nCHEST_TYPE\020\002\022\017\n\013HAUNCH_TYPE\020\003*;\n\017" +
      "WorldBossIsFree\022\023\n\017WORLD_BOSS_FREE\020\001\022\023\n\017" +
      "WORLD_BOSS_GOLD\020\002*7\n\020EquipEnhanceType\022\016\n" +
      "\nEQUIP_ONCE\020\001\022\023\n\017EQUIP_TEN_TIMES\020\002*\366\002\n\021S" +
      "evenDayEventType\022\t\n\005LOGIN\020\001\022\014\n\010RECHARGE\020",
      "\002\022\013\n\007LEVELUP\020\003\022\r\n\tCHALLENGE\020\004\022\017\n\013BUYDISC" +
      "OUNT\020\005\022\016\n\nFASTBATTLE\020\006\022\r\n\tATHLETICS\020\007\022\r\n" +
      "\tEQUIPMENT\020\010\022\021\n\rEQUIPSUCCINCT\020\t\022\016\n\nEQUIP" +
      "STRAN\020\n\022\013\n\007AUTOPVE\020\013\022\014\n\010TRAINING\020\014\022\017\n\013DE" +
      "PUTYTRAIN\020\r\022\020\n\014DEPUTYTRAVEL\020\016\022\021\n\rDEPUTYD" +
      "EVELOP\020\017\022\r\n\tDEPUTYNUM\020\021\022\017\n\013MAIDENTRAIN\020\022" +
      "\022\014\n\010PVPARENA\020\023\022\022\n\016MAINROLE_SCORE\020\024\022\017\n\013EQ" +
      "UIP_FORGE\020\025\022\024\n\020TAKE_FIGHT_AWARD\020\026\022\020\n\014PAS" +
      "S_MISSION\020\027*\273\001\n\017TenDayEventType\022\r\n\tTEN_L" +
      "OGIN\020\001\022\022\n\016TEN_FASTBATTLE\020\002\022\017\n\013TEN_AUTOPV",
      "E\020\003\022\021\n\rTEN_EQUIPMENT\020\004\022\020\n\014TEN_PVPARENA\020\005" +
      "\022\024\n\020TEN_DEPUTYTRAVEL\020\006\022\020\n\014TEN_TRAINING\020\007" +
      "\022\022\n\016TEN_ACCCONSUME\020\010\022\023\n\017TEN_DEPUTYTRAIN\020" +
      "\t*4\n\020LoginSignAwdType\022\r\n\tSIGNAWARD\020\001\022\021\n\r" +
      "SIGNOPENCHEST\020\002*L\n\032EighteenPrincesLayerS" +
      "tatus\022\014\n\010NOT_OPEN\020\000\022\022\n\016CAN_CHANLLENGE\020\001\022" +
      "\014\n\010ALL_PASS\020\002*\\\n\035EighteenPrincesMedicalK" +
      "itTYPE\022\021\n\rBIGMEDICALKIT\020\001\022\023\n\017MIDLEMEDICA" +
      "LKIT\020\002\022\023\n\017SMALLMEDICALKIT\020\003*>\n\016BadgeAttr" +
      "Grade\022\026\n\022BADGE_PRIMARY_ATTR\020\001\022\024\n\020BADGE_E",
      "XTRA_ATTR\020\002*z\n\tBadgeType\022\022\n\016POWERFUL_BAD" +
      "GE\020\001\022\021\n\rCOURAGE_BADGE\020\002\022\023\n\017PRECISION_BAD" +
      "GE\020\003\022\020\n\014STRONG_BADGE\020\004\022\016\n\nSOFT_BADGE\020\005\022\017" +
      "\n\013QUICK_BADGE\020\006*b\n\014BadgeQuality\022\017\n\013GREEN" +
      "_BADGE\020\002\022\016\n\nBLUE_BADGE\020\003\022\020\n\014PURPLE_BADGE" +
      "\020\004\022\020\n\014ORANGE_BADGE\020\005\022\r\n\tRED_BADGE\020\006*4\n\025S" +
      "upportCalendarAction\022\010\n\004SYNC\020\000\022\007\n\003BUY\020\001\022" +
      "\010\n\004SIGN\020\002*.\n\023SupportCalendarType\022\n\n\006Norm" +
      "al\020\001\022\013\n\007Premium\020\002*\353\005\n\014FunctionType\022\017\n\013Wi" +
      "sh_Unlock\020\001\022\030\n\024SecretMessage_Unlock\020\002\022\020\n",
      "\014quest_Unlock\020\003\022\023\n\017workshop_Unlock\020\004\022\020\n\014" +
      "guild_Unlock\020\005\022\021\n\rsprite_Unlock\020\006\022\017\n\013sho" +
      "p_Unlock\020\007\022\024\n\020mercenary_Unlock\020\010\022\025\n\021Lead" +
      "erSoul_Unlock\020e\022\023\n\017PVPARENA_Unlock\020f\022\023\n\017" +
      "multiMap_Unlock\020g\022\017\n\013Mile_Unlock\020h\022\022\n\016du" +
      "ngeon_Unlock\020i\022\024\n\020worldBoss_Unlock\020j\022\020\n\014" +
      "tower_Unlock\020k\022\024\n\017free1500_Unlock\020\311\001\022\024\n\017" +
      "skinshop_Unlock\020\312\001\022\022\n\rNewbie_Unlock\020\313\001\022\026" +
      "\n\021levelquest_Unlock\020\314\001\022\026\n\021powerlevel_Unl" +
      "ock\020\315\001\022\021\n\014badge_Unlock\020\255\002\022\025\n\020dailyShop_U",
      "nlock\020\221\003\022\025\n\020arenaShop_Unlock\020\222\003\022\027\n\022myste" +
      "ryShop_Unlock\020\223\003\022\024\n\017raceShop_Unlock\020\224\003\022\026" +
      "\n\021godseaShop_Unlock\020\225\003\022\025\n\020racegacha_Unlo" +
      "ck\020\365\003\022\021\n\014gacha_Unlock\020\331\004\022\020\n\013chat_Unlock\020" +
      "\275\005\022\025\n\020mainequip_Unlock\020\241\006\022\022\n\rrune01_Unlo" +
      "ck\020\242\006\022\022\n\rrune02_Unlock\020\243\006\022\022\n\rrune03_Unlo" +
      "ck\020\244\006\022\022\n\rrune04_Unlock\020\245\006\022\024\n\017speedpve_Un" +
      "lock\020\205\007B\031\n\027com.guaji.game.protocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
